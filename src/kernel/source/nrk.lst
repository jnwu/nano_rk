   1               		.file	"nrk.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 139               	.global	nrk_int_disable
 141               	nrk_int_disable:
 142               		.stabd	46,0,0
   1:../../../src/kernel/source/nrk.c **** /******************************************************************************
   2:../../../src/kernel/source/nrk.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../../src/kernel/source/nrk.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../../src/kernel/source/nrk.c **** *  All rights reserved.
   5:../../../src/kernel/source/nrk.c **** *
   6:../../../src/kernel/source/nrk.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../../src/kernel/source/nrk.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../../src/kernel/source/nrk.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../../src/kernel/source/nrk.c **** *
  10:../../../src/kernel/source/nrk.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../../src/kernel/source/nrk.c **** *  it under the terms of the GNU General Public License as published by
  12:../../../src/kernel/source/nrk.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../../src/kernel/source/nrk.c **** *
  14:../../../src/kernel/source/nrk.c **** *  This program is distributed in the hope that it will be useful,
  15:../../../src/kernel/source/nrk.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../../src/kernel/source/nrk.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../../src/kernel/source/nrk.c **** *  GNU General Public License for more details.
  18:../../../src/kernel/source/nrk.c **** *
  19:../../../src/kernel/source/nrk.c **** *  You should have received a copy of the GNU General Public License
  20:../../../src/kernel/source/nrk.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../../src/kernel/source/nrk.c **** *
  22:../../../src/kernel/source/nrk.c **** *  Contributing Authors (specific to this file):
  23:../../../src/kernel/source/nrk.c **** *  Anthony Rowe
  24:../../../src/kernel/source/nrk.c **** *  Zane Starr
  25:../../../src/kernel/source/nrk.c **** *  Anand Eswaren
  26:../../../src/kernel/source/nrk.c **** *******************************************************************************/
  27:../../../src/kernel/source/nrk.c **** 
  28:../../../src/kernel/source/nrk.c **** #include <stdio.h>
  29:../../../src/kernel/source/nrk.c **** #include <nrk_includes.h> 
  30:../../../src/kernel/source/nrk.c **** #include <ulib.h>
  31:../../../src/kernel/source/nrk.c **** #include <nrk.h>
  32:../../../src/kernel/source/nrk.c **** #include <nrk_task.h>
  33:../../../src/kernel/source/nrk.c **** #include <nrk_idle_task.h>
  34:../../../src/kernel/source/nrk.c **** #include <nrk_defs.h>
  35:../../../src/kernel/source/nrk.c **** #include <nrk_cpu.h>
  36:../../../src/kernel/source/nrk.c **** #include <nrk_scheduler.h>
  37:../../../src/kernel/source/nrk.c **** #include <nrk_error.h>
  38:../../../src/kernel/source/nrk.c **** #include <nrk_events.h>
  39:../../../src/kernel/source/nrk.c **** #include <nrk_stack_check.h>
  40:../../../src/kernel/source/nrk.c **** #include <nrk_status.h>
  41:../../../src/kernel/source/nrk.c **** #include <nrk_watchdog.h>
  42:../../../src/kernel/source/nrk.c **** #include <nrk_sw_wdt.h>
  43:../../../src/kernel/source/nrk.c **** #include <nrk_reserve.h>
  44:../../../src/kernel/source/nrk.c **** #include <nrk_cfg.h>
  45:../../../src/kernel/source/nrk.c **** #include <nrk_stats.h>
  46:../../../src/kernel/source/nrk.c **** 
  47:../../../src/kernel/source/nrk.c **** inline void nrk_int_disable(void) {
 144               	.LM0:
 145               	.LFBB1:
 146               	/* prologue: function */
 147               	/* frame size = 0 */
 148               	/* stack size = 0 */
 149               	.L__stack_usage = 0
  48:../../../src/kernel/source/nrk.c ****   DISABLE_GLOBAL_INT();
 151               	.LM1:
 152               	/* #APP */
 153               	 ;  48 "../../../src/kernel/source/nrk.c" 1
 154 0000 F894      		cli
 155               		
 156               	 ;  0 "" 2
 157               	/* epilogue start */
  49:../../../src/kernel/source/nrk.c **** };
 159               	.LM2:
 160               	/* #NOAPP */
 161 0002 0895      		ret
 163               	.Lscope1:
 165               		.stabd	78,0,0
 167               	.global	nrk_int_enable
 169               	nrk_int_enable:
 170               		.stabd	46,0,0
  50:../../../src/kernel/source/nrk.c **** 
  51:../../../src/kernel/source/nrk.c **** inline void nrk_int_enable(void) {
 172               	.LM3:
 173               	.LFBB2:
 174               	/* prologue: function */
 175               	/* frame size = 0 */
 176               	/* stack size = 0 */
 177               	.L__stack_usage = 0
  52:../../../src/kernel/source/nrk.c ****   ENABLE_GLOBAL_INT();
 179               	.LM4:
 180               	/* #APP */
 181               	 ;  52 "../../../src/kernel/source/nrk.c" 1
 182 0004 7894      		sei
 183               		
 184               	 ;  0 "" 2
 185               	/* epilogue start */
  53:../../../src/kernel/source/nrk.c **** };
 187               	.LM5:
 188               	/* #NOAPP */
 189 0006 0895      		ret
 191               	.Lscope2:
 193               		.stabd	78,0,0
 195               	.global	nrk_halt
 197               	nrk_halt:
 198               		.stabd	46,0,0
  54:../../../src/kernel/source/nrk.c **** 
  55:../../../src/kernel/source/nrk.c **** uint8_t nrk_task_init_cnt;
  56:../../../src/kernel/source/nrk.c **** 
  57:../../../src/kernel/source/nrk.c **** 
  58:../../../src/kernel/source/nrk.c **** void nrk_halt()
  59:../../../src/kernel/source/nrk.c **** {
 200               	.LM6:
 201               	.LFBB3:
 202               	/* prologue: function */
 203               	/* frame size = 0 */
 204               	/* stack size = 0 */
 205               	.L__stack_usage = 0
  60:../../../src/kernel/source/nrk.c **** nrk_int_disable();
 207               	.LM7:
 208 0008 0E94 0000 		call nrk_int_disable
 209               	.L4:
 210 000c 00C0      		rjmp .L4
 212               	.Lscope3:
 214               		.stabd	78,0,0
 216               	.global	nrk_init
 218               	nrk_init:
 219               		.stabd	46,0,0
  61:../../../src/kernel/source/nrk.c **** while(1);
  62:../../../src/kernel/source/nrk.c **** }
  63:../../../src/kernel/source/nrk.c **** 
  64:../../../src/kernel/source/nrk.c **** /**
  65:../../../src/kernel/source/nrk.c ****  *  nrk_init();
  66:../../../src/kernel/source/nrk.c ****  * *  - Init TCBlist - linked list of empty TCBs
  67:../../../src/kernel/source/nrk.c ****  *  - Init global variables
  68:../../../src/kernel/source/nrk.c ****  *  - Init event list
  69:../../../src/kernel/source/nrk.c ****  *  - Create idle task
  70:../../../src/kernel/source/nrk.c ****  */
  71:../../../src/kernel/source/nrk.c **** void nrk_init()
  72:../../../src/kernel/source/nrk.c **** {
 221               	.LM8:
 222               	.LFBB4:
 223 000e 0F93      		push r16
 224 0010 1F93      		push r17
 225 0012 DF93      		push r29
 226 0014 CF93      		push r28
 227 0016 CDB7      		in r28,__SP_L__
 228 0018 DEB7      		in r29,__SP_H__
 229 001a A897      		sbiw r28,40
 230 001c 0FB6      		in __tmp_reg__,__SREG__
 231 001e F894      		cli
 232 0020 DEBF      		out __SP_H__,r29
 233 0022 0FBE      		out __SREG__,__tmp_reg__
 234 0024 CDBF      		out __SP_L__,r28
 235               	/* prologue: function */
 236               	/* frame size = 40 */
 237               	/* stack size = 44 */
 238               	.L__stack_usage = 44
  73:../../../src/kernel/source/nrk.c **** 	nrk_system_ceiling = NRK_SYSTEM_CEILING;
 240               	.LM9:
 241 0026 88EE      		ldi r24,lo8(1000)
 242 0028 93E0      		ldi r25,hi8(1000)
 243 002a 9093 0000 		sts nrk_system_ceiling+1,r25
 244 002e 8093 0000 		sts nrk_system_ceiling,r24
  74:../../../src/kernel/source/nrk.c **** 	
  75:../../../src/kernel/source/nrk.c ****     uint8_t i;	
  76:../../../src/kernel/source/nrk.c **** //    unsigned char *stkc;
  77:../../../src/kernel/source/nrk.c **** 	
  78:../../../src/kernel/source/nrk.c ****    nrk_task_type IdleTask;
  79:../../../src/kernel/source/nrk.c ****    nrk_wakeup_signal = nrk_signal_create();
 246               	.LM10:
 247 0032 0E94 0000 		call nrk_signal_create
 248 0036 8093 0000 		sts nrk_wakeup_signal,r24
  80:../../../src/kernel/source/nrk.c ****    if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
 250               	.LM11:
 251 003a 8F3F      		cpi r24,lo8(-1)
 252 003c 01F4      		brne .L6
 254               	.LM12:
 255 003e 8EE0      		ldi r24,lo8(14)
 256 0040 60E0      		ldi r22,lo8(0)
 257 0042 0E94 0000 		call nrk_kernel_error_add
 258               	.L6:
  81:../../../src/kernel/source/nrk.c ****    //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
  82:../../../src/kernel/source/nrk.c **** #ifndef NRK_SOFT_REBOOT_ON_ERROR
  83:../../../src/kernel/source/nrk.c ****    i=_nrk_startup_error();
 260               	.LM13:
 261 0046 0E94 0000 		call _nrk_startup_error
  84:../../../src/kernel/source/nrk.c **** //   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
  85:../../../src/kernel/source/nrk.c **** #ifndef IGNORE_EXT_RST_ERROR
  86:../../../src/kernel/source/nrk.c ****    if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
  87:../../../src/kernel/source/nrk.c **** #endif
  88:../../../src/kernel/source/nrk.c **** #ifndef IGNORE_BROWN_OUT_ERROR
  89:../../../src/kernel/source/nrk.c ****    if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
  90:../../../src/kernel/source/nrk.c **** #endif
  91:../../../src/kernel/source/nrk.c ****    //if((i&0x8)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
  92:../../../src/kernel/source/nrk.c **** 
  93:../../../src/kernel/source/nrk.c ****    //if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
  94:../../../src/kernel/source/nrk.c **** #endif
  95:../../../src/kernel/source/nrk.c **** 
  96:../../../src/kernel/source/nrk.c ****    #ifdef NRK_STARTUP_VOLTAGE_CHECK
  97:../../../src/kernel/source/nrk.c ****    	if(nrk_voltage_status()==0) nrk_kernel_error_add(NRK_LOW_VOLTAGE,0);
  98:../../../src/kernel/source/nrk.c ****    #endif
  99:../../../src/kernel/source/nrk.c **** 
 100:../../../src/kernel/source/nrk.c **** 
 101:../../../src/kernel/source/nrk.c **** 
 102:../../../src/kernel/source/nrk.c **** 
 103:../../../src/kernel/source/nrk.c ****    #ifdef NRK_REBOOT_ON_ERROR
 104:../../../src/kernel/source/nrk.c ****    #ifndef NRK_WATCHDOG
 105:../../../src/kernel/source/nrk.c ****    while(1)
 106:../../../src/kernel/source/nrk.c **** 	   {
 107:../../../src/kernel/source/nrk.c **** 		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
 108:../../../src/kernel/source/nrk.c ****     		for (i = 0; i < 100; i++)
 109:../../../src/kernel/source/nrk.c ****       			nrk_spin_wait_us (1000);
 110:../../../src/kernel/source/nrk.c **** 	   }
 111:../../../src/kernel/source/nrk.c ****    #endif
 112:../../../src/kernel/source/nrk.c ****    #endif
 113:../../../src/kernel/source/nrk.c **** 
 114:../../../src/kernel/source/nrk.c ****    #ifdef NRK_WATCHDOG
 115:../../../src/kernel/source/nrk.c ****     if(nrk_watchdog_check()==NRK_ERROR) 
 263               	.LM14:
 264 004a 0E94 0000 		call nrk_watchdog_check
 265 004e 8F3F      		cpi r24,lo8(-1)
 266 0050 01F4      		brne .L7
 116:../../../src/kernel/source/nrk.c **** 	{
 117:../../../src/kernel/source/nrk.c ****     	nrk_watchdog_disable();
 268               	.LM15:
 269 0052 0E94 0000 		call nrk_watchdog_disable
 118:../../../src/kernel/source/nrk.c **** 	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
 271               	.LM16:
 272 0056 80E1      		ldi r24,lo8(16)
 273 0058 60E0      		ldi r22,lo8(0)
 274 005a 0E94 0000 		call nrk_kernel_error_add
 275               	.L7:
 119:../../../src/kernel/source/nrk.c **** 	}
 120:../../../src/kernel/source/nrk.c ****     nrk_watchdog_enable();
 277               	.LM17:
 278 005e 0E94 0000 		call nrk_watchdog_enable
 121:../../../src/kernel/source/nrk.c ****     #endif
 122:../../../src/kernel/source/nrk.c ****   
 123:../../../src/kernel/source/nrk.c ****   // nrk_stack_pointer_init(); 
 124:../../../src/kernel/source/nrk.c **** /* 
 125:../../../src/kernel/source/nrk.c ****     #ifdef KERNEL_STK_ARRAY
 126:../../../src/kernel/source/nrk.c **** 	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 127:../../../src/kernel/source/nrk.c **** 	nrk_kernel_stk[0]=STK_CANARY_VAL;
 128:../../../src/kernel/source/nrk.c ****     	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 129:../../../src/kernel/source/nrk.c ****     #else
 130:../../../src/kernel/source/nrk.c ****     	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
 131:../../../src/kernel/source/nrk.c ****     	*stkc = STK_CANARY_VAL;
 132:../../../src/kernel/source/nrk.c ****     	stkc = NRK_KERNEL_STK_TOP;
 133:../../../src/kernel/source/nrk.c **** 	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
 134:../../../src/kernel/source/nrk.c ****     #endif
 135:../../../src/kernel/source/nrk.c ****     *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
 136:../../../src/kernel/source/nrk.c ****     *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
 137:../../../src/kernel/source/nrk.c **** */	
 138:../../../src/kernel/source/nrk.c ****  
 139:../../../src/kernel/source/nrk.c ****    // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );
 140:../../../src/kernel/source/nrk.c **** 
 141:../../../src/kernel/source/nrk.c ****     
 142:../../../src/kernel/source/nrk.c ****     nrk_cur_task_prio = 0;
 280               	.LM18:
 281 0062 1092 0000 		sts nrk_cur_task_prio,__zero_reg__
 143:../../../src/kernel/source/nrk.c ****     nrk_cur_task_TCB = NULL;
 283               	.LM19:
 284 0066 1092 0000 		sts nrk_cur_task_TCB+1,__zero_reg__
 285 006a 1092 0000 		sts nrk_cur_task_TCB,__zero_reg__
 144:../../../src/kernel/source/nrk.c ****     
 145:../../../src/kernel/source/nrk.c ****     nrk_high_ready_TCB = NULL;
 287               	.LM20:
 288 006e 1092 0000 		sts nrk_high_ready_TCB+1,__zero_reg__
 289 0072 1092 0000 		sts nrk_high_ready_TCB,__zero_reg__
 146:../../../src/kernel/source/nrk.c ****     nrk_high_ready_prio = 0; 
 291               	.LM21:
 292 0076 1092 0000 		sts nrk_high_ready_prio,__zero_reg__
 147:../../../src/kernel/source/nrk.c **** 
 148:../../../src/kernel/source/nrk.c ****    #ifdef NRK_STATS_TRACKER
 149:../../../src/kernel/source/nrk.c **** 	nrk_stats_reset();
 294               	.LM22:
 295 007a 0E94 0000 		call nrk_stats_reset
 150:../../../src/kernel/source/nrk.c ****    #endif
 151:../../../src/kernel/source/nrk.c **** 
 152:../../../src/kernel/source/nrk.c ****     #ifdef NRK_MAX_RESERVES 
 153:../../../src/kernel/source/nrk.c ****     // Setup the reserve structures
 154:../../../src/kernel/source/nrk.c ****     _nrk_reserve_init();
 155:../../../src/kernel/source/nrk.c ****     #endif
 156:../../../src/kernel/source/nrk.c **** 
 157:../../../src/kernel/source/nrk.c ****     _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
 297               	.LM23:
 298 007e 1092 0000 		sts _nrk_resource_cnt,__zero_reg__
 299 0082 E0E0      		ldi r30,lo8(nrk_sem_list)
 300 0084 F0E0      		ldi r31,hi8(nrk_sem_list)
 158:../../../src/kernel/source/nrk.c **** 
 159:../../../src/kernel/source/nrk.c **** for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
 160:../../../src/kernel/source/nrk.c **** {
 161:../../../src/kernel/source/nrk.c ****     nrk_sem_list[i].count=-1;
 302               	.LM24:
 303 0086 8FEF      		ldi r24,lo8(-1)
 304               	.L8:
 306               	.LM25:
 307 0088 8083      		st Z,r24
 162:../../../src/kernel/source/nrk.c ****     nrk_sem_list[i].value=-1;
 309               	.LM26:
 310 008a 8283      		std Z+2,r24
 163:../../../src/kernel/source/nrk.c ****     nrk_sem_list[i].resource_ceiling=-1;
 312               	.LM27:
 313 008c 8183      		std Z+1,r24
 314 008e 3396      		adiw r30,3
 159:../../../src/kernel/source/nrk.c **** for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
 316               	.LM28:
 317 0090 90E0      		ldi r25,hi8(nrk_sem_list+15)
 318 0092 E030      		cpi r30,lo8(nrk_sem_list+15)
 319 0094 F907      		cpc r31,r25
 320 0096 01F4      		brne .L8
 164:../../../src/kernel/source/nrk.c ****     //nrk_resource_count[i]=-1;
 165:../../../src/kernel/source/nrk.c ****     //nrk_resource_value[i]=-1;
 166:../../../src/kernel/source/nrk.c ****     //nrk_resource_ceiling[i]=-1;
 167:../../../src/kernel/source/nrk.c ****     
 168:../../../src/kernel/source/nrk.c **** }        
 169:../../../src/kernel/source/nrk.c ****     for (i= 0; i<NRK_MAX_TASKS; i++)
 170:../../../src/kernel/source/nrk.c **** 	{
 171:../../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
 322               	.LM29:
 323 0098 93E6      		ldi r25,lo8(99)
 324 009a 9093 0000 		sts nrk_task_TCB+10,r25
 172:../../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_ID = -1; 
 326               	.LM30:
 327 009e 8093 0000 		sts nrk_task_TCB+8,r24
 171:../../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
 329               	.LM31:
 330 00a2 9093 0000 		sts nrk_task_TCB+49,r25
 332               	.LM32:
 333 00a6 8093 0000 		sts nrk_task_TCB+47,r24
 171:../../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
 335               	.LM33:
 336 00aa 9093 0000 		sts nrk_task_TCB+88,r25
 338               	.LM34:
 339 00ae 8093 0000 		sts nrk_task_TCB+86,r24
 171:../../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
 341               	.LM35:
 342 00b2 9093 0000 		sts nrk_task_TCB+127,r25
 344               	.LM36:
 345 00b6 8093 0000 		sts nrk_task_TCB+125,r24
 171:../../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
 347               	.LM37:
 348 00ba 9093 0000 		sts nrk_task_TCB+166,r25
 350               	.LM38:
 351 00be 8093 0000 		sts nrk_task_TCB+164,r24
 352 00c2 E0E0      		ldi r30,lo8(_nrk_readyQ+3)
 353 00c4 F0E0      		ldi r31,hi8(_nrk_readyQ+3)
 354 00c6 20E0      		ldi r18,lo8(0)
 355 00c8 30E0      		ldi r19,hi8(0)
 356 00ca 00C0      		rjmp .L9
 357               	.L10:
 173:../../../src/kernel/source/nrk.c ****         }
 174:../../../src/kernel/source/nrk.c ****   
 175:../../../src/kernel/source/nrk.c ****        
 176:../../../src/kernel/source/nrk.c ****     // Setup a double linked list of Ready Tasks 
 177:../../../src/kernel/source/nrk.c ****     for (i=0;i<NRK_MAX_TASKS;i++)
 359               	.LM39:
 360 00cc 9A01      		movw r18,r20
 361               	.L9:
 172:../../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_ID = -1; 
 363               	.LM40:
 364 00ce A901      		movw r20,r18
 365 00d0 4F5F      		subi r20,lo8(-(1))
 366 00d2 5F4F      		sbci r21,hi8(-(1))
 178:../../../src/kernel/source/nrk.c **** 	{
 179:../../../src/kernel/source/nrk.c **** 		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
 368               	.LM41:
 369 00d4 CA01      		movw r24,r20
 370 00d6 880F      		lsl r24
 371 00d8 991F      		rol r25
 372 00da 880F      		lsl r24
 373 00dc 991F      		rol r25
 374 00de 840F      		add r24,r20
 375 00e0 951F      		adc r25,r21
 376 00e2 8050      		subi r24,lo8(-(_nrk_readyQ))
 377 00e4 9040      		sbci r25,hi8(-(_nrk_readyQ))
 378 00e6 9183      		std Z+1,r25
 379 00e8 8083      		st Z,r24
 180:../../../src/kernel/source/nrk.c **** 		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
 381               	.LM42:
 382 00ea C901      		movw r24,r18
 383 00ec 880F      		lsl r24
 384 00ee 991F      		rol r25
 385 00f0 880F      		lsl r24
 386 00f2 991F      		rol r25
 387 00f4 820F      		add r24,r18
 388 00f6 931F      		adc r25,r19
 389 00f8 8050      		subi r24,lo8(-(_nrk_readyQ))
 390 00fa 9040      		sbci r25,hi8(-(_nrk_readyQ))
 391 00fc 9483      		std Z+4,r25
 392 00fe 8383      		std Z+3,r24
 393 0100 3596      		adiw r30,5
 177:../../../src/kernel/source/nrk.c ****     for (i=0;i<NRK_MAX_TASKS;i++)
 395               	.LM43:
 396 0102 4530      		cpi r20,5
 397 0104 5105      		cpc r21,__zero_reg__
 398 0106 01F4      		brne .L10
 181:../../../src/kernel/source/nrk.c **** 	}
 182:../../../src/kernel/source/nrk.c **** 	
 183:../../../src/kernel/source/nrk.c **** 	_nrk_readyQ[0].Prev	=	NULL;
 400               	.LM44:
 401 0108 1092 0000 		sts _nrk_readyQ+1+1,__zero_reg__
 402 010c 1092 0000 		sts _nrk_readyQ+1,__zero_reg__
 184:../../../src/kernel/source/nrk.c **** 	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
 404               	.LM45:
 405 0110 1092 0000 		sts _nrk_readyQ+28+1,__zero_reg__
 406 0114 1092 0000 		sts _nrk_readyQ+28,__zero_reg__
 185:../../../src/kernel/source/nrk.c **** 	_head_node = NULL;
 408               	.LM46:
 409 0118 1092 0000 		sts _head_node+1,__zero_reg__
 410 011c 1092 0000 		sts _head_node,__zero_reg__
 186:../../../src/kernel/source/nrk.c **** 	_free_node = &_nrk_readyQ[0];
 412               	.LM47:
 413 0120 80E0      		ldi r24,lo8(_nrk_readyQ)
 414 0122 90E0      		ldi r25,hi8(_nrk_readyQ)
 415 0124 9093 0000 		sts _free_node+1,r25
 416 0128 8093 0000 		sts _free_node,r24
 187:../../../src/kernel/source/nrk.c **** 	
 188:../../../src/kernel/source/nrk.c **** 	
 189:../../../src/kernel/source/nrk.c **** 	
 190:../../../src/kernel/source/nrk.c **** 
 191:../../../src/kernel/source/nrk.c **** 	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
 418               	.LM48:
 419 012c 8E01      		movw r16,r28
 420 012e 0F5F      		subi r16,lo8(-(1))
 421 0130 1F4F      		sbci r17,hi8(-(1))
 422 0132 C801      		movw r24,r16
 423 0134 60E0      		ldi r22,lo8(gs(nrk_idle_task))
 424 0136 70E0      		ldi r23,hi8(gs(nrk_idle_task))
 425 0138 0E94 0000 		call nrk_task_set_entry_function
 192:../../../src/kernel/source/nrk.c **** 	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
 427               	.LM49:
 428 013c C801      		movw r24,r16
 429 013e 60E0      		ldi r22,lo8(nrk_idle_task_stk)
 430 0140 70E0      		ldi r23,hi8(nrk_idle_task_stk)
 431 0142 40E8      		ldi r20,lo8(128)
 432 0144 50E0      		ldi r21,hi8(128)
 433 0146 0E94 0000 		call nrk_task_set_stk
 193:../../../src/kernel/source/nrk.c **** 	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
 435               	.LM50:
 436 014a 85E5      		ldi r24,lo8(85)
 437 014c 8093 0000 		sts nrk_idle_task_stk,r24
 194:../../../src/kernel/source/nrk.c **** 	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
 195:../../../src/kernel/source/nrk.c **** 	IdleTask.prio = 0;
 439               	.LM51:
 440 0150 1986      		std Y+9,__zero_reg__
 196:../../../src/kernel/source/nrk.c **** 	IdleTask.period.secs = 0;
 442               	.LM52:
 443 0152 1C86      		std Y+12,__zero_reg__
 444 0154 1D86      		std Y+13,__zero_reg__
 445 0156 1E86      		std Y+14,__zero_reg__
 446 0158 1F86      		std Y+15,__zero_reg__
 197:../../../src/kernel/source/nrk.c **** 	IdleTask.period.nano_secs = 0;
 448               	.LM53:
 449 015a 188A      		std Y+16,__zero_reg__
 450 015c 198A      		std Y+17,__zero_reg__
 451 015e 1A8A      		std Y+18,__zero_reg__
 452 0160 1B8A      		std Y+19,__zero_reg__
 198:../../../src/kernel/source/nrk.c **** 	IdleTask.cpu_reserve.secs = 0;
 454               	.LM54:
 455 0162 1C8A      		std Y+20,__zero_reg__
 456 0164 1D8A      		std Y+21,__zero_reg__
 457 0166 1E8A      		std Y+22,__zero_reg__
 458 0168 1F8A      		std Y+23,__zero_reg__
 199:../../../src/kernel/source/nrk.c **** 	IdleTask.cpu_reserve.nano_secs = 0;
 460               	.LM55:
 461 016a 188E      		std Y+24,__zero_reg__
 462 016c 198E      		std Y+25,__zero_reg__
 463 016e 1A8E      		std Y+26,__zero_reg__
 464 0170 1B8E      		std Y+27,__zero_reg__
 200:../../../src/kernel/source/nrk.c **** 	IdleTask.offset.secs = 0;
 466               	.LM56:
 467 0172 1C8E      		std Y+28,__zero_reg__
 468 0174 1D8E      		std Y+29,__zero_reg__
 469 0176 1E8E      		std Y+30,__zero_reg__
 470 0178 1F8E      		std Y+31,__zero_reg__
 201:../../../src/kernel/source/nrk.c **** 	IdleTask.offset.nano_secs = 0;
 472               	.LM57:
 473 017a 18A2      		std Y+32,__zero_reg__
 474 017c 19A2      		std Y+33,__zero_reg__
 475 017e 1AA2      		std Y+34,__zero_reg__
 476 0180 1BA2      		std Y+35,__zero_reg__
 202:../../../src/kernel/source/nrk.c **** 	IdleTask.FirstActivation = TRUE;
 478               	.LM58:
 479 0182 81E0      		ldi r24,lo8(1)
 480 0184 8887      		std Y+8,r24
 203:../../../src/kernel/source/nrk.c **** 	IdleTask.Type = IDLE_TASK;
 482               	.LM59:
 483 0186 92E0      		ldi r25,lo8(2)
 484 0188 9A87      		std Y+10,r25
 204:../../../src/kernel/source/nrk.c **** 	IdleTask.SchType = PREEMPTIVE;
 486               	.LM60:
 487 018a 8B87      		std Y+11,r24
 205:../../../src/kernel/source/nrk.c **** 	nrk_activate_task(&IdleTask);
 489               	.LM61:
 490 018c C801      		movw r24,r16
 491 018e 0E94 0000 		call nrk_activate_task
 492               	/* epilogue start */
 206:../../../src/kernel/source/nrk.c **** 	
 207:../../../src/kernel/source/nrk.c **** }
 494               	.LM62:
 495 0192 A896      		adiw r28,40
 496 0194 0FB6      		in __tmp_reg__,__SREG__
 497 0196 F894      		cli
 498 0198 DEBF      		out __SP_H__,r29
 499 019a 0FBE      		out __SREG__,__tmp_reg__
 500 019c CDBF      		out __SP_L__,r28
 501 019e CF91      		pop r28
 502 01a0 DF91      		pop r29
 503 01a2 1F91      		pop r17
 504 01a4 0F91      		pop r16
 505 01a6 0895      		ret
 510               	.Lscope4:
 512               		.stabd	78,0,0
 514               	.global	nrk_SRPAssignPreempLevel
 516               	nrk_SRPAssignPreempLevel:
 517               		.stabd	46,0,0
 208:../../../src/kernel/source/nrk.c **** 
 209:../../../src/kernel/source/nrk.c **** 
 210:../../../src/kernel/source/nrk.c **** 
 211:../../../src/kernel/source/nrk.c **** 
 212:../../../src/kernel/source/nrk.c **** 
 213:../../../src/kernel/source/nrk.c **** 
 214:../../../src/kernel/source/nrk.c **** 
 215:../../../src/kernel/source/nrk.c **** 
 216:../../../src/kernel/source/nrk.c **** void nrk_start (void)
 217:../../../src/kernel/source/nrk.c **** {
 218:../../../src/kernel/source/nrk.c **** 	int8_t task_ID;
 219:../../../src/kernel/source/nrk.c **** 	uint8_t i,j;
 220:../../../src/kernel/source/nrk.c **** //	NRK_STK *x;
 221:../../../src/kernel/source/nrk.c **** //	unsigned char *stkc;
 222:../../../src/kernel/source/nrk.c **** 
 223:../../../src/kernel/source/nrk.c **** 	/*
 224:../../../src/kernel/source/nrk.c **** 		- Get highest priority task from rdy list
 225:../../../src/kernel/source/nrk.c **** 		- set cur prio and start the task 
 226:../../../src/kernel/source/nrk.c **** 	*/
 227:../../../src/kernel/source/nrk.c ****     // Check to make sure all tasks unique
 228:../../../src/kernel/source/nrk.c ****     for(i=0; i<NRK_MAX_TASKS; i++ )
 229:../../../src/kernel/source/nrk.c ****     {
 230:../../../src/kernel/source/nrk.c **** 	task_ID = nrk_task_TCB[i].task_ID;
 231:../../../src/kernel/source/nrk.c **** 	// only check activated tasks
 232:../../../src/kernel/source/nrk.c **** 	if(task_ID!=-1)
 233:../../../src/kernel/source/nrk.c **** 	{
 234:../../../src/kernel/source/nrk.c ****     		for(j=0; j<NRK_MAX_TASKS; j++ )
 235:../../../src/kernel/source/nrk.c **** 		{
 236:../../../src/kernel/source/nrk.c **** 			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
 237:../../../src/kernel/source/nrk.c **** 			{
 238:../../../src/kernel/source/nrk.c **** 			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
 239:../../../src/kernel/source/nrk.c **** 
 240:../../../src/kernel/source/nrk.c **** 			}
 241:../../../src/kernel/source/nrk.c **** 		}
 242:../../../src/kernel/source/nrk.c **** 	}
 243:../../../src/kernel/source/nrk.c **** 
 244:../../../src/kernel/source/nrk.c ****     }
 245:../../../src/kernel/source/nrk.c **** 
 246:../../../src/kernel/source/nrk.c **** //cath @T3 SRP: call the function to assign task preemption level
 247:../../../src/kernel/source/nrk.c ****     nrk_SRPAssignPreempLevel();
 248:../../../src/kernel/source/nrk.c **** 
 249:../../../src/kernel/source/nrk.c ****     task_ID = nrk_get_high_ready_task_ID();	
 250:../../../src/kernel/source/nrk.c ****     nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
 251:../../../src/kernel/source/nrk.c ****     nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
 252:../../../src/kernel/source/nrk.c ****     nrk_cur_task_prio = nrk_high_ready_prio;
 253:../../../src/kernel/source/nrk.c **** 		
 254:../../../src/kernel/source/nrk.c **** //    nrk_stack_pointer_restore();
 255:../../../src/kernel/source/nrk.c **** 
 256:../../../src/kernel/source/nrk.c ****     /*
 257:../../../src/kernel/source/nrk.c ****     #ifdef KERNEL_STK_ARRAY
 258:../../../src/kernel/source/nrk.c ****      	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 259:../../../src/kernel/source/nrk.c ****     #else
 260:../../../src/kernel/source/nrk.c ****     	stkc = NRK_KERNEL_STK_TOP;
 261:../../../src/kernel/source/nrk.c ****     #endif
 262:../../../src/kernel/source/nrk.c ****     *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
 263:../../../src/kernel/source/nrk.c ****     *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
 264:../../../src/kernel/source/nrk.c ****     
 265:../../../src/kernel/source/nrk.c ****     //TODO: this way on msp
 266:../../../src/kernel/source/nrk.c ****     // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
 267:../../../src/kernel/source/nrk.c ****     // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
 268:../../../src/kernel/source/nrk.c **** */
 269:../../../src/kernel/source/nrk.c **** 
 270:../../../src/kernel/source/nrk.c ****     //cath @T3 SRP: call the function to assign task preemption level
 271:../../../src/kernel/source/nrk.c ****    // nrk_SRPAssignPreempLevel();
 272:../../../src/kernel/source/nrk.c ****     nrk_target_start();
 273:../../../src/kernel/source/nrk.c ****     nrk_stack_pointer_init(); 
 274:../../../src/kernel/source/nrk.c ****     nrk_start_high_ready_task();	
 275:../../../src/kernel/source/nrk.c **** 
 276:../../../src/kernel/source/nrk.c ****     // you should never get here    
 277:../../../src/kernel/source/nrk.c ****     while(1);
 278:../../../src/kernel/source/nrk.c **** }
 279:../../../src/kernel/source/nrk.c **** 
 280:../../../src/kernel/source/nrk.c **** //cath @T3 SRP: implementing the function to assign each task a preemption level based on their per
 281:../../../src/kernel/source/nrk.c **** void nrk_SRPAssignPreempLevel(void){
 519               	.LM63:
 520               	.LFBB5:
 521 01a8 0F93      		push r16
 522 01aa 1F93      		push r17
 523 01ac CF93      		push r28
 524 01ae DF93      		push r29
 525               	/* prologue: function */
 526               	/* frame size = 0 */
 527               	/* stack size = 4 */
 528               	.L__stack_usage = 4
 282:../../../src/kernel/source/nrk.c **** 	//according to SRP: if A arrives after B and priority(A) > priority(B) then PreemptionLevel(A) > P
 283:../../../src/kernel/source/nrk.c **** 
 284:../../../src/kernel/source/nrk.c **** 	int8_t task_ID;
 285:../../../src/kernel/source/nrk.c **** 	uint16_t curTaskPeriod;
 286:../../../src/kernel/source/nrk.c **** 	uint8_t i,j;
 287:../../../src/kernel/source/nrk.c **** 	
 288:../../../src/kernel/source/nrk.c **** 
 289:../../../src/kernel/source/nrk.c **** 	//firstly, initialize all task preemption levels to 0
 290:../../../src/kernel/source/nrk.c **** 	for (i=0; i<NRK_MAX_TASKS; i++)
 291:../../../src/kernel/source/nrk.c **** 	{
 292:../../../src/kernel/source/nrk.c **** 		nrk_task_TCB[i].SRPpreempLevel=0;
 530               	.LM64:
 531 01b0 1092 0000 		sts nrk_task_TCB+33,__zero_reg__
 532 01b4 1092 0000 		sts nrk_task_TCB+72,__zero_reg__
 533 01b8 1092 0000 		sts nrk_task_TCB+111,__zero_reg__
 534 01bc 1092 0000 		sts nrk_task_TCB+150,__zero_reg__
 535 01c0 1092 0000 		sts nrk_task_TCB+189,__zero_reg__
 536 01c4 A0E0      		ldi r26,lo8(nrk_task_TCB+8)
 537 01c6 B0E0      		ldi r27,hi8(nrk_task_TCB+8)
 538               	.L16:
 293:../../../src/kernel/source/nrk.c **** 	}
 294:../../../src/kernel/source/nrk.c **** 	
 295:../../../src/kernel/source/nrk.c **** 	// For each task set in nrk_task_TCB, we check each of the other tasks if their period is longer t
 296:../../../src/kernel/source/nrk.c **** 	// If so, the preemption level will be incremented
 297:../../../src/kernel/source/nrk.c **** 	for(i=0; i<NRK_MAX_TASKS; i++)
 298:../../../src/kernel/source/nrk.c **** 	{
 299:../../../src/kernel/source/nrk.c **** 		task_ID=nrk_task_TCB[i].task_ID;
 300:../../../src/kernel/source/nrk.c **** 		curTaskPeriod = nrk_task_TCB[i].period;
 540               	.LM65:
 541 01c8 5396      		adiw r26,19
 542 01ca 8D91      		ld r24,X+
 543 01cc 9C91      		ld r25,X
 544 01ce 5497      		sbiw r26,19+1
 301:../../../src/kernel/source/nrk.c **** 	
 302:../../../src/kernel/source/nrk.c **** 		if(task_ID!=-1)
 546               	.LM66:
 547 01d0 2C91      		ld r18,X
 548 01d2 2F3F      		cpi r18,lo8(-1)
 549 01d4 01F0      		breq .L13
 550 01d6 E0E0      		ldi r30,lo8(nrk_task_TCB+27)
 551 01d8 F0E0      		ldi r31,hi8(nrk_task_TCB+27)
 552               	.L15:
 303:../../../src/kernel/source/nrk.c **** 		{
 304:../../../src/kernel/source/nrk.c ****     			for(j=0; j<NRK_MAX_TASKS; j++ )
 305:../../../src/kernel/source/nrk.c **** 			{
 306:../../../src/kernel/source/nrk.c **** 				if (nrk_task_TCB[j].period>curTaskPeriod)
 554               	.LM67:
 555 01da 2081      		ld r18,Z
 556 01dc 3181      		ldd r19,Z+1
 557 01de 8217      		cp r24,r18
 558 01e0 9307      		cpc r25,r19
 559 01e2 00F4      		brsh .L14
 307:../../../src/kernel/source/nrk.c **** 					nrk_task_TCB[j].SRPpreempLevel++;
 561               	.LM68:
 562 01e4 2681      		ldd r18,Z+6
 563 01e6 2F5F      		subi r18,lo8(-(1))
 564 01e8 2683      		std Z+6,r18
 565               	.L14:
 566 01ea B796      		adiw r30,39
 304:../../../src/kernel/source/nrk.c ****     			for(j=0; j<NRK_MAX_TASKS; j++ )
 568               	.LM69:
 569 01ec 20E0      		ldi r18,hi8(nrk_task_TCB+222)
 570 01ee E030      		cpi r30,lo8(nrk_task_TCB+222)
 571 01f0 F207      		cpc r31,r18
 572 01f2 01F4      		brne .L15
 573               	.L13:
 574 01f4 9796      		adiw r26,39
 297:../../../src/kernel/source/nrk.c **** 	for(i=0; i<NRK_MAX_TASKS; i++)
 576               	.LM70:
 577 01f6 40E0      		ldi r20,hi8(nrk_task_TCB+203)
 578 01f8 A030      		cpi r26,lo8(nrk_task_TCB+203)
 579 01fa B407      		cpc r27,r20
 580 01fc 01F4      		brne .L16
 581 01fe C0E0      		ldi r28,lo8(nrk_task_TCB+33)
 582 0200 D0E0      		ldi r29,hi8(nrk_task_TCB+33)
 583 0202 80E0      		ldi r24,lo8(0)
 584 0204 90E0      		ldi r25,hi8(0)
 281:../../../src/kernel/source/nrk.c **** void nrk_SRPAssignPreempLevel(void){
 586               	.LM71:
 587 0206 27E2      		ldi r18,lo8(39)
 588 0208 30E0      		ldi r19,hi8(39)
 589 020a 00C0      		rjmp .L17
 590               	.L20:
 308:../../../src/kernel/source/nrk.c **** 			}
 309:../../../src/kernel/source/nrk.c **** 		}
 310:../../../src/kernel/source/nrk.c **** 	}
 311:../../../src/kernel/source/nrk.c **** 
 312:../../../src/kernel/source/nrk.c **** 	// Update all semaphore max ceilings after task preemption levels have been set.
 313:../../../src/kernel/source/nrk.c **** 	for (i = 0; i < NRK_MAX_TASKS; i++)
 314:../../../src/kernel/source/nrk.c **** 	{
 315:../../../src/kernel/source/nrk.c **** 		for (j = 0; j < NRK_MAX_RESOURCE_CNT; j++)
 316:../../../src/kernel/source/nrk.c **** 		{
 317:../../../src/kernel/source/nrk.c **** 			if (nrk_task_TCB[i].semaphores[j])
 592               	.LM72:
 593 020c 4D91      		ld r20,X+
 594 020e 4423      		tst r20
 595 0210 01F0      		breq .L18
 318:../../../src/kernel/source/nrk.c **** 			{
 319:../../../src/kernel/source/nrk.c **** 				if ((nrk_sem_list[j].resource_ceiling > nrk_task_TCB[i].SRPpreempLevel) ||
 597               	.LM73:
 598 0212 0081      		ld r16,Z
 599 0214 1881      		ld r17,Y
 600 0216 602F      		mov r22,r16
 601 0218 7727      		clr r23
 602 021a 67FD      		sbrc r22,7
 603 021c 7095      		com r23
 604 021e 412F      		mov r20,r17
 605 0220 50E0      		ldi r21,lo8(0)
 606 0222 4617      		cp r20,r22
 607 0224 5707      		cpc r21,r23
 608 0226 04F0      		brlt .L19
 610               	.LM74:
 611 0228 0F3F      		cpi r16,lo8(-1)
 612 022a 01F4      		brne .L18
 613               	.L19:
 320:../../../src/kernel/source/nrk.c **** 				    (nrk_sem_list[j].resource_ceiling == -1))
 321:../../../src/kernel/source/nrk.c **** 				{
 322:../../../src/kernel/source/nrk.c **** 					nrk_sem_list[j].resource_ceiling = nrk_task_TCB[i].SRPpreempLevel;
 615               	.LM75:
 616 022c 1083      		st Z,r17
 617               	.L18:
 618 022e 3396      		adiw r30,3
 315:../../../src/kernel/source/nrk.c **** 		for (j = 0; j < NRK_MAX_RESOURCE_CNT; j++)
 620               	.LM76:
 621 0230 40E0      		ldi r20,hi8(nrk_sem_list+16)
 622 0232 E030      		cpi r30,lo8(nrk_sem_list+16)
 623 0234 F407      		cpc r31,r20
 624 0236 01F4      		brne .L20
 625 0238 0196      		adiw r24,1
 626 023a A796      		adiw r28,39
 313:../../../src/kernel/source/nrk.c **** 	for (i = 0; i < NRK_MAX_TASKS; i++)
 628               	.LM77:
 629 023c 8530      		cpi r24,5
 630 023e 9105      		cpc r25,__zero_reg__
 631 0240 01F0      		breq .L12
 632               	.L17:
 281:../../../src/kernel/source/nrk.c **** void nrk_SRPAssignPreempLevel(void){
 634               	.LM78:
 635 0242 829F      		mul r24,r18
 636 0244 D001      		movw r26,r0
 637 0246 839F      		mul r24,r19
 638 0248 B00D      		add r27,r0
 639 024a 929F      		mul r25,r18
 640 024c B00D      		add r27,r0
 641 024e 1124      		clr r1
 642 0250 A050      		subi r26,lo8(-(nrk_task_TCB+34))
 643 0252 B040      		sbci r27,hi8(-(nrk_task_TCB+34))
 313:../../../src/kernel/source/nrk.c **** 	for (i = 0; i < NRK_MAX_TASKS; i++)
 645               	.LM79:
 646 0254 E0E0      		ldi r30,lo8(nrk_sem_list+1)
 647 0256 F0E0      		ldi r31,hi8(nrk_sem_list+1)
 648 0258 00C0      		rjmp .L20
 649               	.L12:
 650               	/* epilogue start */
 323:../../../src/kernel/source/nrk.c **** 				}
 324:../../../src/kernel/source/nrk.c **** 			}
 325:../../../src/kernel/source/nrk.c **** 		}
 326:../../../src/kernel/source/nrk.c **** 	}
 327:../../../src/kernel/source/nrk.c **** }
 652               	.LM80:
 653 025a DF91      		pop r29
 654 025c CF91      		pop r28
 655 025e 1F91      		pop r17
 656 0260 0F91      		pop r16
 657 0262 0895      		ret
 662               	.Lscope5:
 664               		.stabd	78,0,0
 666               	.global	nrk_start
 668               	nrk_start:
 669               		.stabd	46,0,0
 217:../../../src/kernel/source/nrk.c **** {
 671               	.LM81:
 672               	.LFBB6:
 673 0264 CF92      		push r12
 674 0266 DF92      		push r13
 675 0268 FF92      		push r15
 676 026a 0F93      		push r16
 677 026c 1F93      		push r17
 678 026e DF93      		push r29
 679 0270 CF93      		push r28
 680 0272 00D0      		rcall .
 681 0274 CDB7      		in r28,__SP_L__
 682 0276 DEB7      		in r29,__SP_H__
 683               	/* prologue: function */
 684               	/* frame size = 2 */
 685               	/* stack size = 9 */
 686               	.L__stack_usage = 9
 232:../../../src/kernel/source/nrk.c **** 	if(task_ID!=-1)
 688               	.LM82:
 689 0278 E0E0      		ldi r30,lo8(nrk_task_TCB+8)
 690 027a CE2E      		mov r12,r30
 691 027c E0E0      		ldi r30,hi8(nrk_task_TCB+8)
 692 027e DE2E      		mov r13,r30
 228:../../../src/kernel/source/nrk.c ****     for(i=0; i<NRK_MAX_TASKS; i++ )
 694               	.LM83:
 695 0280 90E0      		ldi r25,lo8(0)
 696               	.L29:
 230:../../../src/kernel/source/nrk.c **** 	task_ID = nrk_task_TCB[i].task_ID;
 698               	.LM84:
 699 0282 F601      		movw r30,r12
 700 0284 F080      		ld r15,Z
 232:../../../src/kernel/source/nrk.c **** 	if(task_ID!=-1)
 702               	.LM85:
 703 0286 FF2D      		mov r31,r15
 704 0288 FF3F      		cpi r31,lo8(-1)
 705 028a 01F0      		breq .L26
 706 028c 00E0      		ldi r16,lo8(nrk_task_TCB+8)
 707 028e 10E0      		ldi r17,hi8(nrk_task_TCB+8)
 708 0290 20E0      		ldi r18,lo8(0)
 709               	.L28:
 236:../../../src/kernel/source/nrk.c **** 			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
 711               	.LM86:
 712 0292 9217      		cp r25,r18
 713 0294 01F0      		breq .L27
 236:../../../src/kernel/source/nrk.c **** 			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
 715               	.LM87:
 716 0296 F801      		movw r30,r16
 717 0298 8081      		ld r24,Z
 718 029a F816      		cp r15,r24
 719 029c 01F4      		brne .L27
 238:../../../src/kernel/source/nrk.c **** 			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
 721               	.LM88:
 722 029e 85E0      		ldi r24,lo8(5)
 723 02a0 6F2D      		mov r22,r15
 724 02a2 2983      		std Y+1,r18
 725 02a4 9A83      		std Y+2,r25
 726 02a6 0E94 0000 		call nrk_kernel_error_add
 727 02aa 9A81      		ldd r25,Y+2
 728 02ac 2981      		ldd r18,Y+1
 729               	.L27:
 234:../../../src/kernel/source/nrk.c ****     		for(j=0; j<NRK_MAX_TASKS; j++ )
 731               	.LM89:
 732 02ae 2F5F      		subi r18,lo8(-(1))
 733 02b0 095D      		subi r16,lo8(-(39))
 734 02b2 1F4F      		sbci r17,hi8(-(39))
 735 02b4 2530      		cpi r18,lo8(5)
 736 02b6 01F4      		brne .L28
 737               	.L26:
 228:../../../src/kernel/source/nrk.c ****     for(i=0; i<NRK_MAX_TASKS; i++ )
 739               	.LM90:
 740 02b8 9F5F      		subi r25,lo8(-(1))
 741 02ba 27E2      		ldi r18,lo8(39)
 742 02bc 30E0      		ldi r19,hi8(39)
 743 02be C20E      		add r12,r18
 744 02c0 D31E      		adc r13,r19
 745 02c2 9530      		cpi r25,lo8(5)
 746 02c4 01F4      		brne .L29
 247:../../../src/kernel/source/nrk.c ****     nrk_SRPAssignPreempLevel();
 748               	.LM91:
 749 02c6 0E94 0000 		call nrk_SRPAssignPreempLevel
 249:../../../src/kernel/source/nrk.c ****     task_ID = nrk_get_high_ready_task_ID();	
 751               	.LM92:
 752 02ca 0E94 0000 		call nrk_get_high_ready_task_ID
 250:../../../src/kernel/source/nrk.c ****     nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
 754               	.LM93:
 755 02ce 9927      		clr r25
 756 02d0 87FD      		sbrc r24,7
 757 02d2 9095      		com r25
 758 02d4 27E2      		ldi r18,lo8(39)
 759 02d6 30E0      		ldi r19,hi8(39)
 760 02d8 829F      		mul r24,r18
 761 02da F001      		movw r30,r0
 762 02dc 839F      		mul r24,r19
 763 02de F00D      		add r31,r0
 764 02e0 929F      		mul r25,r18
 765 02e2 F00D      		add r31,r0
 766 02e4 1124      		clr r1
 767 02e6 E050      		subi r30,lo8(-(nrk_task_TCB))
 768 02e8 F040      		sbci r31,hi8(-(nrk_task_TCB))
 769 02ea 8285      		ldd r24,Z+10
 770 02ec 8093 0000 		sts nrk_high_ready_prio,r24
 251:../../../src/kernel/source/nrk.c ****     nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
 772               	.LM94:
 773 02f0 F093 0000 		sts nrk_cur_task_TCB+1,r31
 774 02f4 E093 0000 		sts nrk_cur_task_TCB,r30
 775 02f8 F093 0000 		sts nrk_high_ready_TCB+1,r31
 776 02fc E093 0000 		sts nrk_high_ready_TCB,r30
 252:../../../src/kernel/source/nrk.c ****     nrk_cur_task_prio = nrk_high_ready_prio;
 778               	.LM95:
 779 0300 8093 0000 		sts nrk_cur_task_prio,r24
 272:../../../src/kernel/source/nrk.c ****     nrk_target_start();
 781               	.LM96:
 782 0304 0E94 0000 		call nrk_target_start
 273:../../../src/kernel/source/nrk.c ****     nrk_stack_pointer_init(); 
 784               	.LM97:
 785 0308 0E94 0000 		call nrk_stack_pointer_init
 274:../../../src/kernel/source/nrk.c ****     nrk_start_high_ready_task();	
 787               	.LM98:
 788 030c 0E94 0000 		call nrk_start_high_ready_task
 789               	.L30:
 790 0310 00C0      		rjmp .L30
 796               	.Lscope6:
 798               		.stabd	78,0,0
 806               	.global	nrk_TCB_init
 808               	nrk_TCB_init:
 809               		.stabd	46,0,0
 328:../../../src/kernel/source/nrk.c **** 
 329:../../../src/kernel/source/nrk.c **** int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pe
 330:../../../src/kernel/source/nrk.c **** {
 811               	.LM99:
 812               	.LFBB7:
 813 0312 CF92      		push r12
 814 0314 DF92      		push r13
 815 0316 EF92      		push r14
 816 0318 FF92      		push r15
 817 031a 0F93      		push r16
 818 031c 1F93      		push r17
 819 031e CF93      		push r28
 820 0320 DF93      		push r29
 821               	/* prologue: function */
 822               	/* frame size = 0 */
 823               	/* stack size = 8 */
 824               	.L__stack_usage = 8
 825 0322 EC01      		movw r28,r24
 826 0324 8B01      		movw r16,r22
 827 0326 6A01      		movw r12,r20
 331:../../../src/kernel/source/nrk.c **** 	
 332:../../../src/kernel/source/nrk.c ****     //  Already in critical section so no needenter critical section
 333:../../../src/kernel/source/nrk.c ****     if(Task->Type!=IDLE_TASK)
 829               	.LM100:
 830 0328 8985      		ldd r24,Y+9
 831 032a 8230      		cpi r24,lo8(2)
 832 032c 01F0      		breq .L34
 334:../../../src/kernel/source/nrk.c ****     	Task->task_ID=nrk_task_init_cnt;
 834               	.LM101:
 835 032e 8091 0000 		lds r24,nrk_task_init_cnt
 836 0332 8883      		st Y,r24
 837 0334 00C0      		rjmp .L35
 838               	.L34:
 335:../../../src/kernel/source/nrk.c ****     else Task->task_ID=NRK_IDLE_TASK_ID;
 840               	.LM102:
 841 0336 1882      		st Y,__zero_reg__
 842               	.L35:
 336:../../../src/kernel/source/nrk.c **** 
 337:../../../src/kernel/source/nrk.c ****     if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
 844               	.LM103:
 845 0338 8091 0000 		lds r24,nrk_task_init_cnt
 846 033c 8530      		cpi r24,lo8(5)
 847 033e 00F0      		brlo .L36
 849               	.LM104:
 850 0340 87E0      		ldi r24,lo8(7)
 851 0342 60E0      		ldi r22,lo8(0)
 852 0344 0E94 0000 		call nrk_kernel_error_add
 853               	.L36:
 338:../../../src/kernel/source/nrk.c ****     if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
 855               	.LM105:
 856 0348 8985      		ldd r24,Y+9
 857 034a 8230      		cpi r24,lo8(2)
 858 034c 01F0      		breq .L37
 860               	.LM106:
 861 034e 8091 0000 		lds r24,nrk_task_init_cnt
 862 0352 8F5F      		subi r24,lo8(-(1))
 863 0354 8093 0000 		sts nrk_task_init_cnt,r24
 864               	.L37:
 339:../../../src/kernel/source/nrk.c ****     if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
 866               	.LM107:
 867 0358 8091 0000 		lds r24,nrk_task_init_cnt
 868 035c 8823      		tst r24
 869 035e 01F4      		brne .L38
 871               	.LM108:
 872 0360 81E0      		ldi r24,lo8(1)
 873 0362 8093 0000 		sts nrk_task_init_cnt,r24
 874               	.L38:
 340:../../../src/kernel/source/nrk.c ****     //initialize member of TCB structure
 341:../../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
 876               	.LM109:
 877 0366 2881      		ld r18,Y
 878 0368 3327      		clr r19
 879 036a 27FD      		sbrc r18,7
 880 036c 3095      		com r19
 881 036e 87E2      		ldi r24,lo8(39)
 882 0370 90E0      		ldi r25,hi8(39)
 883 0372 289F      		mul r18,r24
 884 0374 F001      		movw r30,r0
 885 0376 299F      		mul r18,r25
 886 0378 F00D      		add r31,r0
 887 037a 389F      		mul r19,r24
 888 037c F00D      		add r31,r0
 889 037e 1124      		clr r1
 890 0380 E050      		subi r30,lo8(-(nrk_task_TCB))
 891 0382 F040      		sbci r31,hi8(-(nrk_task_TCB))
 892 0384 1183      		std Z+1,r17
 893 0386 0083      		st Z,r16
 342:../../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
 895               	.LM110:
 896 0388 2885      		ldd r18,Y+8
 897 038a 2287      		std Z+10,r18
 343:../../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
 899               	.LM111:
 900 038c 2881      		ld r18,Y
 901 038e 3327      		clr r19
 902 0390 27FD      		sbrc r18,7
 903 0392 3095      		com r19
 904 0394 289F      		mul r18,r24
 905 0396 F001      		movw r30,r0
 906 0398 299F      		mul r18,r25
 907 039a F00D      		add r31,r0
 908 039c 389F      		mul r19,r24
 909 039e F00D      		add r31,r0
 910 03a0 1124      		clr r1
 911 03a2 E050      		subi r30,lo8(-(nrk_task_TCB))
 912 03a4 F040      		sbci r31,hi8(-(nrk_task_TCB))
 913 03a6 23E0      		ldi r18,lo8(3)
 914 03a8 2187      		std Z+9,r18
 344:../../../src/kernel/source/nrk.c ****     
 345:../../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
 916               	.LM112:
 917 03aa 4881      		ld r20,Y
 918 03ac 242F      		mov r18,r20
 919 03ae 3327      		clr r19
 920 03b0 27FD      		sbrc r18,7
 921 03b2 3095      		com r19
 922 03b4 289F      		mul r18,r24
 923 03b6 F001      		movw r30,r0
 924 03b8 299F      		mul r18,r25
 925 03ba F00D      		add r31,r0
 926 03bc 389F      		mul r19,r24
 927 03be F00D      		add r31,r0
 928 03c0 1124      		clr r1
 929 03c2 E050      		subi r30,lo8(-(nrk_task_TCB))
 930 03c4 F040      		sbci r31,hi8(-(nrk_task_TCB))
 931 03c6 4087      		std Z+8,r20
 346:../../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].suspend_flag = 0;
 933               	.LM113:
 934 03c8 2881      		ld r18,Y
 935 03ca 3327      		clr r19
 936 03cc 27FD      		sbrc r18,7
 937 03ce 3095      		com r19
 938 03d0 289F      		mul r18,r24
 939 03d2 8001      		movw r16,r0
 940 03d4 299F      		mul r18,r25
 941 03d6 100D      		add r17,r0
 942 03d8 389F      		mul r19,r24
 943 03da 100D      		add r17,r0
 944 03dc 1124      		clr r1
 945 03de 0050      		subi r16,lo8(-(nrk_task_TCB))
 946 03e0 1040      		sbci r17,hi8(-(nrk_task_TCB))
 947 03e2 F801      		movw r30,r16
 948 03e4 1582      		std Z+5,__zero_reg__
 347:../../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( &(Task->period) );
 950               	.LM114:
 951 03e6 CE01      		movw r24,r28
 952 03e8 0B96      		adiw r24,11
 953 03ea 0E94 0000 		call _nrk_time_to_ticks
 954 03ee F801      		movw r30,r16
 955 03f0 948F      		std Z+28,r25
 956 03f2 838F      		std Z+27,r24
 348:../../../src/kernel/source/nrk.c ****     if(Task->period.secs > 61) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
 958               	.LM115:
 959 03f4 8B85      		ldd r24,Y+11
 960 03f6 9C85      		ldd r25,Y+12
 961 03f8 AD85      		ldd r26,Y+13
 962 03fa BE85      		ldd r27,Y+14
 963 03fc 8E33      		cpi r24,lo8(62)
 964 03fe 9105      		cpc r25,__zero_reg__
 965 0400 A105      		cpc r26,__zero_reg__
 966 0402 B105      		cpc r27,__zero_reg__
 967 0404 00F0      		brlo .L39
 969               	.LM116:
 970 0406 86E1      		ldi r24,lo8(22)
 971 0408 6881      		ld r22,Y
 972 040a 0E94 0000 		call nrk_kernel_error_add
 973               	.L39:
 349:../../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( &(Task->offset));
 975               	.LM117:
 976 040e 0881      		ld r16,Y
 977 0410 1127      		clr r17
 978 0412 07FD      		sbrc r16,7
 979 0414 1095      		com r17
 980 0416 CE01      		movw r24,r28
 981 0418 4B96      		adiw r24,27
 982 041a 0E94 0000 		call _nrk_time_to_ticks
 983 041e F7E2      		ldi r31,lo8(39)
 984 0420 EF2E      		mov r14,r31
 985 0422 F12C      		mov r15,__zero_reg__
 986 0424 0E9D      		mul r16,r14
 987 0426 F001      		movw r30,r0
 988 0428 0F9D      		mul r16,r15
 989 042a F00D      		add r31,r0
 990 042c 1E9D      		mul r17,r14
 991 042e F00D      		add r31,r0
 992 0430 1124      		clr r1
 993 0432 E050      		subi r30,lo8(-(nrk_task_TCB))
 994 0434 F040      		sbci r31,hi8(-(nrk_task_TCB))
 995 0436 968B      		std Z+22,r25
 996 0438 858B      		std Z+21,r24
 350:../../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->
 998               	.LM118:
 999 043a 8881      		ld r24,Y
 1000 043c 9927      		clr r25
 1001 043e 87FD      		sbrc r24,7
 1002 0440 9095      		com r25
 1003 0442 8E9D      		mul r24,r14
 1004 0444 8001      		movw r16,r0
 1005 0446 8F9D      		mul r24,r15
 1006 0448 100D      		add r17,r0
 1007 044a 9E9D      		mul r25,r14
 1008 044c 100D      		add r17,r0
 1009 044e 1124      		clr r1
 1010 0450 0050      		subi r16,lo8(-(nrk_task_TCB))
 1011 0452 1040      		sbci r17,hi8(-(nrk_task_TCB))
 1012 0454 F801      		movw r30,r16
 1013 0456 8589      		ldd r24,Z+21
 1014 0458 9689      		ldd r25,Z+22
 1015 045a 238D      		ldd r18,Z+27
 1016 045c 348D      		ldd r19,Z+28
 1017 045e 820F      		add r24,r18
 1018 0460 931F      		adc r25,r19
 1019 0462 908F      		std Z+24,r25
 1020 0464 878B      		std Z+23,r24
 351:../../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks(&(Task->cpu_reserve));
 1022               	.LM119:
 1023 0466 CE01      		movw r24,r28
 1024 0468 4396      		adiw r24,19
 1025 046a 0E94 0000 		call _nrk_time_to_ticks
 1026 046e F801      		movw r30,r16
 1027 0470 968F      		std Z+30,r25
 1028 0472 858F      		std Z+29,r24
 352:../../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
 1030               	.LM120:
 1031 0474 8881      		ld r24,Y
 1032 0476 9927      		clr r25
 1033 0478 87FD      		sbrc r24,7
 1034 047a 9095      		com r25
 1035 047c 8E9D      		mul r24,r14
 1036 047e F001      		movw r30,r0
 1037 0480 8F9D      		mul r24,r15
 1038 0482 F00D      		add r31,r0
 1039 0484 9E9D      		mul r25,r14
 1040 0486 F00D      		add r31,r0
 1041 0488 1124      		clr r1
 1042 048a E050      		subi r30,lo8(-(nrk_task_TCB))
 1043 048c F040      		sbci r31,hi8(-(nrk_task_TCB))
 1044 048e 858D      		ldd r24,Z+29
 1045 0490 968D      		ldd r25,Z+30
 1046 0492 928F      		std Z+26,r25
 1047 0494 818F      		std Z+25,r24
 353:../../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].num_periods = 1;
 1049               	.LM121:
 1050 0496 81E0      		ldi r24,lo8(1)
 1051 0498 90E0      		ldi r25,hi8(1)
 1052 049a 90A3      		std Z+32,r25
 1053 049c 878F      		std Z+31,r24
 354:../../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
 1055               	.LM122:
 1056 049e D382      		std Z+3,r13
 1057 04a0 C282      		std Z+2,r12
 355:../../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].errno= NRK_OK;
 1059               	.LM123:
 1060 04a2 81E0      		ldi r24,lo8(1)
 1061 04a4 8487      		std Z+12,r24
 1062               	/* epilogue start */
 356:../../../src/kernel/source/nrk.c ****  
 357:../../../src/kernel/source/nrk.c **** 	
 358:../../../src/kernel/source/nrk.c **** 	         
 359:../../../src/kernel/source/nrk.c **** 
 360:../../../src/kernel/source/nrk.c **** 			
 361:../../../src/kernel/source/nrk.c ****     return NRK_OK;
 362:../../../src/kernel/source/nrk.c **** 
 363:../../../src/kernel/source/nrk.c **** }
 1064               	.LM124:
 1065 04a6 DF91      		pop r29
 1066 04a8 CF91      		pop r28
 1067 04aa 1F91      		pop r17
 1068 04ac 0F91      		pop r16
 1069 04ae FF90      		pop r15
 1070 04b0 EF90      		pop r14
 1071 04b2 DF90      		pop r13
 1072 04b4 CF90      		pop r12
 1073 04b6 0895      		ret
 1075               	.Lscope7:
 1077               		.stabd	78,0,0
 1079               	.global	_nrk_timer_tick
 1081               	_nrk_timer_tick:
 1082               		.stabd	46,0,0
 364:../../../src/kernel/source/nrk.c **** 
 365:../../../src/kernel/source/nrk.c **** 
 366:../../../src/kernel/source/nrk.c **** /*
 367:../../../src/kernel/source/nrk.c ****  * _nrk_timer_tick() 
 368:../../../src/kernel/source/nrk.c ****  *
 369:../../../src/kernel/source/nrk.c ****  * This function is called by the interrupt timer0.
 370:../../../src/kernel/source/nrk.c ****  * It calls the scheduler.
 371:../../../src/kernel/source/nrk.c ****  */
 372:../../../src/kernel/source/nrk.c **** void _nrk_timer_tick(void)
 373:../../../src/kernel/source/nrk.c **** {
 1084               	.LM125:
 1085               	.LFBB8:
 1086               	/* prologue: function */
 1087               	/* frame size = 0 */
 1088               	/* stack size = 0 */
 1089               	.L__stack_usage = 0
 374:../../../src/kernel/source/nrk.c **** 	// want to do something before the scheduler gets called? 
 375:../../../src/kernel/source/nrk.c **** 	// Go ahead and put it here...
 376:../../../src/kernel/source/nrk.c **** 
 377:../../../src/kernel/source/nrk.c **** 	_nrk_scheduler();
 1091               	.LM126:
 1092 04b8 0E94 0000 		call _nrk_scheduler
 1093               	/* epilogue start */
 378:../../../src/kernel/source/nrk.c **** 
 379:../../../src/kernel/source/nrk.c ****   	return;
 380:../../../src/kernel/source/nrk.c **** }
 1095               	.LM127:
 1096 04bc 0895      		ret
 1098               	.Lscope8:
 1100               		.stabd	78,0,0
 1102               	.global	nrk_version
 1104               	nrk_version:
 1105               		.stabd	46,0,0
 381:../../../src/kernel/source/nrk.c **** 
 382:../../../src/kernel/source/nrk.c **** 
 383:../../../src/kernel/source/nrk.c **** uint16_t nrk_version (void)
 384:../../../src/kernel/source/nrk.c **** {
 1107               	.LM128:
 1108               	.LFBB9:
 1109               	/* prologue: function */
 1110               	/* frame size = 0 */
 1111               	/* stack size = 0 */
 1112               	.L__stack_usage = 0
 385:../../../src/kernel/source/nrk.c ****     return (NRK_VERSION);
 386:../../../src/kernel/source/nrk.c **** }
 1114               	.LM129:
 1115 04be 85E6      		ldi r24,lo8(101)
 1116 04c0 90E0      		ldi r25,hi8(101)
 1117               	/* epilogue start */
 1118 04c2 0895      		ret
 1120               	.Lscope9:
 1122               		.stabd	78,0,0
 1123               		.comm _nrk_signal_list,4,1
 1124               		.comm nrk_system_ceiling,2,1
 1125               		.comm nrk_idle_task_stk,128,1
 1126               		.comm nrk_kernel_stk_ptr,2,1
 1127               		.comm nrk_task_TCB,195,1
 1128               		.comm nrk_wakeup_signal,1,1
 1129               		.comm _nrk_readyQ,30,1
 1130               		.comm _free_node,2,1
 1131               		.comm _head_node,2,1
 1132               		.comm nrk_cur_task_prio,1,1
 1133               		.comm nrk_cur_task_TCB,2,1
 1134               		.comm nrk_high_ready_prio,1,1
 1135               		.comm nrk_high_ready_TCB,2,1
 1136               		.comm _nrk_resource_cnt,1,1
 1137               		.comm nrk_system_time,8,1
 1138               		.comm nrk_sem_list,15,1
 1139               		.comm _nrk_cpu_state,1,1
 1140               		.comm next_next_wakeup,2,1
 1141               		.comm error_task,1,1
 1142               		.comm error_num,1,1
 1143               		.comm sw_wdts,57,1
 1144               		.comm cur_task_stats,150,1
 1145               		.comm _nrk_stats_sleep_time,8,1
 1146               		.comm nrk_task_init_cnt,1,1
 1172               	.Letext0:
 1173               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 nrk.c
     /tmp/cchDQEiK.s:2      *ABS*:0000003f __SREG__
     /tmp/cchDQEiK.s:3      *ABS*:0000003e __SP_H__
     /tmp/cchDQEiK.s:4      *ABS*:0000003d __SP_L__
     /tmp/cchDQEiK.s:5      *ABS*:00000034 __CCP__
     /tmp/cchDQEiK.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/cchDQEiK.s:7      *ABS*:00000001 __zero_reg__
     /tmp/cchDQEiK.s:141    .text:00000000 nrk_int_disable
     /tmp/cchDQEiK.s:169    .text:00000004 nrk_int_enable
     /tmp/cchDQEiK.s:197    .text:00000008 nrk_halt
     /tmp/cchDQEiK.s:218    .text:0000000e nrk_init
                            *COM*:00000002 nrk_system_ceiling
                            *COM*:00000001 nrk_wakeup_signal
                            *COM*:00000001 nrk_cur_task_prio
                            *COM*:00000002 nrk_cur_task_TCB
                            *COM*:00000002 nrk_high_ready_TCB
                            *COM*:00000001 nrk_high_ready_prio
                            *COM*:00000001 _nrk_resource_cnt
                            *COM*:0000000f nrk_sem_list
                            *COM*:000000c3 nrk_task_TCB
                            *COM*:0000001e _nrk_readyQ
                            *COM*:00000002 _head_node
                            *COM*:00000002 _free_node
                            *COM*:00000080 nrk_idle_task_stk
     /tmp/cchDQEiK.s:516    .text:000001a8 nrk_SRPAssignPreempLevel
     /tmp/cchDQEiK.s:668    .text:00000264 nrk_start
     /tmp/cchDQEiK.s:808    .text:00000312 nrk_TCB_init
                            *COM*:00000001 nrk_task_init_cnt
     /tmp/cchDQEiK.s:1081   .text:000004b8 _nrk_timer_tick
     /tmp/cchDQEiK.s:1104   .text:000004be nrk_version
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000008 nrk_system_time
                            *COM*:00000001 _nrk_cpu_state
                            *COM*:00000002 next_next_wakeup
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000039 sw_wdts
                            *COM*:00000096 cur_task_stats
                            *COM*:00000008 _nrk_stats_sleep_time

UNDEFINED SYMBOLS
nrk_signal_create
nrk_kernel_error_add
_nrk_startup_error
nrk_watchdog_check
nrk_watchdog_disable
nrk_watchdog_enable
nrk_stats_reset
nrk_idle_task
nrk_task_set_entry_function
nrk_task_set_stk
nrk_activate_task
nrk_get_high_ready_task_ID
nrk_target_start
nrk_stack_pointer_init
nrk_start_high_ready_task
_nrk_time_to_ticks
_nrk_scheduler
__do_clear_bss
