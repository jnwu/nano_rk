   1               		.file	"nrk_scheduler.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 146               	.global	_nrk_scheduler
 148               	_nrk_scheduler:
 149               		.stabd	46,0,0
   1:../../../src/kernel/source/nrk_scheduler.c **** /******************************************************************************
   2:../../../src/kernel/source/nrk_scheduler.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../../src/kernel/source/nrk_scheduler.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../../src/kernel/source/nrk_scheduler.c **** *  All rights reserved.
   5:../../../src/kernel/source/nrk_scheduler.c **** *
   6:../../../src/kernel/source/nrk_scheduler.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../../src/kernel/source/nrk_scheduler.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../../src/kernel/source/nrk_scheduler.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../../src/kernel/source/nrk_scheduler.c **** *
  10:../../../src/kernel/source/nrk_scheduler.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../../src/kernel/source/nrk_scheduler.c **** *  it under the terms of the GNU General Public License as published by
  12:../../../src/kernel/source/nrk_scheduler.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../../src/kernel/source/nrk_scheduler.c **** *
  14:../../../src/kernel/source/nrk_scheduler.c **** *  This program is distributed in the hope that it will be useful,
  15:../../../src/kernel/source/nrk_scheduler.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../../src/kernel/source/nrk_scheduler.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../../src/kernel/source/nrk_scheduler.c **** *  GNU General Public License for more details.
  18:../../../src/kernel/source/nrk_scheduler.c **** *
  19:../../../src/kernel/source/nrk_scheduler.c **** *  You should have received a copy of the GNU General Public License
  20:../../../src/kernel/source/nrk_scheduler.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../../src/kernel/source/nrk_scheduler.c **** *
  22:../../../src/kernel/source/nrk_scheduler.c **** *  Contributing Authors (specific to this file):
  23:../../../src/kernel/source/nrk_scheduler.c **** *  Anthony Rowe
  24:../../../src/kernel/source/nrk_scheduler.c **** *  Zane Starr
  25:../../../src/kernel/source/nrk_scheduler.c **** *  Anand Eswaren
  26:../../../src/kernel/source/nrk_scheduler.c **** *******************************************************************************/
  27:../../../src/kernel/source/nrk_scheduler.c **** 
  28:../../../src/kernel/source/nrk_scheduler.c **** #include <nrk.h>
  29:../../../src/kernel/source/nrk_scheduler.c **** #include <nrk_task.h>
  30:../../../src/kernel/source/nrk_scheduler.c **** #include <nrk_defs.h>
  31:../../../src/kernel/source/nrk_scheduler.c **** #include <nrk_error.h>
  32:../../../src/kernel/source/nrk_scheduler.c **** #include <nrk_events.h>
  33:../../../src/kernel/source/nrk_scheduler.c **** #include <nrk_scheduler.h>
  34:../../../src/kernel/source/nrk_scheduler.c **** #include <include.h>
  35:../../../src/kernel/source/nrk_scheduler.c **** #include <ulib.h>
  36:../../../src/kernel/source/nrk_scheduler.c **** #include <nrk_timer.h>
  37:../../../src/kernel/source/nrk_scheduler.c **** #include <nrk_time.h>
  38:../../../src/kernel/source/nrk_scheduler.c **** #include <nrk_cfg.h>
  39:../../../src/kernel/source/nrk_scheduler.c **** #include <nrk_cpu.h>
  40:../../../src/kernel/source/nrk_scheduler.c **** #include <nrk_watchdog.h>
  41:../../../src/kernel/source/nrk_scheduler.c **** #include <nrk_platform_time.h>
  42:../../../src/kernel/source/nrk_scheduler.c **** #include <nrk_stats.h>
  43:../../../src/kernel/source/nrk_scheduler.c **** #include <nrk_sw_wdt.h>
  44:../../../src/kernel/source/nrk_scheduler.c **** 
  45:../../../src/kernel/source/nrk_scheduler.c **** 
  46:../../../src/kernel/source/nrk_scheduler.c **** // This define was moved into nrk_platform_time.h since it needs to be different based on the clk s
  47:../../../src/kernel/source/nrk_scheduler.c **** // 750 measure to 100uS
  48:../../../src/kernel/source/nrk_scheduler.c **** // 800 * .125 = 100us
  49:../../../src/kernel/source/nrk_scheduler.c **** //#define CONTEXT_SWAP_TIME_BOUND    750
  50:../../../src/kernel/source/nrk_scheduler.c **** // For rfa1:
  51:../../../src/kernel/source/nrk_scheduler.c **** //#define CONTEXT_SWAP_TIME_BOUND    1500 
  52:../../../src/kernel/source/nrk_scheduler.c **** 
  53:../../../src/kernel/source/nrk_scheduler.c **** uint8_t t;
  54:../../../src/kernel/source/nrk_scheduler.c **** void inline _nrk_scheduler()
  55:../../../src/kernel/source/nrk_scheduler.c **** {
 151               	.LM0:
 152               	.LFBB1:
 153 0000 4F92      		push r4
 154 0002 5F92      		push r5
 155 0004 6F92      		push r6
 156 0006 7F92      		push r7
 157 0008 8F92      		push r8
 158 000a 9F92      		push r9
 159 000c AF92      		push r10
 160 000e BF92      		push r11
 161 0010 CF92      		push r12
 162 0012 DF92      		push r13
 163 0014 EF92      		push r14
 164 0016 FF92      		push r15
 165 0018 0F93      		push r16
 166 001a 1F93      		push r17
 167 001c DF93      		push r29
 168 001e CF93      		push r28
 169 0020 0F92      		push __tmp_reg__
 170 0022 CDB7      		in r28,__SP_L__
 171 0024 DEB7      		in r29,__SP_H__
 172               	/* prologue: function */
 173               	/* frame size = 1 */
 174               	/* stack size = 17 */
 175               	.L__stack_usage = 17
  56:../../../src/kernel/source/nrk_scheduler.c ****     int8_t task_ID;
  57:../../../src/kernel/source/nrk_scheduler.c ****     uint16_t next_wake;
  58:../../../src/kernel/source/nrk_scheduler.c ****     uint16_t start_time_stamp;
  59:../../../src/kernel/source/nrk_scheduler.c **** 
  60:../../../src/kernel/source/nrk_scheduler.c ****     _nrk_precision_os_timer_reset();
 177               	.LM1:
 178 0026 0E94 0000 		call _nrk_precision_os_timer_reset
  61:../../../src/kernel/source/nrk_scheduler.c ****     nrk_int_disable();   // this should be removed...  Not needed
 180               	.LM2:
 181 002a 0E94 0000 		call nrk_int_disable
  62:../../../src/kernel/source/nrk_scheduler.c **** 
  63:../../../src/kernel/source/nrk_scheduler.c **** 
  64:../../../src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
  65:../../../src/kernel/source/nrk_scheduler.c ****     _nrk_high_speed_timer_reset();
  66:../../../src/kernel/source/nrk_scheduler.c ****     start_time_stamp=_nrk_high_speed_timer_get();
  67:../../../src/kernel/source/nrk_scheduler.c **** #endif
  68:../../../src/kernel/source/nrk_scheduler.c ****     _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
 183               	.LM3:
 184 002e 8AEF      		ldi r24,lo8(-6)
 185 0030 0E94 0000 		call _nrk_set_next_wakeup
  69:../../../src/kernel/source/nrk_scheduler.c ****     // Set to huge number which will later get set to min
  70:../../../src/kernel/source/nrk_scheduler.c **** 
  71:../../../src/kernel/source/nrk_scheduler.c ****     next_wake=60000;
  72:../../../src/kernel/source/nrk_scheduler.c ****     // Safety zone starts here....
  73:../../../src/kernel/source/nrk_scheduler.c **** 
  74:../../../src/kernel/source/nrk_scheduler.c **** 
  75:../../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_WATCHDOG
  76:../../../src/kernel/source/nrk_scheduler.c ****     nrk_watchdog_reset();
 187               	.LM4:
 188 0034 0E94 0000 		call nrk_watchdog_reset
  77:../../../src/kernel/source/nrk_scheduler.c **** #endif
  78:../../../src/kernel/source/nrk_scheduler.c **** 
  79:../../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_SW_WDT
  80:../../../src/kernel/source/nrk_scheduler.c ****     _nrk_sw_wdt_check();
 190               	.LM5:
 191 0038 0E94 0000 		call _nrk_sw_wdt_check
  81:../../../src/kernel/source/nrk_scheduler.c **** #endif
  82:../../../src/kernel/source/nrk_scheduler.c **** 
  83:../../../src/kernel/source/nrk_scheduler.c **** 
  84:../../../src/kernel/source/nrk_scheduler.c **** 
  85:../../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
  86:../../../src/kernel/source/nrk_scheduler.c ****     //nrk_kprintf( PSTR("*"));
  87:../../../src/kernel/source/nrk_scheduler.c ****     //Check if OS tick was delayed...
  88:../../../src/kernel/source/nrk_scheduler.c ****     // if(_nrk_cpu_state!=CPU_SLEEP && _nrk_os_timer_get()!=0) {
  89:../../../src/kernel/source/nrk_scheduler.c ****     //		nrk_kprintf( PSTR("X" ));
  90:../../../src/kernel/source/nrk_scheduler.c ****     //printf( "%u ",_nrk_os_timer_get());
  91:../../../src/kernel/source/nrk_scheduler.c ****     //	}
  92:../../../src/kernel/source/nrk_scheduler.c ****     //printf( "%u\r\n",_nrk_prev_timer_val);
  93:../../../src/kernel/source/nrk_scheduler.c ****     if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
  94:../../../src/kernel/source/nrk_scheduler.c ****         nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
  95:../../../src/kernel/source/nrk_scheduler.c **** #endif
  96:../../../src/kernel/source/nrk_scheduler.c ****     //while(_nrk_time_trigger>0)
  97:../../../src/kernel/source/nrk_scheduler.c ****     //{
  98:../../../src/kernel/source/nrk_scheduler.c ****     nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
 193               	.LM6:
 194 003c 0091 0000 		lds r16,_nrk_prev_timer_val
 195 0040 602F      		mov r22,r16
 196 0042 70E0      		ldi r23,lo8(0)
 197 0044 80E0      		ldi r24,lo8(0)
 198 0046 90E0      		ldi r25,hi8(0)
 199 0048 23EB      		ldi r18,lo8(976563)
 200 004a 36EE      		ldi r19,hi8(976563)
 201 004c 4EE0      		ldi r20,hlo8(976563)
 202 004e 50E0      		ldi r21,hhi8(976563)
 203 0050 0E94 0000 		call __mulsi3
 204 0054 6B01      		movw r12,r22
 205 0056 7C01      		movw r14,r24
 206 0058 8091 0000 		lds r24,nrk_system_time+4
 207 005c 9091 0000 		lds r25,nrk_system_time+4+1
 208 0060 A091 0000 		lds r26,nrk_system_time+4+2
 209 0064 B091 0000 		lds r27,nrk_system_time+4+3
 210 0068 C80E      		add r12,r24
 211 006a D91E      		adc r13,r25
 212 006c EA1E      		adc r14,r26
 213 006e FB1E      		adc r15,r27
  99:../../../src/kernel/source/nrk_scheduler.c ****     nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
 215               	.LM7:
 216 0070 C701      		movw r24,r14
 217 0072 B601      		movw r22,r12
 218 0074 0E94 0000 		call __udivmodsi4
 219 0078 C61A      		sub r12,r22
 220 007a D70A      		sbc r13,r23
 221 007c E80A      		sbc r14,r24
 222 007e F90A      		sbc r15,r25
 223 0080 C092 0000 		sts nrk_system_time+4,r12
 224 0084 D092 0000 		sts nrk_system_time+4+1,r13
 225 0088 E092 0000 		sts nrk_system_time+4+2,r14
 226 008c F092 0000 		sts nrk_system_time+4+3,r15
 100:../../../src/kernel/source/nrk_scheduler.c **** 
 101:../../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 102:../../../src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->task_ID==NRK_IDLE_TASK_ID)
 228               	.LM8:
 229 0090 E091 0000 		lds r30,nrk_cur_task_TCB
 230 0094 F091 0000 		lds r31,nrk_cur_task_TCB+1
 231 0098 8085      		ldd r24,Z+8
 232 009a 8823      		tst r24
 233 009c 01F4      		brne .L2
 103:../../../src/kernel/source/nrk_scheduler.c ****     {
 104:../../../src/kernel/source/nrk_scheduler.c ****         if(_nrk_cpu_state==CPU_SLEEP) _nrk_stats_sleep(_nrk_prev_timer_val);
 235               	.LM9:
 236 009e 8091 0000 		lds r24,_nrk_cpu_state
 237 00a2 8230      		cpi r24,lo8(2)
 238 00a4 01F4      		brne .L3
 240               	.LM10:
 241 00a6 802F      		mov r24,r16
 242 00a8 0E94 0000 		call _nrk_stats_sleep
 243               	.L3:
 105:../../../src/kernel/source/nrk_scheduler.c ****         _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 245               	.LM11:
 246 00ac E091 0000 		lds r30,nrk_cur_task_TCB
 247 00b0 F091 0000 		lds r31,nrk_cur_task_TCB+1
 248 00b4 8085      		ldd r24,Z+8
 249 00b6 6091 0000 		lds r22,_nrk_prev_timer_val
 250 00ba 0E94 0000 		call _nrk_stats_task_preempted
 106:../../../src/kernel/source/nrk_scheduler.c ****         // Add 0 time since the preempted call before set the correct value
 107:../../../src/kernel/source/nrk_scheduler.c ****         _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, 0);
 252               	.LM12:
 253 00be E091 0000 		lds r30,nrk_cur_task_TCB
 254 00c2 F091 0000 		lds r31,nrk_cur_task_TCB+1
 255 00c6 8085      		ldd r24,Z+8
 256 00c8 60E0      		ldi r22,lo8(0)
 257               	.L40:
 258 00ca 0E94 0000 		call _nrk_stats_task_suspend
 259               	.L6:
 261               	.LM13:
 262 00ce 8091 0000 		lds r24,nrk_system_time
 263 00d2 9091 0000 		lds r25,nrk_system_time+1
 264 00d6 A091 0000 		lds r26,nrk_system_time+2
 265 00da B091 0000 		lds r27,nrk_system_time+3
 266 00de C090 0000 		lds r12,nrk_system_time+4
 267 00e2 D090 0000 		lds r13,nrk_system_time+4+1
 268 00e6 E090 0000 		lds r14,nrk_system_time+4+2
 269 00ea F090 0000 		lds r15,nrk_system_time+4+3
 108:../../../src/kernel/source/nrk_scheduler.c ****     }
 109:../../../src/kernel/source/nrk_scheduler.c ****     else
 110:../../../src/kernel/source/nrk_scheduler.c ****     {
 111:../../../src/kernel/source/nrk_scheduler.c ****         if(nrk_cur_task_TCB->suspend_flag==1)
 112:../../../src/kernel/source/nrk_scheduler.c ****             _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 113:../../../src/kernel/source/nrk_scheduler.c ****         else
 114:../../../src/kernel/source/nrk_scheduler.c ****             _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 115:../../../src/kernel/source/nrk_scheduler.c ****     }
 116:../../../src/kernel/source/nrk_scheduler.c **** #endif
 117:../../../src/kernel/source/nrk_scheduler.c **** 
 118:../../../src/kernel/source/nrk_scheduler.c ****     while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 119:../../../src/kernel/source/nrk_scheduler.c ****     {
 120:../../../src/kernel/source/nrk_scheduler.c ****         nrk_system_time.nano_secs-=NANOS_PER_SEC;
 121:../../../src/kernel/source/nrk_scheduler.c ****         nrk_system_time.secs++;
 122:../../../src/kernel/source/nrk_scheduler.c ****         nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
 271               	.LM14:
 272 00ee 63EB      		ldi r22,lo8(976563)
 273 00f0 862E      		mov r8,r22
 274 00f2 66EE      		ldi r22,hi8(976563)
 275 00f4 962E      		mov r9,r22
 276 00f6 6EE0      		ldi r22,hlo8(976563)
 277 00f8 A62E      		mov r10,r22
 278 00fa B12C      		mov r11,__zero_reg__
 279 00fc 00C0      		rjmp .L4
 280               	.L2:
 111:../../../src/kernel/source/nrk_scheduler.c ****         if(nrk_cur_task_TCB->suspend_flag==1)
 282               	.LM15:
 283 00fe 9581      		ldd r25,Z+5
 284 0100 9923      		tst r25
 285 0102 01F0      		breq .L5
 112:../../../src/kernel/source/nrk_scheduler.c ****             _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 287               	.LM16:
 288 0104 602F      		mov r22,r16
 289 0106 00C0      		rjmp .L40
 290               	.L5:
 114:../../../src/kernel/source/nrk_scheduler.c ****             _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 292               	.LM17:
 293 0108 602F      		mov r22,r16
 294 010a 0E94 0000 		call _nrk_stats_task_preempted
 295 010e 00C0      		rjmp .L6
 296               	.L7:
 120:../../../src/kernel/source/nrk_scheduler.c ****         nrk_system_time.nano_secs-=NANOS_PER_SEC;
 298               	.LM18:
 299 0110 80E0      		ldi r24,lo8(-1000000000)
 300 0112 96E3      		ldi r25,hi8(-1000000000)
 301 0114 A5E6      		ldi r26,hlo8(-1000000000)
 302 0116 B4EC      		ldi r27,hhi8(-1000000000)
 303 0118 C80E      		add r12,r24
 304 011a D91E      		adc r13,r25
 305 011c EA1E      		adc r14,r26
 306 011e FB1E      		adc r15,r27
 308               	.LM19:
 309 0120 C701      		movw r24,r14
 310 0122 B601      		movw r22,r12
 311 0124 A501      		movw r20,r10
 312 0126 9401      		movw r18,r8
 313 0128 0E94 0000 		call __udivmodsi4
 314 012c C61A      		sub r12,r22
 315 012e D70A      		sbc r13,r23
 316 0130 E80A      		sbc r14,r24
 317 0132 F90A      		sbc r15,r25
 318 0134 D301      		movw r26,r6
 319 0136 C201      		movw r24,r4
 320               	.L4:
 322               	.LM20:
 323 0138 2C01      		movw r4,r24
 324 013a 3D01      		movw r6,r26
 325 013c 0894      		sec
 326 013e 411C      		adc r4,__zero_reg__
 327 0140 511C      		adc r5,__zero_reg__
 328 0142 611C      		adc r6,__zero_reg__
 329 0144 711C      		adc r7,__zero_reg__
 118:../../../src/kernel/source/nrk_scheduler.c ****     while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 331               	.LM21:
 332 0146 E0E0      		ldi r30,lo8(1000000000)
 333 0148 CE16      		cp r12,r30
 334 014a EAEC      		ldi r30,hi8(1000000000)
 335 014c DE06      		cpc r13,r30
 336 014e EAE9      		ldi r30,hlo8(1000000000)
 337 0150 EE06      		cpc r14,r30
 338 0152 EBE3      		ldi r30,hhi8(1000000000)
 339 0154 FE06      		cpc r15,r30
 340 0156 00F4      		brsh .L7
 118:../../../src/kernel/source/nrk_scheduler.c ****     while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 342               	.LM22:
 343 0158 8093 0000 		sts nrk_system_time,r24
 344 015c 9093 0000 		sts nrk_system_time+1,r25
 345 0160 A093 0000 		sts nrk_system_time+2,r26
 346 0164 B093 0000 		sts nrk_system_time+3,r27
 347 0168 C092 0000 		sts nrk_system_time+4,r12
 348 016c D092 0000 		sts nrk_system_time+4+1,r13
 349 0170 E092 0000 		sts nrk_system_time+4+2,r14
 350 0174 F092 0000 		sts nrk_system_time+4+3,r15
 123:../../../src/kernel/source/nrk_scheduler.c ****     }
 124:../../../src/kernel/source/nrk_scheduler.c ****     //  _nrk_time_trigger--;
 125:../../../src/kernel/source/nrk_scheduler.c ****     //}
 126:../../../src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
 352               	.LM23:
 353 0178 E091 0000 		lds r30,nrk_cur_task_TCB
 354 017c F091 0000 		lds r31,nrk_cur_task_TCB+1
 355 0180 8581      		ldd r24,Z+5
 356 0182 8823      		tst r24
 357 0184 01F0      		breq .L8
 359               	.LM24:
 360 0186 8185      		ldd r24,Z+9
 361 0188 8430      		cpi r24,lo8(4)
 362 018a 01F0      		breq .L8
 127:../../../src/kernel/source/nrk_scheduler.c ****     {
 128:../../../src/kernel/source/nrk_scheduler.c ****         //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 129:../../../src/kernel/source/nrk_scheduler.c **** 
 130:../../../src/kernel/source/nrk_scheduler.c ****         if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
 364               	.LM25:
 365 018c 8781      		ldd r24,Z+7
 366 018e 8230      		cpi r24,lo8(2)
 367 0190 01F0      		breq .L41
 368               	.L9:
 131:../../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 132:../../../src/kernel/source/nrk_scheduler.c ****         else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
 370               	.LM26:
 371 0192 8823      		tst r24
 372 0194 01F0      		breq .L11
 374               	.LM27:
 375 0196 8681      		ldd r24,Z+6
 376 0198 8823      		tst r24
 377 019a 01F4      		brne .L12
 378               	.L41:
 133:../../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 380               	.LM28:
 381 019c 85E0      		ldi r24,lo8(5)
 382 019e 00C0      		rjmp .L42
 383               	.L12:
 134:../../../src/kernel/source/nrk_scheduler.c ****         else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
 135:../../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = SUSPENDED;
 385               	.LM29:
 386 01a0 83E0      		ldi r24,lo8(3)
 387               	.L42:
 388 01a2 8187      		std Z+9,r24
 389 01a4 00C0      		rjmp .L10
 390               	.L11:
 136:../../../src/kernel/source/nrk_scheduler.c ****         else
 137:../../../src/kernel/source/nrk_scheduler.c ****         {
 138:../../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = SUSPENDED;
 392               	.LM30:
 393 01a6 83E0      		ldi r24,lo8(3)
 394 01a8 8187      		std Z+9,r24
 139:../../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->event_suspend=0;
 396               	.LM31:
 397 01aa 1782      		std Z+7,__zero_reg__
 140:../../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->nw_flag=0;
 399               	.LM32:
 400 01ac 1682      		std Z+6,__zero_reg__
 401               	.L10:
 141:../../../src/kernel/source/nrk_scheduler.c ****         }
 142:../../../src/kernel/source/nrk_scheduler.c ****         nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
 403               	.LM33:
 404 01ae 8085      		ldd r24,Z+8
 405 01b0 0E94 0000 		call nrk_rem_from_readyQ
 406               	.L8:
 143:../../../src/kernel/source/nrk_scheduler.c ****     }
 144:../../../src/kernel/source/nrk_scheduler.c ****     // nrk_print_readyQ();
 145:../../../src/kernel/source/nrk_scheduler.c **** 
 146:../../../src/kernel/source/nrk_scheduler.c ****     // Update cpu used value for ended task
 147:../../../src/kernel/source/nrk_scheduler.c ****     // If the task has used its reserve, suspend task
 148:../../../src/kernel/source/nrk_scheduler.c ****     // Don't disable IdleTask which is 0
 149:../../../src/kernel/source/nrk_scheduler.c ****     // Don't decrease cpu_remaining if reserve is 0 and hence disabled
 150:../../../src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_t
 408               	.LM34:
 409 01b4 E091 0000 		lds r30,nrk_cur_task_TCB
 410 01b8 F091 0000 		lds r31,nrk_cur_task_TCB+1
 411 01bc 858D      		ldd r24,Z+29
 412 01be 968D      		ldd r25,Z+30
 413 01c0 0097      		sbiw r24,0
 414 01c2 01F0      		breq .L13
 416               	.LM35:
 417 01c4 8085      		ldd r24,Z+8
 418 01c6 8823      		tst r24
 419 01c8 01F0      		breq .L13
 420 01ca 9185      		ldd r25,Z+9
 421 01cc 9430      		cpi r25,lo8(4)
 422 01ce 01F0      		breq .L13
 151:../../../src/kernel/source/nrk_scheduler.c ****     {
 152:../../../src/kernel/source/nrk_scheduler.c ****         if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
 424               	.LM36:
 425 01d0 418D      		ldd r20,Z+25
 426 01d2 528D      		ldd r21,Z+26
 427 01d4 2091 0000 		lds r18,_nrk_prev_timer_val
 428 01d8 30E0      		ldi r19,lo8(0)
 429 01da 4217      		cp r20,r18
 430 01dc 5307      		cpc r21,r19
 431 01de 00F4      		brsh .L14
 153:../../../src/kernel/source/nrk_scheduler.c ****         {
 154:../../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 155:../../../src/kernel/source/nrk_scheduler.c ****             _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
 433               	.LM37:
 434 01e0 0E94 0000 		call _nrk_stats_add_violation
 156:../../../src/kernel/source/nrk_scheduler.c **** #endif
 157:../../../src/kernel/source/nrk_scheduler.c ****             nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
 436               	.LM38:
 437 01e4 E091 0000 		lds r30,nrk_cur_task_TCB
 438 01e8 F091 0000 		lds r31,nrk_cur_task_TCB+1
 439 01ec 82E0      		ldi r24,lo8(2)
 440 01ee 6085      		ldd r22,Z+8
 441 01f0 0E94 0000 		call nrk_kernel_error_add
 158:../../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->cpu_remaining=0;
 443               	.LM39:
 444 01f4 E091 0000 		lds r30,nrk_cur_task_TCB
 445 01f8 F091 0000 		lds r31,nrk_cur_task_TCB+1
 446 01fc 128E      		std Z+26,__zero_reg__
 447 01fe 118E      		std Z+25,__zero_reg__
 448 0200 00C0      		rjmp .L15
 449               	.L14:
 159:../../../src/kernel/source/nrk_scheduler.c ****         }
 160:../../../src/kernel/source/nrk_scheduler.c ****         else
 161:../../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
 451               	.LM40:
 452 0202 421B      		sub r20,r18
 453 0204 530B      		sbc r21,r19
 454 0206 528F      		std Z+26,r21
 455 0208 418F      		std Z+25,r20
 456               	.L15:
 162:../../../src/kernel/source/nrk_scheduler.c **** 
 163:../../../src/kernel/source/nrk_scheduler.c ****         task_ID= nrk_cur_task_TCB->task_ID;
 458               	.LM41:
 459 020a E091 0000 		lds r30,nrk_cur_task_TCB
 460 020e F091 0000 		lds r31,nrk_cur_task_TCB+1
 461 0212 0085      		ldd r16,Z+8
 164:../../../src/kernel/source/nrk_scheduler.c **** 
 165:../../../src/kernel/source/nrk_scheduler.c ****         if (nrk_cur_task_TCB->cpu_remaining ==0 )
 463               	.LM42:
 464 0214 218D      		ldd r18,Z+25
 465 0216 328D      		ldd r19,Z+26
 466 0218 2115      		cp r18,__zero_reg__
 467 021a 3105      		cpc r19,__zero_reg__
 468 021c 01F4      		brne .L13
 166:../../../src/kernel/source/nrk_scheduler.c ****         {
 167:../../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 168:../../../src/kernel/source/nrk_scheduler.c ****             _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
 470               	.LM43:
 471 021e 802F      		mov r24,r16
 472 0220 0E94 0000 		call _nrk_stats_add_violation
 169:../../../src/kernel/source/nrk_scheduler.c **** #endif
 170:../../../src/kernel/source/nrk_scheduler.c ****             nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
 474               	.LM44:
 475 0224 83E0      		ldi r24,lo8(3)
 476 0226 602F      		mov r22,r16
 477 0228 0E94 0000 		call nrk_kernel_error_add
 171:../../../src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = SUSPENDED;
 479               	.LM45:
 480 022c E091 0000 		lds r30,nrk_cur_task_TCB
 481 0230 F091 0000 		lds r31,nrk_cur_task_TCB+1
 482 0234 83E0      		ldi r24,lo8(3)
 483 0236 8187      		std Z+9,r24
 172:../../../src/kernel/source/nrk_scheduler.c ****             nrk_rem_from_readyQ(task_ID);
 485               	.LM46:
 486 0238 802F      		mov r24,r16
 487 023a 0E94 0000 		call nrk_rem_from_readyQ
 488               	.L13:
 490               	.LM47:
 491 023e 50E0      		ldi r21,lo8(nrk_task_TCB+5)
 492 0240 652E      		mov r6,r21
 493 0242 50E0      		ldi r21,hi8(nrk_task_TCB+5)
 494 0244 752E      		mov r7,r21
 122:../../../src/kernel/source/nrk_scheduler.c ****         nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
 496               	.LM48:
 497 0246 00E6      		ldi r16,lo8(-5536)
 498 0248 1AEE      		ldi r17,hi8(-5536)
 499 024a 20E0      		ldi r18,lo8(0)
 173:../../../src/kernel/source/nrk_scheduler.c ****         }
 174:../../../src/kernel/source/nrk_scheduler.c ****     }
 175:../../../src/kernel/source/nrk_scheduler.c **** 
 176:../../../src/kernel/source/nrk_scheduler.c ****     // Check I/O nrk_queues to add tasks with remaining cpu back...
 177:../../../src/kernel/source/nrk_scheduler.c **** 
 178:../../../src/kernel/source/nrk_scheduler.c ****     // Add eligable tasks back to the ready Queue
 179:../../../src/kernel/source/nrk_scheduler.c ****     // At the same time find the next earliest wakeup
 180:../../../src/kernel/source/nrk_scheduler.c ****     for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
 181:../../../src/kernel/source/nrk_scheduler.c ****     {
 182:../../../src/kernel/source/nrk_scheduler.c ****         if(nrk_task_TCB[task_ID].task_ID==-1) continue;
 183:../../../src/kernel/source/nrk_scheduler.c ****         nrk_task_TCB[task_ID].suspend_flag=0;
 184:../../../src/kernel/source/nrk_scheduler.c ****         if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FI
 185:../../../src/kernel/source/nrk_scheduler.c ****         {
 186:../../../src/kernel/source/nrk_scheduler.c ****             if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
 187:../../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
 188:../../../src/kernel/source/nrk_scheduler.c ****             else
 189:../../../src/kernel/source/nrk_scheduler.c ****             {
 190:../../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup=0;
 191:../../../src/kernel/source/nrk_scheduler.c ****             }
 192:../../../src/kernel/source/nrk_scheduler.c ****             // Do next period book keeping.
 193:../../../src/kernel/source/nrk_scheduler.c ****             // next_period needs to be set such that the period is kept consistent even if other
 194:../../../src/kernel/source/nrk_scheduler.c ****             // wait until functions are called.
 195:../../../src/kernel/source/nrk_scheduler.c ****             if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
 196:../../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
 197:../../../src/kernel/source/nrk_scheduler.c ****             else
 198:../../../src/kernel/source/nrk_scheduler.c ****             {
 199:../../../src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
 200:../../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer
 201:../../../src/kernel/source/nrk_scheduler.c ****                 else
 202:../../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].
 203:../../../src/kernel/source/nrk_scheduler.c ****             }
 204:../../../src/kernel/source/nrk_scheduler.c ****             if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB
 205:../../../src/kernel/source/nrk_scheduler.c **** 
 206:../../../src/kernel/source/nrk_scheduler.c ****         }
 207:../../../src/kernel/source/nrk_scheduler.c **** 
 208:../../../src/kernel/source/nrk_scheduler.c **** 
 209:../../../src/kernel/source/nrk_scheduler.c ****         // Look for Next Task that Might Wakeup to interrupt current task
 210:../../../src/kernel/source/nrk_scheduler.c ****         if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
 211:../../../src/kernel/source/nrk_scheduler.c ****         {
 212:../../../src/kernel/source/nrk_scheduler.c ****             // printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
 213:../../../src/kernel/source/nrk_scheduler.c ****             // If a task needs to become READY, make it ready
 214:../../../src/kernel/source/nrk_scheduler.c ****             if (nrk_task_TCB[task_ID].next_wakeup == 0)
 215:../../../src/kernel/source/nrk_scheduler.c ****             {
 216:../../../src/kernel/source/nrk_scheduler.c ****                 // printf( "Adding back %d\n",task_ID );
 217:../../../src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_t
 218:../../../src/kernel/source/nrk_scheduler.c ****                 //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_ma
 219:../../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].event_suspend=0;
 220:../../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].nw_flag=0;
 221:../../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].suspend_flag=0;
 222:../../../src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].num_periods==1)
 223:../../../src/kernel/source/nrk_scheduler.c ****                 {
 224:../../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 225:../../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].task_state = READY;
 226:../../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 227:../../../src/kernel/source/nrk_scheduler.c ****                     // If there is no period set, don't wakeup periodically
 228:../../../src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 229:../../../src/kernel/source/nrk_scheduler.c ****                     nrk_add_to_readyQ(task_ID);
 230:../../../src/kernel/source/nrk_scheduler.c ****                 }
 231:../../../src/kernel/source/nrk_scheduler.c ****                 else
 232:../../../src/kernel/source/nrk_scheduler.c ****                 {
 233:../../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 234:../../../src/kernel/source/nrk_scheduler.c ****                     //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 235:../../../src/kernel/source/nrk_scheduler.c ****                     //nrk_task_TCB[task_ID].num_periods--;
 236:../../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 237:../../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 238:../../../src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 239:../../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].num_periods=1;
 501               	.LM49:
 502 024c 41E0      		ldi r20,lo8(1)
 503 024e 442E      		mov r4,r20
 504 0250 512C      		mov r5,__zero_reg__
 238:../../../src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 506               	.LM50:
 507 0252 3AEF      		ldi r19,lo8(250)
 508 0254 C32E      		mov r12,r19
 509 0256 D12C      		mov r13,__zero_reg__
 225:../../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].task_state = READY;
 511               	.LM51:
 512 0258 92E0      		ldi r25,lo8(2)
 513 025a F92E      		mov r15,r25
 217:../../../src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_t
 515               	.LM52:
 516 025c 81E0      		ldi r24,lo8(1)
 517 025e 882E      		mov r8,r24
 518 0260 912C      		mov r9,__zero_reg__
 519 0262 A12C      		mov r10,__zero_reg__
 520 0264 B12C      		mov r11,__zero_reg__
 521               	.L28:
 182:../../../src/kernel/source/nrk_scheduler.c ****         if(nrk_task_TCB[task_ID].task_ID==-1) continue;
 523               	.LM53:
 524 0266 D301      		movw r26,r6
 525 0268 1396      		adiw r26,3
 526 026a 8C91      		ld r24,X
 527 026c 1397      		sbiw r26,3
 528 026e 8F3F      		cpi r24,lo8(-1)
 529 0270 01F4      		brne .+2
 530 0272 00C0      		rjmp .L16
 183:../../../src/kernel/source/nrk_scheduler.c ****         nrk_task_TCB[task_ID].suspend_flag=0;
 532               	.LM54:
 533 0274 1C92      		st X,__zero_reg__
 184:../../../src/kernel/source/nrk_scheduler.c ****         if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FI
 535               	.LM55:
 536 0276 8823      		tst r24
 537 0278 01F4      		brne .+2
 538 027a 00C0      		rjmp .L17
 184:../../../src/kernel/source/nrk_scheduler.c ****         if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FI
 540               	.LM56:
 541 027c 1496      		adiw r26,4
 542 027e 8C91      		ld r24,X
 543 0280 1497      		sbiw r26,4
 544 0282 8430      		cpi r24,lo8(4)
 545 0284 01F0      		breq .L17
 186:../../../src/kernel/source/nrk_scheduler.c ****             if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
 547               	.LM57:
 548 0286 5096      		adiw r26,16
 549 0288 4D91      		ld r20,X+
 550 028a 5C91      		ld r21,X
 551 028c 5197      		sbiw r26,16+1
 552 028e 8091 0000 		lds r24,_nrk_prev_timer_val
 553 0292 90E0      		ldi r25,lo8(0)
 554 0294 4817      		cp r20,r24
 555 0296 5907      		cpc r21,r25
 556 0298 00F0      		brlo .L18
 187:../../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
 558               	.LM58:
 559 029a 481B      		sub r20,r24
 560 029c 590B      		sbc r21,r25
 561 029e 5196      		adiw r26,16+1
 562 02a0 5C93      		st X,r21
 563 02a2 4E93      		st -X,r20
 564 02a4 5097      		sbiw r26,16
 565 02a6 00C0      		rjmp .L19
 566               	.L18:
 190:../../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup=0;
 568               	.LM59:
 569 02a8 F301      		movw r30,r6
 570 02aa 118A      		std Z+17,__zero_reg__
 571 02ac 108A      		std Z+16,__zero_reg__
 572               	.L19:
 195:../../../src/kernel/source/nrk_scheduler.c ****             if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
 574               	.LM60:
 575 02ae D301      		movw r26,r6
 576 02b0 5296      		adiw r26,18
 577 02b2 4D91      		ld r20,X+
 578 02b4 5C91      		ld r21,X
 579 02b6 5397      		sbiw r26,18+1
 580 02b8 4817      		cp r20,r24
 581 02ba 5907      		cpc r21,r25
 582 02bc 00F0      		brlo .L20
 196:../../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
 584               	.LM61:
 585 02be 481B      		sub r20,r24
 586 02c0 590B      		sbc r21,r25
 587 02c2 5396      		adiw r26,18+1
 588 02c4 5C93      		st X,r21
 589 02c6 4E93      		st -X,r20
 590 02c8 5297      		sbiw r26,18
 591 02ca 00C0      		rjmp .L21
 592               	.L20:
 199:../../../src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
 594               	.LM62:
 595 02cc F301      		movw r30,r6
 596 02ce 6689      		ldd r22,Z+22
 597 02d0 7789      		ldd r23,Z+23
 598 02d2 8617      		cp r24,r22
 599 02d4 9707      		cpc r25,r23
 600 02d6 00F4      		brsh .L22
 200:../../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer
 602               	.LM63:
 603 02d8 681B      		sub r22,r24
 604 02da 790B      		sbc r23,r25
 605 02dc 738B      		std Z+19,r23
 606 02de 628B      		std Z+18,r22
 607 02e0 00C0      		rjmp .L21
 608               	.L22:
 202:../../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].
 610               	.LM64:
 611 02e2 0E94 0000 		call __udivmodhi4
 612 02e6 D301      		movw r26,r6
 613 02e8 5396      		adiw r26,18+1
 614 02ea 9C93      		st X,r25
 615 02ec 8E93      		st -X,r24
 616 02ee 5297      		sbiw r26,18
 617               	.L21:
 204:../../../src/kernel/source/nrk_scheduler.c ****             if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB
 619               	.LM65:
 620 02f0 F301      		movw r30,r6
 621 02f2 8289      		ldd r24,Z+18
 622 02f4 9389      		ldd r25,Z+19
 623 02f6 0097      		sbiw r24,0
 624 02f8 01F4      		brne .L17
 204:../../../src/kernel/source/nrk_scheduler.c ****             if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB
 626               	.LM66:
 627 02fa 8689      		ldd r24,Z+22
 628 02fc 9789      		ldd r25,Z+23
 629 02fe 938B      		std Z+19,r25
 630 0300 828B      		std Z+18,r24
 631               	.L17:
 210:../../../src/kernel/source/nrk_scheduler.c ****         if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
 633               	.LM67:
 634 0302 D301      		movw r26,r6
 635 0304 1496      		adiw r26,4
 636 0306 8C91      		ld r24,X
 637 0308 1497      		sbiw r26,4
 638 030a 8330      		cpi r24,lo8(3)
 639 030c 01F0      		breq .+2
 640 030e 00C0      		rjmp .L16
 214:../../../src/kernel/source/nrk_scheduler.c ****             if (nrk_task_TCB[task_ID].next_wakeup == 0)
 642               	.LM68:
 643 0310 5096      		adiw r26,16
 644 0312 8D91      		ld r24,X+
 645 0314 9C91      		ld r25,X
 646 0316 5197      		sbiw r26,16+1
 647 0318 0097      		sbiw r24,0
 648 031a 01F0      		breq .+2
 649 031c 00C0      		rjmp .L23
 217:../../../src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_t
 651               	.LM69:
 652 031e 1296      		adiw r26,2
 653 0320 8C91      		ld r24,X
 654 0322 1297      		sbiw r26,2
 655 0324 8823      		tst r24
 656 0326 01F0      		breq .L24
 217:../../../src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_t
 658               	.LM70:
 659 0328 1196      		adiw r26,1
 660 032a 8C91      		ld r24,X
 661 032c 1197      		sbiw r26,1
 662 032e 8823      		tst r24
 663 0330 01F0      		breq .L24
 664 0332 D501      		movw r26,r10
 665 0334 C401      		movw r24,r8
 666 0336 0090 0000 		lds r0,nrk_wakeup_signal
 667 033a 00C0      		rjmp 2f
 668 033c 880F      	1:	lsl r24
 669 033e 991F      		rol r25
 670 0340 AA1F      		rol r26
 671 0342 BB1F      		rol r27
 672 0344 0A94      	2:	dec r0
 673 0346 02F4      		brpl 1b
 674 0348 F301      		movw r30,r6
 675 034a 8487      		std Z+12,r24
 676 034c 9587      		std Z+13,r25
 677 034e A687      		std Z+14,r26
 678 0350 B787      		std Z+15,r27
 679               	.L24:
 219:../../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].event_suspend=0;
 681               	.LM71:
 682 0352 D301      		movw r26,r6
 683 0354 1296      		adiw r26,2
 684 0356 1C92      		st X,__zero_reg__
 685 0358 1297      		sbiw r26,2
 220:../../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].nw_flag=0;
 687               	.LM72:
 688 035a 1196      		adiw r26,1
 689 035c 1C92      		st X,__zero_reg__
 690 035e 1197      		sbiw r26,1
 221:../../../src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].suspend_flag=0;
 692               	.LM73:
 693 0360 1C92      		st X,__zero_reg__
 222:../../../src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].num_periods==1)
 695               	.LM74:
 696 0362 5A96      		adiw r26,26
 697 0364 4D91      		ld r20,X+
 698 0366 5C91      		ld r21,X
 699 0368 5B97      		sbiw r26,26+1
 700 036a 5696      		adiw r26,22
 701 036c 8D91      		ld r24,X+
 702 036e 9C91      		ld r25,X
 703 0370 5797      		sbiw r26,22+1
 704 0372 5896      		adiw r26,24
 705 0374 6D91      		ld r22,X+
 706 0376 7C91      		ld r23,X
 707 0378 5997      		sbiw r26,24+1
 708 037a 4130      		cpi r20,1
 709 037c 5105      		cpc r21,__zero_reg__
 710 037e 01F4      		brne .L25
 224:../../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 712               	.LM75:
 713 0380 5596      		adiw r26,20+1
 714 0382 7C93      		st X,r23
 715 0384 6E93      		st -X,r22
 716 0386 5497      		sbiw r26,20
 225:../../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].task_state = READY;
 718               	.LM76:
 719 0388 1496      		adiw r26,4
 720 038a FC92      		st X,r15
 721 038c 1497      		sbiw r26,4
 226:../../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 723               	.LM77:
 724 038e 5296      		adiw r26,18
 725 0390 4D91      		ld r20,X+
 726 0392 5C91      		ld r21,X
 727 0394 5397      		sbiw r26,18+1
 728 0396 5196      		adiw r26,16+1
 729 0398 5C93      		st X,r21
 730 039a 4E93      		st -X,r20
 731 039c 5097      		sbiw r26,16
 228:../../../src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 733               	.LM78:
 734 039e 0097      		sbiw r24,0
 735 03a0 01F4      		brne .L26
 228:../../../src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 737               	.LM79:
 738 03a2 5196      		adiw r26,16+1
 739 03a4 DC92      		st X,r13
 740 03a6 CE92      		st -X,r12
 741 03a8 5097      		sbiw r26,16
 742               	.L26:
 229:../../../src/kernel/source/nrk_scheduler.c ****                     nrk_add_to_readyQ(task_ID);
 744               	.LM80:
 745 03aa 822F      		mov r24,r18
 746 03ac 2983      		std Y+1,r18
 747 03ae 0E94 0000 		call nrk_add_to_readyQ
 748 03b2 2981      		ldd r18,Y+1
 749 03b4 00C0      		rjmp .L23
 750               	.L25:
 233:../../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 752               	.LM81:
 753 03b6 F301      		movw r30,r6
 754 03b8 758B      		std Z+21,r23
 755 03ba 648B      		std Z+20,r22
 236:../../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 757               	.LM82:
 758 03bc BA01      		movw r22,r20
 759 03be 6150      		subi r22,lo8(-(-1))
 760 03c0 7040      		sbci r23,hi8(-(-1))
 761 03c2 689F      		mul r22,r24
 762 03c4 A001      		movw r20,r0
 763 03c6 699F      		mul r22,r25
 764 03c8 500D      		add r21,r0
 765 03ca 789F      		mul r23,r24
 766 03cc 500D      		add r21,r0
 767 03ce 1124      		clr r1
 768 03d0 518B      		std Z+17,r21
 769 03d2 408B      		std Z+16,r20
 237:../../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 771               	.LM83:
 772 03d4 538B      		std Z+19,r21
 773 03d6 428B      		std Z+18,r20
 238:../../../src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 775               	.LM84:
 776 03d8 0097      		sbiw r24,0
 777 03da 01F4      		brne .L27
 238:../../../src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 779               	.LM85:
 780 03dc D18A      		std Z+17,r13
 781 03de C08A      		std Z+16,r12
 782               	.L27:
 784               	.LM86:
 785 03e0 D301      		movw r26,r6
 786 03e2 5B96      		adiw r26,26+1
 787 03e4 5C92      		st X,r5
 788 03e6 4E92      		st -X,r4
 789 03e8 5A97      		sbiw r26,26
 790               	.L23:
 240:../../../src/kernel/source/nrk_scheduler.c ****                     //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
 241:../../../src/kernel/source/nrk_scheduler.c ****                     //			nrk_task_TCB[task_ID].num_periods=1;
 242:../../../src/kernel/source/nrk_scheduler.c ****                 }
 243:../../../src/kernel/source/nrk_scheduler.c ****             }
 244:../../../src/kernel/source/nrk_scheduler.c **** 
 245:../../../src/kernel/source/nrk_scheduler.c ****             if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
 792               	.LM87:
 793 03ea F301      		movw r30,r6
 794 03ec 8089      		ldd r24,Z+16
 795 03ee 9189      		ldd r25,Z+17
 796 03f0 0097      		sbiw r24,0
 797 03f2 01F0      		breq .L16
 799               	.LM88:
 800 03f4 8017      		cp r24,r16
 801 03f6 9107      		cpc r25,r17
 802 03f8 00F4      		brsh .L16
 804               	.LM89:
 805 03fa 8C01      		movw r16,r24
 806               	.L16:
 180:../../../src/kernel/source/nrk_scheduler.c ****     for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
 808               	.LM90:
 809 03fc 2F5F      		subi r18,lo8(-(1))
 810 03fe 87E2      		ldi r24,lo8(39)
 811 0400 90E0      		ldi r25,hi8(39)
 812 0402 680E      		add r6,r24
 813 0404 791E      		adc r7,r25
 814 0406 2530      		cpi r18,lo8(5)
 815 0408 01F0      		breq .+2
 816 040a 00C0      		rjmp .L28
 246:../../../src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup<next_wake )
 247:../../../src/kernel/source/nrk_scheduler.c ****             {
 248:../../../src/kernel/source/nrk_scheduler.c ****                 // Find closest next_wake task
 249:../../../src/kernel/source/nrk_scheduler.c ****                 next_wake=nrk_task_TCB[task_ID].next_wakeup;
 250:../../../src/kernel/source/nrk_scheduler.c ****             }
 251:../../../src/kernel/source/nrk_scheduler.c **** 
 252:../../../src/kernel/source/nrk_scheduler.c ****         }
 253:../../../src/kernel/source/nrk_scheduler.c ****     }
 254:../../../src/kernel/source/nrk_scheduler.c **** 
 255:../../../src/kernel/source/nrk_scheduler.c **** 
 256:../../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 257:../../../src/kernel/source/nrk_scheduler.c ****     _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
 818               	.LM91:
 819 040c E091 0000 		lds r30,nrk_cur_task_TCB
 820 0410 F091 0000 		lds r31,nrk_cur_task_TCB+1
 821 0414 8085      		ldd r24,Z+8
 822 0416 0E94 0000 		call _nrk_stats_task_start
 258:../../../src/kernel/source/nrk_scheduler.c **** #endif
 259:../../../src/kernel/source/nrk_scheduler.c ****     task_ID = nrk_get_high_ready_task_ID();
 824               	.LM92:
 825 041a 0E94 0000 		call nrk_get_high_ready_task_ID
 826 041e F82E      		mov r15,r24
 260:../../../src/kernel/source/nrk_scheduler.c ****     nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
 828               	.LM93:
 829 0420 482F      		mov r20,r24
 830 0422 5527      		clr r21
 831 0424 47FD      		sbrc r20,7
 832 0426 5095      		com r21
 833 0428 27E2      		ldi r18,lo8(39)
 834 042a 30E0      		ldi r19,hi8(39)
 835 042c 429F      		mul r20,r18
 836 042e F001      		movw r30,r0
 837 0430 439F      		mul r20,r19
 838 0432 F00D      		add r31,r0
 839 0434 529F      		mul r21,r18
 840 0436 F00D      		add r31,r0
 841 0438 1124      		clr r1
 842 043a E050      		subi r30,lo8(-(nrk_task_TCB))
 843 043c F040      		sbci r31,hi8(-(nrk_task_TCB))
 844 043e 8285      		ldd r24,Z+10
 845 0440 8093 0000 		sts nrk_high_ready_prio,r24
 261:../../../src/kernel/source/nrk_scheduler.c ****     nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
 847               	.LM94:
 848 0444 F093 0000 		sts nrk_high_ready_TCB+1,r31
 849 0448 E093 0000 		sts nrk_high_ready_TCB,r30
 262:../../../src/kernel/source/nrk_scheduler.c **** 
 263:../../../src/kernel/source/nrk_scheduler.c ****     // next_wake should hold next time when a suspended task might get run
 264:../../../src/kernel/source/nrk_scheduler.c ****     // task_ID holds the highest priority READY task ID
 265:../../../src/kernel/source/nrk_scheduler.c ****     // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time
 266:../../../src/kernel/source/nrk_scheduler.c **** 
 267:../../../src/kernel/source/nrk_scheduler.c ****     // Now we pick the next wakeup (either the end of the current task, or the possible resume
 268:../../../src/kernel/source/nrk_scheduler.c ****     // of a suspended task)
 269:../../../src/kernel/source/nrk_scheduler.c ****     if(task_ID!=NRK_IDLE_TASK_ID)
 851               	.LM95:
 852 044c FF20      		tst r15
 853 044e 01F0      		breq .L29
 270:../../../src/kernel/source/nrk_scheduler.c ****     {
 271:../../../src/kernel/source/nrk_scheduler.c ****         // You are a non-Idle Task
 272:../../../src/kernel/source/nrk_scheduler.c ****         if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WA
 855               	.LM96:
 856 0450 258D      		ldd r18,Z+29
 857 0452 368D      		ldd r19,Z+30
 858 0454 2115      		cp r18,__zero_reg__
 859 0456 3105      		cpc r19,__zero_reg__
 860 0458 01F0      		breq .L30
 862               	.LM97:
 863 045a 218D      		ldd r18,Z+25
 864 045c 328D      		ldd r19,Z+26
 865 045e 2A3F      		cpi r18,250
 866 0460 3105      		cpc r19,__zero_reg__
 867 0462 00F4      		brsh .L30
 869               	.LM98:
 870 0464 2017      		cp r18,r16
 871 0466 3107      		cpc r19,r17
 872 0468 00F4      		brsh .L32
 873 046a 8901      		movw r16,r18
 874 046c 00C0      		rjmp .L32
 875               	.L30:
 876 046e 0B3F      		cpi r16,251
 877 0470 1105      		cpc r17,__zero_reg__
 878 0472 00F0      		brlo .L32
 879 0474 00C0      		rjmp .L43
 880               	.L29:
 273:../../../src/kernel/source/nrk_scheduler.c ****         {
 274:../../../src/kernel/source/nrk_scheduler.c ****             if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
 275:../../../src/kernel/source/nrk_scheduler.c ****                 next_wake=nrk_task_TCB[task_ID].cpu_remaining;
 276:../../../src/kernel/source/nrk_scheduler.c ****         }
 277:../../../src/kernel/source/nrk_scheduler.c ****         else
 278:../../../src/kernel/source/nrk_scheduler.c ****         {
 279:../../../src/kernel/source/nrk_scheduler.c ****             if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
 280:../../../src/kernel/source/nrk_scheduler.c ****         }
 281:../../../src/kernel/source/nrk_scheduler.c ****     }
 282:../../../src/kernel/source/nrk_scheduler.c ****     else
 283:../../../src/kernel/source/nrk_scheduler.c ****     {
 284:../../../src/kernel/source/nrk_scheduler.c ****         // This is the idle task
 285:../../../src/kernel/source/nrk_scheduler.c ****         // Make sure you wake up from the idle task a little earlier
 286:../../../src/kernel/source/nrk_scheduler.c ****         // if you would go into deep sleep...
 287:../../../src/kernel/source/nrk_scheduler.c ****         // After waking from deep sleep, the next context swap must be at least
 288:../../../src/kernel/source/nrk_scheduler.c ****         // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
 289:../../../src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_POWER_DOWN
 290:../../../src/kernel/source/nrk_scheduler.c ****         if(next_wake>NRK_SLEEP_WAKEUP_TIME)
 882               	.LM99:
 883 0476 0531      		cpi r16,21
 884 0478 1105      		cpc r17,__zero_reg__
 885 047a 00F0      		brlo .L32
 291:../../../src/kernel/source/nrk_scheduler.c ****         {
 292:../../../src/kernel/source/nrk_scheduler.c ****             if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
 887               	.LM100:
 888 047c 9801      		movw r18,r16
 889 047e 2451      		subi r18,lo8(-(-20))
 890 0480 3040      		sbci r19,hi8(-(-20))
 891 0482 2A3F      		cpi r18,250
 892 0484 3105      		cpc r19,__zero_reg__
 893 0486 00F4      		brsh .L34
 894 0488 8901      		movw r16,r18
 895 048a 2331      		cpi r18,19
 896 048c 3105      		cpc r19,__zero_reg__
 897 048e 00F4      		brsh .L32
 898 0490 03E1      		ldi r16,lo8(19)
 899 0492 10E0      		ldi r17,hi8(19)
 900 0494 00C0      		rjmp .L32
 901               	.L34:
 293:../../../src/kernel/source/nrk_scheduler.c ****             {
 294:../../../src/kernel/source/nrk_scheduler.c ****                 if(next_wake-NRK_SLEEP_WAKEUP_TIME<NRK_SLEEP_WAKEUP_TIME)
 295:../../../src/kernel/source/nrk_scheduler.c ****                 {
 296:../../../src/kernel/source/nrk_scheduler.c ****                     next_wake=NRK_SLEEP_WAKEUP_TIME-1;
 297:../../../src/kernel/source/nrk_scheduler.c ****                 }
 298:../../../src/kernel/source/nrk_scheduler.c ****                 else
 299:../../../src/kernel/source/nrk_scheduler.c ****                 {
 300:../../../src/kernel/source/nrk_scheduler.c ****                     next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
 301:../../../src/kernel/source/nrk_scheduler.c ****                 }
 302:../../../src/kernel/source/nrk_scheduler.c ****             }
 303:../../../src/kernel/source/nrk_scheduler.c ****             else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
 903               	.LM101:
 904 0496 91E0      		ldi r25,hi8(270)
 905 0498 0E30      		cpi r16,lo8(270)
 906 049a 1907      		cpc r17,r25
 907 049c 01F0      		breq .L38
 908               	.L43:
 304:../../../src/kernel/source/nrk_scheduler.c ****             {
 305:../../../src/kernel/source/nrk_scheduler.c ****                 next_wake=MAX_SCHED_WAKEUP_TIME;
 910               	.LM102:
 911 049e 0AEF      		ldi r16,lo8(250)
 912 04a0 10E0      		ldi r17,hi8(250)
 913 04a2 00C0      		rjmp .L32
 914               	.L38:
 306:../../../src/kernel/source/nrk_scheduler.c ****             }
 307:../../../src/kernel/source/nrk_scheduler.c ****             else
 308:../../../src/kernel/source/nrk_scheduler.c ****             {
 309:../../../src/kernel/source/nrk_scheduler.c ****                 next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
 916               	.LM103:
 917 04a4 06EE      		ldi r16,lo8(230)
 918 04a6 10E0      		ldi r17,hi8(230)
 919               	.L32:
 310:../../../src/kernel/source/nrk_scheduler.c ****             }
 311:../../../src/kernel/source/nrk_scheduler.c ****         }
 312:../../../src/kernel/source/nrk_scheduler.c **** #endif
 313:../../../src/kernel/source/nrk_scheduler.c ****     }
 314:../../../src/kernel/source/nrk_scheduler.c **** 
 315:../../../src/kernel/source/nrk_scheduler.c ****     /*
 316:../../../src/kernel/source/nrk_scheduler.c ****     // Some code to catch the case when the scheduler wakes up
 317:../../../src/kernel/source/nrk_scheduler.c ****     // from deep sleep and has to execute again before NRK_SLEEP_WAKEUP_TIME-1
 318:../../../src/kernel/source/nrk_scheduler.c ****     if(_nrk_cpu_state==2 && next_wake<NRK_SLEEP_WAKEUP_TIME-1)
 319:../../../src/kernel/source/nrk_scheduler.c ****     {
 320:../../../src/kernel/source/nrk_scheduler.c ****     nrk_int_disable();
 321:../../../src/kernel/source/nrk_scheduler.c ****     while(1)
 322:../../../src/kernel/source/nrk_scheduler.c ****     	{
 323:../../../src/kernel/source/nrk_scheduler.c ****     	nrk_spin_wait_us(60000);
 324:../../../src/kernel/source/nrk_scheduler.c ****     	nrk_led_toggle(RED_LED);
 325:../../../src/kernel/source/nrk_scheduler.c ****     	nrk_spin_wait_us(60000);
 326:../../../src/kernel/source/nrk_scheduler.c ****     	nrk_led_toggle(GREEN_LED);
 327:../../../src/kernel/source/nrk_scheduler.c ****     	printf( "crash: %d %d %d\r\n",task_ID,next_wake,_nrk_cpu_state);
 328:../../../src/kernel/source/nrk_scheduler.c ****     	}
 329:../../../src/kernel/source/nrk_scheduler.c ****     }*/
 330:../../../src/kernel/source/nrk_scheduler.c **** 
 331:../../../src/kernel/source/nrk_scheduler.c **** 
 332:../../../src/kernel/source/nrk_scheduler.c **** //  If we disable power down, we still need to wakeup before the overflow
 333:../../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_NO_POWER_DOWN
 334:../../../src/kernel/source/nrk_scheduler.c ****     if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
 335:../../../src/kernel/source/nrk_scheduler.c **** #endif
 336:../../../src/kernel/source/nrk_scheduler.c ****     //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
 337:../../../src/kernel/source/nrk_scheduler.c ****     nrk_cur_task_prio = nrk_high_ready_prio;
 921               	.LM104:
 922 04a8 8093 0000 		sts nrk_cur_task_prio,r24
 338:../../../src/kernel/source/nrk_scheduler.c ****     nrk_cur_task_TCB  = nrk_high_ready_TCB;
 924               	.LM105:
 925 04ac F093 0000 		sts nrk_cur_task_TCB+1,r31
 926 04b0 E093 0000 		sts nrk_cur_task_TCB,r30
 339:../../../src/kernel/source/nrk_scheduler.c **** 
 340:../../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
 341:../../../src/kernel/source/nrk_scheduler.c ****     if(nrk_high_ready_TCB==NULL)
 342:../../../src/kernel/source/nrk_scheduler.c ****     {
 343:../../../src/kernel/source/nrk_scheduler.c ****         nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
 344:../../../src/kernel/source/nrk_scheduler.c ****     }
 345:../../../src/kernel/source/nrk_scheduler.c **** #endif
 346:../../../src/kernel/source/nrk_scheduler.c ****     //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());
 347:../../../src/kernel/source/nrk_scheduler.c **** 
 348:../../../src/kernel/source/nrk_scheduler.c ****     _nrk_prev_timer_val=next_wake;
 928               	.LM106:
 929 04b4 0093 0000 		sts _nrk_prev_timer_val,r16
 349:../../../src/kernel/source/nrk_scheduler.c **** 
 350:../../../src/kernel/source/nrk_scheduler.c **** 
 351:../../../src/kernel/source/nrk_scheduler.c ****     if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
 931               	.LM107:
 932 04b8 0E94 0000 		call _nrk_os_timer_get
 933 04bc 282F      		mov r18,r24
 934 04be 30E0      		ldi r19,lo8(0)
 935 04c0 2F5F      		subi r18,lo8(-(1))
 936 04c2 3F4F      		sbci r19,hi8(-(1))
 937 04c4 2017      		cp r18,r16
 938 04c6 3107      		cpc r19,r17
 939 04c8 00F0      		brlo .L36
 352:../../../src/kernel/source/nrk_scheduler.c ****     {
 353:../../../src/kernel/source/nrk_scheduler.c ****         // FIXME: Terrible Terrible...
 354:../../../src/kernel/source/nrk_scheduler.c ****         // Need to find out why this is happening...
 355:../../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
 356:../../../src/kernel/source/nrk_scheduler.c ****         // Ignore if you are the idle task coming from deep sleep
 357:../../../src/kernel/source/nrk_scheduler.c ****         if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
 358:../../../src/kernel/source/nrk_scheduler.c ****             nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
 359:../../../src/kernel/source/nrk_scheduler.c **** #endif
 360:../../../src/kernel/source/nrk_scheduler.c ****         // This is bad news, but keeps things running
 361:../../../src/kernel/source/nrk_scheduler.c ****         // +2 just in case we are on the edge of the last tick
 362:../../../src/kernel/source/nrk_scheduler.c ****         next_wake=_nrk_os_timer_get()+2;
 941               	.LM108:
 942 04ca 0E94 0000 		call _nrk_os_timer_get
 943 04ce 082F      		mov r16,r24
 944 04d0 10E0      		ldi r17,lo8(0)
 945 04d2 0E5F      		subi r16,lo8(-(2))
 946 04d4 1F4F      		sbci r17,hi8(-(2))
 363:../../../src/kernel/source/nrk_scheduler.c ****         _nrk_prev_timer_val=next_wake;
 948               	.LM109:
 949 04d6 0093 0000 		sts _nrk_prev_timer_val,r16
 950               	.L36:
 364:../../../src/kernel/source/nrk_scheduler.c ****     }
 365:../../../src/kernel/source/nrk_scheduler.c **** 
 366:../../../src/kernel/source/nrk_scheduler.c ****     if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
 952               	.LM110:
 953 04da FF20      		tst r15
 954 04dc 01F0      		breq .L37
 956               	.LM111:
 957 04de 1092 0000 		sts _nrk_cpu_state,__zero_reg__
 958               	.L37:
 367:../../../src/kernel/source/nrk_scheduler.c **** 
 368:../../../src/kernel/source/nrk_scheduler.c ****     _nrk_set_next_wakeup(next_wake);
 960               	.LM112:
 961 04e2 802F      		mov r24,r16
 962 04e4 0E94 0000 		call _nrk_set_next_wakeup
 369:../../../src/kernel/source/nrk_scheduler.c **** 
 370:../../../src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
 371:../../../src/kernel/source/nrk_scheduler.c ****     // Bound Context Swap to 100us
 372:../../../src/kernel/source/nrk_scheduler.c ****     nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
 373:../../../src/kernel/source/nrk_scheduler.c **** #endif
 374:../../../src/kernel/source/nrk_scheduler.c ****     nrk_stack_pointer_restore();
 964               	.LM113:
 965 04e8 0E94 0000 		call nrk_stack_pointer_restore
 375:../../../src/kernel/source/nrk_scheduler.c ****     //nrk_int_enable();
 376:../../../src/kernel/source/nrk_scheduler.c ****     nrk_start_high_ready_task();
 967               	.LM114:
 968 04ec 0E94 0000 		call nrk_start_high_ready_task
 969               	/* epilogue start */
 377:../../../src/kernel/source/nrk_scheduler.c **** 
 378:../../../src/kernel/source/nrk_scheduler.c **** }
 971               	.LM115:
 972 04f0 0F90      		pop __tmp_reg__
 973 04f2 CF91      		pop r28
 974 04f4 DF91      		pop r29
 975 04f6 1F91      		pop r17
 976 04f8 0F91      		pop r16
 977 04fa FF90      		pop r15
 978 04fc EF90      		pop r14
 979 04fe DF90      		pop r13
 980 0500 CF90      		pop r12
 981 0502 BF90      		pop r11
 982 0504 AF90      		pop r10
 983 0506 9F90      		pop r9
 984 0508 8F90      		pop r8
 985 050a 7F90      		pop r7
 986 050c 6F90      		pop r6
 987 050e 5F90      		pop r5
 988 0510 4F90      		pop r4
 989 0512 0895      		ret
 991               	.Lscope1:
 993               		.stabd	78,0,0
 994               		.comm _nrk_signal_list,4,1
 995               		.comm nrk_system_ceiling,2,1
 996               		.comm nrk_idle_task_stk,128,1
 997               		.comm nrk_kernel_stk_ptr,2,1
 998               		.comm nrk_task_TCB,195,1
 999               		.comm nrk_wakeup_signal,1,1
 1000               		.comm _nrk_readyQ,30,1
 1001               		.comm _free_node,2,1
 1002               		.comm _head_node,2,1
 1003               		.comm nrk_cur_task_prio,1,1
 1004               		.comm nrk_cur_task_TCB,2,1
 1005               		.comm nrk_high_ready_prio,1,1
 1006               		.comm nrk_high_ready_TCB,2,1
 1007               		.comm _nrk_resource_cnt,1,1
 1008               		.comm nrk_system_time,8,1
 1009               		.comm nrk_sem_list,15,1
 1010               		.comm error_task,1,1
 1011               		.comm error_num,1,1
 1012               		.comm _nrk_cpu_state,1,1
 1013               		.comm next_next_wakeup,2,1
 1014               		.comm _nrk_prev_timer_val,1,1
 1015               		.comm _nrk_time_trigger,1,1
 1016               		.comm app_timer0_callback,2,1
 1017               		.comm app_timer0_prescale,1,1
 1018               		.comm cur_task_stats,150,1
 1019               		.comm _nrk_stats_sleep_time,8,1
 1020               		.comm sw_wdts,57,1
 1021               		.comm t,1,1
 1051               	.Letext0:
 1052               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 nrk_scheduler.c
     /tmp/ccu0H04l.s:2      *ABS*:0000003f __SREG__
     /tmp/ccu0H04l.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccu0H04l.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccu0H04l.s:5      *ABS*:00000034 __CCP__
     /tmp/ccu0H04l.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccu0H04l.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccu0H04l.s:148    .text:00000000 _nrk_scheduler
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000008 nrk_system_time
                            *COM*:00000002 nrk_cur_task_TCB
                            *COM*:00000001 _nrk_cpu_state
                            *COM*:000000c3 nrk_task_TCB
                            *COM*:00000001 nrk_wakeup_signal
                            *COM*:00000001 nrk_high_ready_prio
                            *COM*:00000002 nrk_high_ready_TCB
                            *COM*:00000001 nrk_cur_task_prio
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000002 nrk_system_ceiling
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:0000001e _nrk_readyQ
                            *COM*:00000002 _free_node
                            *COM*:00000002 _head_node
                            *COM*:00000001 _nrk_resource_cnt
                            *COM*:0000000f nrk_sem_list
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000002 next_next_wakeup
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale
                            *COM*:00000096 cur_task_stats
                            *COM*:00000008 _nrk_stats_sleep_time
                            *COM*:00000039 sw_wdts
                            *COM*:00000001 t

UNDEFINED SYMBOLS
_nrk_precision_os_timer_reset
nrk_int_disable
_nrk_set_next_wakeup
nrk_watchdog_reset
_nrk_sw_wdt_check
__mulsi3
__udivmodsi4
_nrk_stats_sleep
_nrk_stats_task_preempted
_nrk_stats_task_suspend
nrk_rem_from_readyQ
_nrk_stats_add_violation
nrk_kernel_error_add
__udivmodhi4
nrk_add_to_readyQ
_nrk_stats_task_start
nrk_get_high_ready_task_ID
_nrk_os_timer_get
nrk_stack_pointer_restore
nrk_start_high_ready_task
__do_clear_bss
