   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 137               		.data
 138               	.LC0:
 139 0000 745B 2564 		.string	"t[%d]\n"
 139      5D0A 00
 140               		.text
 142               	.global	Task4
 144               	Task4:
 145               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        **** *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        **** *  All rights reserved.
   5:main.c        **** *
   6:main.c        **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        **** *
  10:main.c        **** *  This program is free software: you can redistribute it and/or modify
  11:main.c        **** *  it under the terms of the GNU General Public License as published by
  12:main.c        **** *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        **** *
  14:main.c        **** *  This program is distributed in the hope that it will be useful,
  15:main.c        **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        **** *  GNU General Public License for more details.
  18:main.c        **** *
  19:main.c        **** *  You should have received a copy of the GNU General Public License
  20:main.c        **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        **** *
  22:main.c        **** *  Contributing Authors (specific to this file):
  23:main.c        **** *  Zane Starr
  24:main.c        **** *******************************************************************************/
  25:main.c        **** 
  26:main.c        **** 
  27:main.c        **** #include <nrk.h>
  28:main.c        **** #include <include.h>
  29:main.c        **** #include <ulib.h>
  30:main.c        **** #include <stdio.h>
  31:main.c        **** #include <avr/sleep.h>
  32:main.c        **** #include <hal.h>
  33:main.c        **** #include <nrk_error.h>
  34:main.c        **** #include <nrk_events.h>
  35:main.c        **** #include <nrk_timer.h>
  36:main.c        **** 
  37:main.c        **** 
  38:main.c        **** // scheduled tasks
  39:main.c        **** NRK_STK Stack1[NRK_APP_STACKSIZE];
  40:main.c        **** nrk_task_type TaskOne;
  41:main.c        **** void Task1(void);
  42:main.c        **** 
  43:main.c        **** NRK_STK Stack2[NRK_APP_STACKSIZE];
  44:main.c        **** nrk_task_type TaskTwo;
  45:main.c        **** void Task2 (void);
  46:main.c        **** 
  47:main.c        **** NRK_STK Stack3[NRK_APP_STACKSIZE];
  48:main.c        **** nrk_task_type TaskThree;
  49:main.c        **** void Task3 (void);
  50:main.c        **** 
  51:main.c        **** NRK_STK Stack4[NRK_APP_STACKSIZE];
  52:main.c        **** nrk_task_type TaskFour;
  53:main.c        **** void Task4 (void);
  54:main.c        **** 
  55:main.c        **** void nrk_create_taskset();
  56:main.c        **** 
  57:main.c        **** // resource locks
  58:main.c        **** nrk_sem_t *r1;
  59:main.c        **** nrk_sem_t *r2;
  60:main.c        **** nrk_sem_t *r3;
  61:main.c        ****  
  62:main.c        **** int main ()
  63:main.c        **** {
  64:main.c        ****   	uint8_t t;
  65:main.c        ****   	nrk_setup_ports();
  66:main.c        ****   	nrk_setup_uart(UART_BAUDRATE_115K2);
  67:main.c        **** 
  68:main.c        ****   	//printf( "Starting up...\r\n" );
  69:main.c        **** 
  70:main.c        ****   	nrk_init();
  71:main.c        **** 
  72:main.c        ****   	nrk_led_clr(ORANGE_LED);
  73:main.c        ****   	nrk_led_clr(BLUE_LED);
  74:main.c        ****   	nrk_led_set(GREEN_LED);
  75:main.c        ****   	nrk_led_clr(RED_LED);
  76:main.c        ****  
  77:main.c        ****   	nrk_time_set(0,0);
  78:main.c        ****   	nrk_create_taskset ();
  79:main.c        **** 
  80:main.c        ****   	r1 = nrk_sem_create(1,2);
  81:main.c        ****   	r2 = nrk_sem_create(1,2);
  82:main.c        ****   	r3 = nrk_sem_create(1,2);
  83:main.c        ****   	if(!r1 || !r2 || !r3) nrk_kprintf( PSTR("error: sem_create\r\n" ));
  84:main.c        **** 	else nrk_start();
  85:main.c        ****   
  86:main.c        ****   	return 0;
  87:main.c        **** }
  88:main.c        **** 
  89:main.c        **** 
  90:main.c        **** void Task1()
  91:main.c        **** {
  92:main.c        **** 	//uint16_t cnt=0;
  93:main.c        **** 	//printf( "My node's address is %d\r\n",NODE_ADDR );	
  94:main.c        ****   	//printf( "Task1 PID=%d\r\n",nrk_get_pid());
  95:main.c        **** 	int8_t v;
  96:main.c        **** 
  97:main.c        ****   	while(1) {
  98:main.c        **** 		nrk_led_toggle(ORANGE_LED);
  99:main.c        **** 		nrk_wait_until_next_period();
 100:main.c        **** 
 101:main.c        **** 		// acquire lock
 102:main.c        **** 		printf("t[%d]: sem_pend\n", nrk_get_pid());
 103:main.c        **** 		v = nrk_sem_pend(r1);
 104:main.c        **** 		if(v==NRK_ERROR) nrk_kprintf( PSTR("T1 error pend\r\n"));
 105:main.c        **** 
 106:main.c        **** 		// wait some time inside semaphore to show the effect
 107:main.c        **** 		printf("t[%d]: sem_acquired\n", nrk_get_pid());
 108:main.c        **** 		nrk_spin_wait_us(1000000);
 109:main.c        **** 
 110:main.c        **** 		// release lock
 111:main.c        **** 		v = nrk_sem_post(r1);
 112:main.c        **** 		if(v==NRK_ERROR) nrk_kprintf( PSTR("T1 error post\r\n"));
 113:main.c        **** 		printf("t[%d]: sem_post\n", nrk_get_pid());
 114:main.c        **** 
 115:main.c        **** 		nrk_wait_until_next_period();
 116:main.c        **** 
 117:main.c        **** 		//printf( "Task1 cnt=%d\r\n",cnt );
 118:main.c        **** 		//nrk_kprintf( PSTR("Task1 accessing semaphore\r\n"));
 119:main.c        **** 		//nrk_kprintf( PSTR("Task1 holding semaphore\r\n"));
 120:main.c        **** 		//nrk_kprintf( PSTR("Task1 released semaphore\r\n"));
 121:main.c        **** 		//cnt++;
 122:main.c        **** 	}
 123:main.c        **** }
 124:main.c        **** 
 125:main.c        **** void Task2()
 126:main.c        **** {
 127:main.c        ****   	//uint8_t cnt=0;
 128:main.c        ****   	//printf( "Task2 PID=%d\r\n",nrk_get_pid());
 129:main.c        ****   	int8_t v;
 130:main.c        **** 
 131:main.c        ****   	while(1) {
 132:main.c        **** 		nrk_led_toggle(ORANGE_LED);
 133:main.c        **** 
 134:main.c        **** 		// acquire lock
 135:main.c        **** 		printf("t[%d]: sem_pend\n", nrk_get_pid());
 136:main.c        **** 		v = nrk_sem_pend(r1);
 137:main.c        **** 		if(v==NRK_ERROR) nrk_kprintf( PSTR("T2 error pend\r\n"));
 138:main.c        **** 
 139:main.c        **** 		// wait some time inside semaphore to show the effect
 140:main.c        **** 		printf("t[%d]: sem_acquired\n", nrk_get_pid());
 141:main.c        **** 		nrk_spin_wait_us(1000000);
 142:main.c        **** 
 143:main.c        **** 		// release lock
 144:main.c        **** 		v = nrk_sem_post(r1);
 145:main.c        **** 		if(v==NRK_ERROR) nrk_kprintf( PSTR("T2 error post\r\n"));
 146:main.c        **** 		printf("t[%d]: sem_post\n", nrk_get_pid());
 147:main.c        **** 
 148:main.c        **** 		nrk_wait_until_next_period();
 149:main.c        **** 
 150:main.c        **** 
 151:main.c        **** 		//printf( "Task2 cnt=%d\r\n",cnt );
 152:main.c        **** 		//nrk_kprintf( PSTR("Task2 accessing semaphore\r\n"));
 153:main.c        **** 		//nrk_kprintf( PSTR("Task2 holding semaphore\r\n"));
 154:main.c        **** 		//nrk_kprintf( PSTR("Task2 released semaphore\r\n"));
 155:main.c        ****         	//cnt++;
 156:main.c        ****         }
 157:main.c        **** }
 158:main.c        **** 
 159:main.c        **** void Task3()
 160:main.c        **** {
 161:main.c        **** 	//uint16_t cnt=0;
 162:main.c        ****   	//printf( "Task3 PID=%d\r\n",nrk_get_pid());
 163:main.c        **** 	uint16_t i;
 164:main.c        **** 
 165:main.c        ****   	while(1) {
 166:main.c        **** 		nrk_spin_wait_us(100000);
 167:main.c        **** 		nrk_wait_until_next_period();
 168:main.c        **** 
 169:main.c        **** 		printf("t[%d]\n", nrk_get_pid());
 170:main.c        **** 		//printf( "Task3 cnt=%d\r\n",cnt );
 171:main.c        **** 		//cnt++;
 172:main.c        **** 	}
 173:main.c        **** }
 174:main.c        **** 
 175:main.c        **** void Task4()
 176:main.c        **** {
 147               	.LM0:
 148               	.LFBB1:
 149 0000 CF93      		push r28
 150 0002 DF93      		push r29
 151               	/* prologue: function */
 152               	/* frame size = 0 */
 153               	/* stack size = 2 */
 154               	.L__stack_usage = 2
 177:main.c        **** 	//uint16_t i;
 178:main.c        **** 	//uint16_t cnt=0;
 179:main.c        ****   	//printf( "Task4 PID=%d\r\n",nrk_get_pid());
 180:main.c        **** 
 181:main.c        ****   	while(1) {
 182:main.c        **** 		nrk_spin_wait_us(100000);
 183:main.c        **** 		nrk_wait_until_next_period();
 184:main.c        **** 
 185:main.c        **** 		printf("t[%d]\n", nrk_get_pid());
 156               	.LM1:
 157 0004 C0E0      		ldi r28,lo8(.LC0)
 158 0006 D0E0      		ldi r29,hi8(.LC0)
 159               	.L2:
 182:main.c        **** 		nrk_spin_wait_us(100000);
 161               	.LM2:
 162 0008 80EA      		ldi r24,lo8(-31072)
 163 000a 96E8      		ldi r25,hi8(-31072)
 164 000c 0E94 0000 		call nrk_spin_wait_us
 183:main.c        **** 		nrk_wait_until_next_period();
 166               	.LM3:
 167 0010 0E94 0000 		call nrk_wait_until_next_period
 169               	.LM4:
 170 0014 0E94 0000 		call nrk_get_pid
 171 0018 00D0      		rcall .
 172 001a 00D0      		rcall .
 173 001c EDB7      		in r30,__SP_L__
 174 001e FEB7      		in r31,__SP_H__
 175 0020 3196      		adiw r30,1
 176 0022 ADB7      		in r26,__SP_L__
 177 0024 BEB7      		in r27,__SP_H__
 178 0026 1296      		adiw r26,1+1
 179 0028 DC93      		st X,r29
 180 002a CE93      		st -X,r28
 181 002c 1197      		sbiw r26,1
 182 002e 8283      		std Z+2,r24
 183 0030 1382      		std Z+3,__zero_reg__
 184 0032 0E94 0000 		call printf
 185 0036 0F90      		pop __tmp_reg__
 186 0038 0F90      		pop __tmp_reg__
 187 003a 0F90      		pop __tmp_reg__
 188 003c 0F90      		pop __tmp_reg__
 189 003e 00C0      		rjmp .L2
 191               	.Lscope1:
 193               		.stabd	78,0,0
 195               	.global	Task3
 197               	Task3:
 198               		.stabd	46,0,0
 160:main.c        **** {
 200               	.LM5:
 201               	.LFBB2:
 202 0040 CF93      		push r28
 203 0042 DF93      		push r29
 204               	/* prologue: function */
 205               	/* frame size = 0 */
 206               	/* stack size = 2 */
 207               	.L__stack_usage = 2
 169:main.c        **** 		printf("t[%d]\n", nrk_get_pid());
 209               	.LM6:
 210 0044 C0E0      		ldi r28,lo8(.LC0)
 211 0046 D0E0      		ldi r29,hi8(.LC0)
 212               	.L4:
 166:main.c        **** 		nrk_spin_wait_us(100000);
 214               	.LM7:
 215 0048 80EA      		ldi r24,lo8(-31072)
 216 004a 96E8      		ldi r25,hi8(-31072)
 217 004c 0E94 0000 		call nrk_spin_wait_us
 167:main.c        **** 		nrk_wait_until_next_period();
 219               	.LM8:
 220 0050 0E94 0000 		call nrk_wait_until_next_period
 169:main.c        **** 		printf("t[%d]\n", nrk_get_pid());
 222               	.LM9:
 223 0054 0E94 0000 		call nrk_get_pid
 224 0058 00D0      		rcall .
 225 005a 00D0      		rcall .
 226 005c EDB7      		in r30,__SP_L__
 227 005e FEB7      		in r31,__SP_H__
 228 0060 3196      		adiw r30,1
 229 0062 ADB7      		in r26,__SP_L__
 230 0064 BEB7      		in r27,__SP_H__
 231 0066 1296      		adiw r26,1+1
 232 0068 DC93      		st X,r29
 233 006a CE93      		st -X,r28
 234 006c 1197      		sbiw r26,1
 235 006e 8283      		std Z+2,r24
 236 0070 1382      		std Z+3,__zero_reg__
 237 0072 0E94 0000 		call printf
 238 0076 0F90      		pop __tmp_reg__
 239 0078 0F90      		pop __tmp_reg__
 240 007a 0F90      		pop __tmp_reg__
 241 007c 0F90      		pop __tmp_reg__
 242 007e 00C0      		rjmp .L4
 244               	.Lscope2:
 246               		.stabd	78,0,0
 247               		.data
 248               	.LC1:
 249 0007 745B 2564 		.string	"t[%d]: sem_pend\n"
 249      5D3A 2073 
 249      656D 5F70 
 249      656E 640A 
 249      00
 250               	.LC2:
 251 0018 745B 2564 		.string	"t[%d]: sem_acquired\n"
 251      5D3A 2073 
 251      656D 5F61 
 251      6371 7569 
 251      7265 640A 
 252               	.LC3:
 253 002d 745B 2564 		.string	"t[%d]: sem_post\n"
 253      5D3A 2073 
 253      656D 5F70 
 253      6F73 740A 
 253      00
 254               		.text
 256               	.global	Task2
 258               	Task2:
 259               		.stabd	46,0,0
 126:main.c        **** {
 261               	.LM10:
 262               	.LFBB3:
 263 0080 EF92      		push r14
 264 0082 FF92      		push r15
 265 0084 0F93      		push r16
 266 0086 1F93      		push r17
 267 0088 CF93      		push r28
 268 008a DF93      		push r29
 269               	/* prologue: function */
 270               	/* frame size = 0 */
 271               	/* stack size = 6 */
 272               	.L__stack_usage = 6
 135:main.c        **** 		printf("t[%d]: sem_pend\n", nrk_get_pid());
 274               	.LM11:
 275 008c 80E0      		ldi r24,lo8(.LC1)
 276 008e E82E      		mov r14,r24
 277 0090 80E0      		ldi r24,hi8(.LC1)
 278 0092 F82E      		mov r15,r24
 140:main.c        **** 		printf("t[%d]: sem_acquired\n", nrk_get_pid());
 280               	.LM12:
 281 0094 00E0      		ldi r16,lo8(.LC2)
 282 0096 10E0      		ldi r17,hi8(.LC2)
 146:main.c        **** 		printf("t[%d]: sem_post\n", nrk_get_pid());
 284               	.LM13:
 285 0098 C0E0      		ldi r28,lo8(.LC3)
 286 009a D0E0      		ldi r29,hi8(.LC3)
 287               	.L8:
 132:main.c        **** 		nrk_led_toggle(ORANGE_LED);
 289               	.LM14:
 290 009c 80E0      		ldi r24,lo8(0)
 291 009e 90E0      		ldi r25,hi8(0)
 292 00a0 0E94 0000 		call nrk_led_toggle
 135:main.c        **** 		printf("t[%d]: sem_pend\n", nrk_get_pid());
 294               	.LM15:
 295 00a4 0E94 0000 		call nrk_get_pid
 296 00a8 00D0      		rcall .
 297 00aa 00D0      		rcall .
 298 00ac EDB7      		in r30,__SP_L__
 299 00ae FEB7      		in r31,__SP_H__
 300 00b0 3196      		adiw r30,1
 301 00b2 ADB7      		in r26,__SP_L__
 302 00b4 BEB7      		in r27,__SP_H__
 303 00b6 1296      		adiw r26,1+1
 304 00b8 FC92      		st X,r15
 305 00ba EE92      		st -X,r14
 306 00bc 1197      		sbiw r26,1
 307 00be 8283      		std Z+2,r24
 308 00c0 1382      		std Z+3,__zero_reg__
 309 00c2 0E94 0000 		call printf
 136:main.c        **** 		v = nrk_sem_pend(r1);
 311               	.LM16:
 312 00c6 0F90      		pop __tmp_reg__
 313 00c8 0F90      		pop __tmp_reg__
 314 00ca 0F90      		pop __tmp_reg__
 315 00cc 0F90      		pop __tmp_reg__
 316 00ce 8091 0000 		lds r24,r1
 317 00d2 9091 0000 		lds r25,r1+1
 318 00d6 0E94 0000 		call nrk_sem_pend
 137:main.c        **** 		if(v==NRK_ERROR) nrk_kprintf( PSTR("T2 error pend\r\n"));
 320               	.LM17:
 321 00da 8F3F      		cpi r24,lo8(-1)
 322 00dc 01F4      		brne .L6
 137:main.c        **** 		if(v==NRK_ERROR) nrk_kprintf( PSTR("T2 error pend\r\n"));
 324               	.LM18:
 325 00de 80E0      		ldi r24,lo8(__c.2144)
 326 00e0 90E0      		ldi r25,hi8(__c.2144)
 327 00e2 0E94 0000 		call nrk_kprintf
 328               	.L6:
 140:main.c        **** 		printf("t[%d]: sem_acquired\n", nrk_get_pid());
 330               	.LM19:
 331 00e6 0E94 0000 		call nrk_get_pid
 332 00ea 00D0      		rcall .
 333 00ec 00D0      		rcall .
 334 00ee EDB7      		in r30,__SP_L__
 335 00f0 FEB7      		in r31,__SP_H__
 336 00f2 3196      		adiw r30,1
 337 00f4 ADB7      		in r26,__SP_L__
 338 00f6 BEB7      		in r27,__SP_H__
 339 00f8 1296      		adiw r26,1+1
 340 00fa 1C93      		st X,r17
 341 00fc 0E93      		st -X,r16
 342 00fe 1197      		sbiw r26,1
 343 0100 8283      		std Z+2,r24
 344 0102 1382      		std Z+3,__zero_reg__
 345 0104 0E94 0000 		call printf
 141:main.c        **** 		nrk_spin_wait_us(1000000);
 347               	.LM20:
 348 0108 0F90      		pop __tmp_reg__
 349 010a 0F90      		pop __tmp_reg__
 350 010c 0F90      		pop __tmp_reg__
 351 010e 0F90      		pop __tmp_reg__
 352 0110 80E4      		ldi r24,lo8(16960)
 353 0112 92E4      		ldi r25,hi8(16960)
 354 0114 0E94 0000 		call nrk_spin_wait_us
 144:main.c        **** 		v = nrk_sem_post(r1);
 356               	.LM21:
 357 0118 8091 0000 		lds r24,r1
 358 011c 9091 0000 		lds r25,r1+1
 359 0120 0E94 0000 		call nrk_sem_post
 145:main.c        **** 		if(v==NRK_ERROR) nrk_kprintf( PSTR("T2 error post\r\n"));
 361               	.LM22:
 362 0124 8F3F      		cpi r24,lo8(-1)
 363 0126 01F4      		brne .L7
 145:main.c        **** 		if(v==NRK_ERROR) nrk_kprintf( PSTR("T2 error post\r\n"));
 365               	.LM23:
 366 0128 80E0      		ldi r24,lo8(__c.2146)
 367 012a 90E0      		ldi r25,hi8(__c.2146)
 368 012c 0E94 0000 		call nrk_kprintf
 369               	.L7:
 146:main.c        **** 		printf("t[%d]: sem_post\n", nrk_get_pid());
 371               	.LM24:
 372 0130 0E94 0000 		call nrk_get_pid
 373 0134 00D0      		rcall .
 374 0136 00D0      		rcall .
 375 0138 EDB7      		in r30,__SP_L__
 376 013a FEB7      		in r31,__SP_H__
 377 013c 3196      		adiw r30,1
 378 013e ADB7      		in r26,__SP_L__
 379 0140 BEB7      		in r27,__SP_H__
 380 0142 1296      		adiw r26,1+1
 381 0144 DC93      		st X,r29
 382 0146 CE93      		st -X,r28
 383 0148 1197      		sbiw r26,1
 384 014a 8283      		std Z+2,r24
 385 014c 1382      		std Z+3,__zero_reg__
 386 014e 0E94 0000 		call printf
 148:main.c        **** 		nrk_wait_until_next_period();
 388               	.LM25:
 389 0152 0F90      		pop __tmp_reg__
 390 0154 0F90      		pop __tmp_reg__
 391 0156 0F90      		pop __tmp_reg__
 392 0158 0F90      		pop __tmp_reg__
 393 015a 0E94 0000 		call nrk_wait_until_next_period
 156:main.c        ****         }
 395               	.LM26:
 396 015e 00C0      		rjmp .L8
 398               	.Lscope3:
 400               		.stabd	78,0,0
 402               	.global	Task1
 404               	Task1:
 405               		.stabd	46,0,0
  91:main.c        **** {
 407               	.LM27:
 408               	.LFBB4:
 409 0160 EF92      		push r14
 410 0162 FF92      		push r15
 411 0164 0F93      		push r16
 412 0166 1F93      		push r17
 413 0168 CF93      		push r28
 414 016a DF93      		push r29
 415               	/* prologue: function */
 416               	/* frame size = 0 */
 417               	/* stack size = 6 */
 418               	.L__stack_usage = 6
 102:main.c        **** 		printf("t[%d]: sem_pend\n", nrk_get_pid());
 420               	.LM28:
 421 016c 90E0      		ldi r25,lo8(.LC1)
 422 016e E92E      		mov r14,r25
 423 0170 90E0      		ldi r25,hi8(.LC1)
 424 0172 F92E      		mov r15,r25
 107:main.c        **** 		printf("t[%d]: sem_acquired\n", nrk_get_pid());
 426               	.LM29:
 427 0174 00E0      		ldi r16,lo8(.LC2)
 428 0176 10E0      		ldi r17,hi8(.LC2)
 113:main.c        **** 		printf("t[%d]: sem_post\n", nrk_get_pid());
 430               	.LM30:
 431 0178 C0E0      		ldi r28,lo8(.LC3)
 432 017a D0E0      		ldi r29,hi8(.LC3)
 433               	.L12:
  98:main.c        **** 		nrk_led_toggle(ORANGE_LED);
 435               	.LM31:
 436 017c 80E0      		ldi r24,lo8(0)
 437 017e 90E0      		ldi r25,hi8(0)
 438 0180 0E94 0000 		call nrk_led_toggle
  99:main.c        **** 		nrk_wait_until_next_period();
 440               	.LM32:
 441 0184 0E94 0000 		call nrk_wait_until_next_period
 102:main.c        **** 		printf("t[%d]: sem_pend\n", nrk_get_pid());
 443               	.LM33:
 444 0188 0E94 0000 		call nrk_get_pid
 445 018c 00D0      		rcall .
 446 018e 00D0      		rcall .
 447 0190 EDB7      		in r30,__SP_L__
 448 0192 FEB7      		in r31,__SP_H__
 449 0194 3196      		adiw r30,1
 450 0196 ADB7      		in r26,__SP_L__
 451 0198 BEB7      		in r27,__SP_H__
 452 019a 1296      		adiw r26,1+1
 453 019c FC92      		st X,r15
 454 019e EE92      		st -X,r14
 455 01a0 1197      		sbiw r26,1
 456 01a2 8283      		std Z+2,r24
 457 01a4 1382      		std Z+3,__zero_reg__
 458 01a6 0E94 0000 		call printf
 103:main.c        **** 		v = nrk_sem_pend(r1);
 460               	.LM34:
 461 01aa 0F90      		pop __tmp_reg__
 462 01ac 0F90      		pop __tmp_reg__
 463 01ae 0F90      		pop __tmp_reg__
 464 01b0 0F90      		pop __tmp_reg__
 465 01b2 8091 0000 		lds r24,r1
 466 01b6 9091 0000 		lds r25,r1+1
 467 01ba 0E94 0000 		call nrk_sem_pend
 104:main.c        **** 		if(v==NRK_ERROR) nrk_kprintf( PSTR("T1 error pend\r\n"));
 469               	.LM35:
 470 01be 8F3F      		cpi r24,lo8(-1)
 471 01c0 01F4      		brne .L10
 104:main.c        **** 		if(v==NRK_ERROR) nrk_kprintf( PSTR("T1 error pend\r\n"));
 473               	.LM36:
 474 01c2 80E0      		ldi r24,lo8(__c.2136)
 475 01c4 90E0      		ldi r25,hi8(__c.2136)
 476 01c6 0E94 0000 		call nrk_kprintf
 477               	.L10:
 107:main.c        **** 		printf("t[%d]: sem_acquired\n", nrk_get_pid());
 479               	.LM37:
 480 01ca 0E94 0000 		call nrk_get_pid
 481 01ce 00D0      		rcall .
 482 01d0 00D0      		rcall .
 483 01d2 EDB7      		in r30,__SP_L__
 484 01d4 FEB7      		in r31,__SP_H__
 485 01d6 3196      		adiw r30,1
 486 01d8 ADB7      		in r26,__SP_L__
 487 01da BEB7      		in r27,__SP_H__
 488 01dc 1296      		adiw r26,1+1
 489 01de 1C93      		st X,r17
 490 01e0 0E93      		st -X,r16
 491 01e2 1197      		sbiw r26,1
 492 01e4 8283      		std Z+2,r24
 493 01e6 1382      		std Z+3,__zero_reg__
 494 01e8 0E94 0000 		call printf
 108:main.c        **** 		nrk_spin_wait_us(1000000);
 496               	.LM38:
 497 01ec 0F90      		pop __tmp_reg__
 498 01ee 0F90      		pop __tmp_reg__
 499 01f0 0F90      		pop __tmp_reg__
 500 01f2 0F90      		pop __tmp_reg__
 501 01f4 80E4      		ldi r24,lo8(16960)
 502 01f6 92E4      		ldi r25,hi8(16960)
 503 01f8 0E94 0000 		call nrk_spin_wait_us
 111:main.c        **** 		v = nrk_sem_post(r1);
 505               	.LM39:
 506 01fc 8091 0000 		lds r24,r1
 507 0200 9091 0000 		lds r25,r1+1
 508 0204 0E94 0000 		call nrk_sem_post
 112:main.c        **** 		if(v==NRK_ERROR) nrk_kprintf( PSTR("T1 error post\r\n"));
 510               	.LM40:
 511 0208 8F3F      		cpi r24,lo8(-1)
 512 020a 01F4      		brne .L11
 112:main.c        **** 		if(v==NRK_ERROR) nrk_kprintf( PSTR("T1 error post\r\n"));
 514               	.LM41:
 515 020c 80E0      		ldi r24,lo8(__c.2138)
 516 020e 90E0      		ldi r25,hi8(__c.2138)
 517 0210 0E94 0000 		call nrk_kprintf
 518               	.L11:
 113:main.c        **** 		printf("t[%d]: sem_post\n", nrk_get_pid());
 520               	.LM42:
 521 0214 0E94 0000 		call nrk_get_pid
 522 0218 00D0      		rcall .
 523 021a 00D0      		rcall .
 524 021c EDB7      		in r30,__SP_L__
 525 021e FEB7      		in r31,__SP_H__
 526 0220 3196      		adiw r30,1
 527 0222 ADB7      		in r26,__SP_L__
 528 0224 BEB7      		in r27,__SP_H__
 529 0226 1296      		adiw r26,1+1
 530 0228 DC93      		st X,r29
 531 022a CE93      		st -X,r28
 532 022c 1197      		sbiw r26,1
 533 022e 8283      		std Z+2,r24
 534 0230 1382      		std Z+3,__zero_reg__
 535 0232 0E94 0000 		call printf
 115:main.c        **** 		nrk_wait_until_next_period();
 537               	.LM43:
 538 0236 0F90      		pop __tmp_reg__
 539 0238 0F90      		pop __tmp_reg__
 540 023a 0F90      		pop __tmp_reg__
 541 023c 0F90      		pop __tmp_reg__
 542 023e 0E94 0000 		call nrk_wait_until_next_period
 122:main.c        **** 	}
 544               	.LM44:
 545 0242 00C0      		rjmp .L12
 547               	.Lscope4:
 549               		.stabd	78,0,0
 551               	.global	nrk_create_taskset
 553               	nrk_create_taskset:
 554               		.stabd	46,0,0
 186:main.c        **** 		//printf( "Task4 cnt=%d\r\n",cnt );
 187:main.c        **** 		//cnt++;
 188:main.c        **** 	}
 189:main.c        **** }
 190:main.c        **** 
 191:main.c        **** void nrk_create_taskset()
 192:main.c        **** {
 556               	.LM45:
 557               	.LFBB5:
 558 0244 DF92      		push r13
 559 0246 EF92      		push r14
 560 0248 FF92      		push r15
 561 024a 0F93      		push r16
 562 024c 1F93      		push r17
 563 024e CF93      		push r28
 564 0250 DF93      		push r29
 565               	/* prologue: function */
 566               	/* frame size = 0 */
 567               	/* stack size = 7 */
 568               	.L__stack_usage = 7
 570               	.LM46:
 571 0252 E0E0      		ldi r30,lo8(TaskOne+35)
 572 0254 F0E0      		ldi r31,hi8(TaskOne+35)
 573 0256 80E0      		ldi r24,lo8(TaskTwo+35)
 574 0258 90E0      		ldi r25,hi8(TaskTwo+35)
 575 025a C0E0      		ldi r28,lo8(TaskThree+35)
 576 025c D0E0      		ldi r29,hi8(TaskThree+35)
 577 025e 40E0      		ldi r20,lo8(TaskFour+35)
 578 0260 50E0      		ldi r21,hi8(TaskFour+35)
 579               	.L14:
 193:main.c        **** 	uint8_t i;
 194:main.c        **** 
 195:main.c        **** 	for (i = 0; i < NRK_MAX_RESOURCE_CNT; i++)
 196:main.c        **** 	{
 197:main.c        **** 		TaskOne.semaphores[i] = false;
 581               	.LM47:
 582 0262 1192      		st Z+,__zero_reg__
 198:main.c        **** 		TaskTwo.semaphores[i] = false;
 584               	.LM48:
 585 0264 DC01      		movw r26,r24
 586 0266 1D92      		st X+,__zero_reg__
 587 0268 CD01      		movw r24,r26
 199:main.c        **** 		TaskThree.semaphores[i] = false;
 589               	.LM49:
 590 026a 1992      		st Y+,__zero_reg__
 200:main.c        **** 		TaskFour.semaphores[i] = false;
 592               	.LM50:
 593 026c DA01      		movw r26,r20
 594 026e 1D92      		st X+,__zero_reg__
 595 0270 AD01      		movw r20,r26
 195:main.c        **** 	for (i = 0; i < NRK_MAX_RESOURCE_CNT; i++)
 597               	.LM51:
 598 0272 B0E0      		ldi r27,hi8(TaskOne+40)
 599 0274 E030      		cpi r30,lo8(TaskOne+40)
 600 0276 FB07      		cpc r31,r27
 601 0278 01F4      		brne .L14
 201:main.c        **** 	}
 202:main.c        **** 
 203:main.c        ****   	TaskOne.task = Task1;
 603               	.LM52:
 604 027a 80E0      		ldi r24,lo8(gs(Task1))
 605 027c 90E0      		ldi r25,hi8(gs(Task1))
 606 027e 9093 0000 		sts TaskOne+5+1,r25
 607 0282 8093 0000 		sts TaskOne+5,r24
 204:main.c        ****   	TaskOne.Ptos = (void *) &Stack1[NRK_APP_STACKSIZE];
 609               	.LM53:
 610 0286 80E0      		ldi r24,lo8(Stack1+128)
 611 0288 90E0      		ldi r25,hi8(Stack1+128)
 612 028a 9093 0000 		sts TaskOne+1+1,r25
 613 028e 8093 0000 		sts TaskOne+1,r24
 205:main.c        ****   	TaskOne.Pbos = (void *) &Stack1[0];
 615               	.LM54:
 616 0292 80E0      		ldi r24,lo8(Stack1)
 617 0294 90E0      		ldi r25,hi8(Stack1)
 618 0296 9093 0000 		sts TaskOne+3+1,r25
 619 029a 8093 0000 		sts TaskOne+3,r24
 206:main.c        ****   	//WTaskOne.prio = 2;
 207:main.c        ****   	TaskOne.FirstActivation = TRUE;
 621               	.LM55:
 622 029e DD24      		clr r13
 623 02a0 D394      		inc r13
 624 02a2 D092 0000 		sts TaskOne+7,r13
 208:main.c        ****   	TaskOne.Type = BASIC_TASK;
 626               	.LM56:
 627 02a6 D092 0000 		sts TaskOne+9,r13
 209:main.c        ****   	TaskOne.SchType = PREEMPTIVE;
 629               	.LM57:
 630 02aa D092 0000 		sts TaskOne+10,r13
 210:main.c        ****   	TaskOne.period.secs = 0;
 632               	.LM58:
 633 02ae 1092 0000 		sts TaskOne+11,__zero_reg__
 634 02b2 1092 0000 		sts TaskOne+11+1,__zero_reg__
 635 02b6 1092 0000 		sts TaskOne+11+2,__zero_reg__
 636 02ba 1092 0000 		sts TaskOne+11+3,__zero_reg__
 211:main.c        ****   	TaskOne.period.nano_secs = 250*NANOS_PER_MS;
 638               	.LM59:
 639 02be 20E8      		ldi r18,lo8(250000000)
 640 02c0 32EB      		ldi r19,hi8(250000000)
 641 02c2 46EE      		ldi r20,hlo8(250000000)
 642 02c4 5EE0      		ldi r21,hhi8(250000000)
 643 02c6 2093 0000 		sts TaskOne+15,r18
 644 02ca 3093 0000 		sts TaskOne+15+1,r19
 645 02ce 4093 0000 		sts TaskOne+15+2,r20
 646 02d2 5093 0000 		sts TaskOne+15+3,r21
 212:main.c        ****   	TaskOne.cpu_reserve.secs = 0;
 648               	.LM60:
 649 02d6 1092 0000 		sts TaskOne+19,__zero_reg__
 650 02da 1092 0000 		sts TaskOne+19+1,__zero_reg__
 651 02de 1092 0000 		sts TaskOne+19+2,__zero_reg__
 652 02e2 1092 0000 		sts TaskOne+19+3,__zero_reg__
 213:main.c        ****   	TaskOne.cpu_reserve.nano_secs =  50*NANOS_PER_MS;
 654               	.LM61:
 655 02e6 20E8      		ldi r18,lo8(50000000)
 656 02e8 30EF      		ldi r19,hi8(50000000)
 657 02ea 4AEF      		ldi r20,hlo8(50000000)
 658 02ec 52E0      		ldi r21,hhi8(50000000)
 659 02ee 2093 0000 		sts TaskOne+23,r18
 660 02f2 3093 0000 		sts TaskOne+23+1,r19
 661 02f6 4093 0000 		sts TaskOne+23+2,r20
 662 02fa 5093 0000 		sts TaskOne+23+3,r21
 214:main.c        ****   	TaskOne.offset.secs = 0;
 664               	.LM62:
 665 02fe 1092 0000 		sts TaskOne+27,__zero_reg__
 666 0302 1092 0000 		sts TaskOne+27+1,__zero_reg__
 667 0306 1092 0000 		sts TaskOne+27+2,__zero_reg__
 668 030a 1092 0000 		sts TaskOne+27+3,__zero_reg__
 215:main.c        ****   	TaskOne.offset.nano_secs= 0;
 670               	.LM63:
 671 030e 1092 0000 		sts TaskOne+31,__zero_reg__
 672 0312 1092 0000 		sts TaskOne+31+1,__zero_reg__
 673 0316 1092 0000 		sts TaskOne+31+2,__zero_reg__
 674 031a 1092 0000 		sts TaskOne+31+3,__zero_reg__
 216:main.c        **** 
 217:main.c        **** 	// @T3 SRP: Task registers which resources it will use.
 218:main.c        ****   	//          Indices are in order of the created semaphores.
 219:main.c        ****   	TaskOne.semaphores[0] = true;
 676               	.LM64:
 677 031e D092 0000 		sts TaskOne+35,r13
 220:main.c        **** 
 221:main.c        ****   	nrk_activate_task (&TaskOne);
 679               	.LM65:
 680 0322 CF01      		movw r24,r30
 681 0324 8897      		sbiw r24,40
 682 0326 0E94 0000 		call nrk_activate_task
 222:main.c        **** 
 223:main.c        ****   	TaskTwo.task = Task2;
 684               	.LM66:
 685 032a 80E0      		ldi r24,lo8(gs(Task2))
 686 032c 90E0      		ldi r25,hi8(gs(Task2))
 687 032e 9093 0000 		sts TaskTwo+5+1,r25
 688 0332 8093 0000 		sts TaskTwo+5,r24
 224:main.c        ****   	TaskTwo.Ptos = (void *) &Stack2[NRK_APP_STACKSIZE];
 690               	.LM67:
 691 0336 80E0      		ldi r24,lo8(Stack2+128)
 692 0338 90E0      		ldi r25,hi8(Stack2+128)
 693 033a 9093 0000 		sts TaskTwo+1+1,r25
 694 033e 8093 0000 		sts TaskTwo+1,r24
 225:main.c        ****   	TaskTwo.Pbos = (void *) &Stack2[0];
 696               	.LM68:
 697 0342 80E0      		ldi r24,lo8(Stack2)
 698 0344 90E0      		ldi r25,hi8(Stack2)
 699 0346 9093 0000 		sts TaskTwo+3+1,r25
 700 034a 8093 0000 		sts TaskTwo+3,r24
 226:main.c        ****   	//TaskTwo.prio = 4;
 227:main.c        ****   	TaskTwo.FirstActivation = TRUE;
 702               	.LM69:
 703 034e D092 0000 		sts TaskTwo+7,r13
 228:main.c        ****   	TaskTwo.Type = BASIC_TASK;
 705               	.LM70:
 706 0352 D092 0000 		sts TaskTwo+9,r13
 229:main.c        ****   	TaskTwo.SchType = PREEMPTIVE;
 708               	.LM71:
 709 0356 D092 0000 		sts TaskTwo+10,r13
 230:main.c        ****   	TaskTwo.period.secs = 0;
 711               	.LM72:
 712 035a 1092 0000 		sts TaskTwo+11,__zero_reg__
 713 035e 1092 0000 		sts TaskTwo+11+1,__zero_reg__
 714 0362 1092 0000 		sts TaskTwo+11+2,__zero_reg__
 715 0366 1092 0000 		sts TaskTwo+11+3,__zero_reg__
 231:main.c        ****   	TaskTwo.period.nano_secs = 100*NANOS_PER_MS;
 717               	.LM73:
 718 036a E12C      		mov r14,__zero_reg__
 719 036c 21EE      		ldi r18,hi8(100000000)
 720 036e F22E      		mov r15,r18
 721 0370 25EF      		ldi r18,hlo8(100000000)
 722 0372 022F      		mov r16,r18
 723 0374 25E0      		ldi r18,hhi8(100000000)
 724 0376 122F      		mov r17,r18
 725 0378 E092 0000 		sts TaskTwo+15,r14
 726 037c F092 0000 		sts TaskTwo+15+1,r15
 727 0380 0093 0000 		sts TaskTwo+15+2,r16
 728 0384 1093 0000 		sts TaskTwo+15+3,r17
 232:main.c        ****   	TaskTwo.cpu_reserve.secs = 0;
 730               	.LM74:
 731 0388 1092 0000 		sts TaskTwo+19,__zero_reg__
 732 038c 1092 0000 		sts TaskTwo+19+1,__zero_reg__
 733 0390 1092 0000 		sts TaskTwo+19+2,__zero_reg__
 734 0394 1092 0000 		sts TaskTwo+19+3,__zero_reg__
 233:main.c        ****  	TaskTwo.cpu_reserve.nano_secs = 35*NANOS_PER_MS;
 736               	.LM75:
 737 0398 80EC      		ldi r24,lo8(35000000)
 738 039a 9EE0      		ldi r25,hi8(35000000)
 739 039c A6E1      		ldi r26,hlo8(35000000)
 740 039e B2E0      		ldi r27,hhi8(35000000)
 741 03a0 8093 0000 		sts TaskTwo+23,r24
 742 03a4 9093 0000 		sts TaskTwo+23+1,r25
 743 03a8 A093 0000 		sts TaskTwo+23+2,r26
 744 03ac B093 0000 		sts TaskTwo+23+3,r27
 234:main.c        ****   	TaskTwo.offset.secs = 0;
 746               	.LM76:
 747 03b0 1092 0000 		sts TaskTwo+27,__zero_reg__
 748 03b4 1092 0000 		sts TaskTwo+27+1,__zero_reg__
 749 03b8 1092 0000 		sts TaskTwo+27+2,__zero_reg__
 750 03bc 1092 0000 		sts TaskTwo+27+3,__zero_reg__
 235:main.c        ****   	TaskTwo.offset.nano_secs= 0;
 752               	.LM77:
 753 03c0 1092 0000 		sts TaskTwo+31,__zero_reg__
 754 03c4 1092 0000 		sts TaskTwo+31+1,__zero_reg__
 755 03c8 1092 0000 		sts TaskTwo+31+2,__zero_reg__
 756 03cc 1092 0000 		sts TaskTwo+31+3,__zero_reg__
 236:main.c        **** 
 237:main.c        **** 	// @T3 SRP: Task registers which resources it will use.
 238:main.c        ****   	//          Indices are in order of the created semaphores.
 239:main.c        ****   	TaskTwo.semaphores[0] = true;
 758               	.LM78:
 759 03d0 D092 0000 		sts TaskTwo+35,r13
 240:main.c        **** 
 241:main.c        ****   	nrk_activate_task (&TaskTwo);
 761               	.LM79:
 762 03d4 80E0      		ldi r24,lo8(TaskTwo)
 763 03d6 90E0      		ldi r25,hi8(TaskTwo)
 764 03d8 0E94 0000 		call nrk_activate_task
 242:main.c        **** 
 243:main.c        ****   	TaskThree.task = Task3;
 766               	.LM80:
 767 03dc 80E0      		ldi r24,lo8(gs(Task3))
 768 03de 90E0      		ldi r25,hi8(gs(Task3))
 769 03e0 9093 0000 		sts TaskThree+5+1,r25
 770 03e4 8093 0000 		sts TaskThree+5,r24
 244:main.c        ****   	TaskThree.Ptos = (void *) &Stack3[NRK_APP_STACKSIZE];
 772               	.LM81:
 773 03e8 80E0      		ldi r24,lo8(Stack3+128)
 774 03ea 90E0      		ldi r25,hi8(Stack3+128)
 775 03ec 9093 0000 		sts TaskThree+1+1,r25
 776 03f0 8093 0000 		sts TaskThree+1,r24
 245:main.c        ****   	TaskThree.Pbos = (void *) &Stack3[0];
 778               	.LM82:
 779 03f4 80E0      		ldi r24,lo8(Stack3)
 780 03f6 90E0      		ldi r25,hi8(Stack3)
 781 03f8 9093 0000 		sts TaskThree+3+1,r25
 782 03fc 8093 0000 		sts TaskThree+3,r24
 246:main.c        ****   	//TaskThree.prio = 3;
 247:main.c        ****   	TaskThree.FirstActivation = TRUE;
 784               	.LM83:
 785 0400 D092 0000 		sts TaskThree+7,r13
 248:main.c        ****   	TaskThree.Type = BASIC_TASK;
 787               	.LM84:
 788 0404 D092 0000 		sts TaskThree+9,r13
 249:main.c        ****   	TaskThree.SchType = PREEMPTIVE;
 790               	.LM85:
 791 0408 D092 0000 		sts TaskThree+10,r13
 250:main.c        ****   	TaskThree.period.secs = 0;
 793               	.LM86:
 794 040c 1092 0000 		sts TaskThree+11,__zero_reg__
 795 0410 1092 0000 		sts TaskThree+11+1,__zero_reg__
 796 0414 1092 0000 		sts TaskThree+11+2,__zero_reg__
 797 0418 1092 0000 		sts TaskThree+11+3,__zero_reg__
 251:main.c        ****   	TaskThree.period.nano_secs = 500*NANOS_PER_MS;
 799               	.LM87:
 800 041c 80E0      		ldi r24,lo8(500000000)
 801 041e 95E6      		ldi r25,hi8(500000000)
 802 0420 ADEC      		ldi r26,hlo8(500000000)
 803 0422 BDE1      		ldi r27,hhi8(500000000)
 804 0424 8093 0000 		sts TaskThree+15,r24
 805 0428 9093 0000 		sts TaskThree+15+1,r25
 806 042c A093 0000 		sts TaskThree+15+2,r26
 807 0430 B093 0000 		sts TaskThree+15+3,r27
 252:main.c        ****   	TaskThree.cpu_reserve.secs = 0;
 809               	.LM88:
 810 0434 1092 0000 		sts TaskThree+19,__zero_reg__
 811 0438 1092 0000 		sts TaskThree+19+1,__zero_reg__
 812 043c 1092 0000 		sts TaskThree+19+2,__zero_reg__
 813 0440 1092 0000 		sts TaskThree+19+3,__zero_reg__
 253:main.c        ****   	TaskThree.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
 815               	.LM89:
 816 0444 E092 0000 		sts TaskThree+23,r14
 817 0448 F092 0000 		sts TaskThree+23+1,r15
 818 044c 0093 0000 		sts TaskThree+23+2,r16
 819 0450 1093 0000 		sts TaskThree+23+3,r17
 254:main.c        ****   	TaskThree.offset.secs = 0;
 821               	.LM90:
 822 0454 1092 0000 		sts TaskThree+27,__zero_reg__
 823 0458 1092 0000 		sts TaskThree+27+1,__zero_reg__
 824 045c 1092 0000 		sts TaskThree+27+2,__zero_reg__
 825 0460 1092 0000 		sts TaskThree+27+3,__zero_reg__
 255:main.c        ****   	TaskThree.offset.nano_secs= 0;
 827               	.LM91:
 828 0464 1092 0000 		sts TaskThree+31,__zero_reg__
 829 0468 1092 0000 		sts TaskThree+31+1,__zero_reg__
 830 046c 1092 0000 		sts TaskThree+31+2,__zero_reg__
 831 0470 1092 0000 		sts TaskThree+31+3,__zero_reg__
 256:main.c        ****   	nrk_activate_task (&TaskThree);
 833               	.LM92:
 834 0474 80E0      		ldi r24,lo8(TaskThree)
 835 0476 90E0      		ldi r25,hi8(TaskThree)
 836 0478 0E94 0000 		call nrk_activate_task
 257:main.c        **** 
 258:main.c        ****   	TaskFour.task = Task4;
 838               	.LM93:
 839 047c 80E0      		ldi r24,lo8(gs(Task4))
 840 047e 90E0      		ldi r25,hi8(gs(Task4))
 841 0480 9093 0000 		sts TaskFour+5+1,r25
 842 0484 8093 0000 		sts TaskFour+5,r24
 259:main.c        ****   	TaskFour.Ptos = (void *) &Stack4[NRK_APP_STACKSIZE];
 844               	.LM94:
 845 0488 80E0      		ldi r24,lo8(Stack4+128)
 846 048a 90E0      		ldi r25,hi8(Stack4+128)
 847 048c 9093 0000 		sts TaskFour+1+1,r25
 848 0490 8093 0000 		sts TaskFour+1,r24
 260:main.c        ****   	TaskFour.Pbos = (void *) &Stack4[0];
 850               	.LM95:
 851 0494 80E0      		ldi r24,lo8(Stack4)
 852 0496 90E0      		ldi r25,hi8(Stack4)
 853 0498 9093 0000 		sts TaskFour+3+1,r25
 854 049c 8093 0000 		sts TaskFour+3,r24
 261:main.c        ****   	//TaskFour.prio = 4;
 262:main.c        ****   	TaskFour.FirstActivation = TRUE;
 856               	.LM96:
 857 04a0 D092 0000 		sts TaskFour+7,r13
 263:main.c        ****   	TaskFour.Type = BASIC_TASK;
 859               	.LM97:
 860 04a4 D092 0000 		sts TaskFour+9,r13
 264:main.c        ****   	TaskFour.SchType = PREEMPTIVE;
 862               	.LM98:
 863 04a8 D092 0000 		sts TaskFour+10,r13
 265:main.c        ****   	TaskFour.period.secs = 0;
 865               	.LM99:
 866 04ac 1092 0000 		sts TaskFour+11,__zero_reg__
 867 04b0 1092 0000 		sts TaskFour+11+1,__zero_reg__
 868 04b4 1092 0000 		sts TaskFour+11+2,__zero_reg__
 869 04b8 1092 0000 		sts TaskFour+11+3,__zero_reg__
 266:main.c        ****   	TaskFour.period.nano_secs = 400*NANOS_PER_MS;
 871               	.LM100:
 872 04bc 80E0      		ldi r24,lo8(400000000)
 873 04be 94E8      		ldi r25,hi8(400000000)
 874 04c0 A7ED      		ldi r26,hlo8(400000000)
 875 04c2 B7E1      		ldi r27,hhi8(400000000)
 876 04c4 8093 0000 		sts TaskFour+15,r24
 877 04c8 9093 0000 		sts TaskFour+15+1,r25
 878 04cc A093 0000 		sts TaskFour+15+2,r26
 879 04d0 B093 0000 		sts TaskFour+15+3,r27
 267:main.c        ****   	TaskFour.cpu_reserve.secs = 0;
 881               	.LM101:
 882 04d4 1092 0000 		sts TaskFour+19,__zero_reg__
 883 04d8 1092 0000 		sts TaskFour+19+1,__zero_reg__
 884 04dc 1092 0000 		sts TaskFour+19+2,__zero_reg__
 885 04e0 1092 0000 		sts TaskFour+19+3,__zero_reg__
 268:main.c        ****   	TaskFour.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
 887               	.LM102:
 888 04e4 E092 0000 		sts TaskFour+23,r14
 889 04e8 F092 0000 		sts TaskFour+23+1,r15
 890 04ec 0093 0000 		sts TaskFour+23+2,r16
 891 04f0 1093 0000 		sts TaskFour+23+3,r17
 269:main.c        ****   	TaskFour.offset.secs = 0;
 893               	.LM103:
 894 04f4 1092 0000 		sts TaskFour+27,__zero_reg__
 895 04f8 1092 0000 		sts TaskFour+27+1,__zero_reg__
 896 04fc 1092 0000 		sts TaskFour+27+2,__zero_reg__
 897 0500 1092 0000 		sts TaskFour+27+3,__zero_reg__
 270:main.c        ****   	TaskFour.offset.nano_secs= 0;
 899               	.LM104:
 900 0504 1092 0000 		sts TaskFour+31,__zero_reg__
 901 0508 1092 0000 		sts TaskFour+31+1,__zero_reg__
 902 050c 1092 0000 		sts TaskFour+31+2,__zero_reg__
 903 0510 1092 0000 		sts TaskFour+31+3,__zero_reg__
 271:main.c        ****   	nrk_activate_task (&TaskFour);
 905               	.LM105:
 906 0514 80E0      		ldi r24,lo8(TaskFour)
 907 0516 90E0      		ldi r25,hi8(TaskFour)
 908 0518 0E94 0000 		call nrk_activate_task
 909               	/* epilogue start */
 272:main.c        **** }
 911               	.LM106:
 912 051c DF91      		pop r29
 913 051e CF91      		pop r28
 914 0520 1F91      		pop r17
 915 0522 0F91      		pop r16
 916 0524 FF90      		pop r15
 917 0526 EF90      		pop r14
 918 0528 DF90      		pop r13
 919 052a 0895      		ret
 921               	.Lscope5:
 923               		.stabd	78,0,0
 925               	.global	main
 927               	main:
 928               		.stabd	46,0,0
  63:main.c        **** {
 930               	.LM107:
 931               	.LFBB6:
 932               	/* prologue: function */
 933               	/* frame size = 0 */
 934               	/* stack size = 0 */
 935               	.L__stack_usage = 0
  65:main.c        ****   	nrk_setup_ports();
 937               	.LM108:
 938 052c 0E94 0000 		call nrk_setup_ports
  66:main.c        ****   	nrk_setup_uart(UART_BAUDRATE_115K2);
 940               	.LM109:
 941 0530 87E0      		ldi r24,lo8(7)
 942 0532 90E0      		ldi r25,hi8(7)
 943 0534 0E94 0000 		call nrk_setup_uart
  70:main.c        ****   	nrk_init();
 945               	.LM110:
 946 0538 0E94 0000 		call nrk_init
  72:main.c        ****   	nrk_led_clr(ORANGE_LED);
 948               	.LM111:
 949 053c 80E0      		ldi r24,lo8(0)
 950 053e 90E0      		ldi r25,hi8(0)
 951 0540 0E94 0000 		call nrk_led_clr
  73:main.c        ****   	nrk_led_clr(BLUE_LED);
 953               	.LM112:
 954 0544 8FEF      		ldi r24,lo8(255)
 955 0546 90E0      		ldi r25,hi8(255)
 956 0548 0E94 0000 		call nrk_led_clr
  74:main.c        ****   	nrk_led_set(GREEN_LED);
 958               	.LM113:
 959 054c 81E0      		ldi r24,lo8(1)
 960 054e 90E0      		ldi r25,hi8(1)
 961 0550 0E94 0000 		call nrk_led_set
  75:main.c        ****   	nrk_led_clr(RED_LED);
 963               	.LM114:
 964 0554 82E0      		ldi r24,lo8(2)
 965 0556 90E0      		ldi r25,hi8(2)
 966 0558 0E94 0000 		call nrk_led_clr
  77:main.c        ****   	nrk_time_set(0,0);
 968               	.LM115:
 969 055c 60E0      		ldi r22,lo8(0)
 970 055e 70E0      		ldi r23,hi8(0)
 971 0560 CB01      		movw r24,r22
 972 0562 20E0      		ldi r18,lo8(0)
 973 0564 30E0      		ldi r19,hi8(0)
 974 0566 A901      		movw r20,r18
 975 0568 0E94 0000 		call nrk_time_set
  78:main.c        ****   	nrk_create_taskset ();
 977               	.LM116:
 978 056c 0E94 0000 		call nrk_create_taskset
  80:main.c        ****   	r1 = nrk_sem_create(1,2);
 980               	.LM117:
 981 0570 81E0      		ldi r24,lo8(1)
 982 0572 62E0      		ldi r22,lo8(2)
 983 0574 0E94 0000 		call nrk_sem_create
 984 0578 9093 0000 		sts r1+1,r25
 985 057c 8093 0000 		sts r1,r24
  81:main.c        ****   	r2 = nrk_sem_create(1,2);
 987               	.LM118:
 988 0580 81E0      		ldi r24,lo8(1)
 989 0582 62E0      		ldi r22,lo8(2)
 990 0584 0E94 0000 		call nrk_sem_create
 991 0588 9093 0000 		sts r2+1,r25
 992 058c 8093 0000 		sts r2,r24
  82:main.c        ****   	r3 = nrk_sem_create(1,2);
 994               	.LM119:
 995 0590 81E0      		ldi r24,lo8(1)
 996 0592 62E0      		ldi r22,lo8(2)
 997 0594 0E94 0000 		call nrk_sem_create
 998 0598 9093 0000 		sts r3+1,r25
 999 059c 8093 0000 		sts r3,r24
  83:main.c        ****   	if(!r1 || !r2 || !r3) nrk_kprintf( PSTR("error: sem_create\r\n" ));
 1001               	.LM120:
 1002 05a0 2091 0000 		lds r18,r1
 1003 05a4 3091 0000 		lds r19,r1+1
 1004 05a8 2115      		cp r18,__zero_reg__
 1005 05aa 3105      		cpc r19,__zero_reg__
 1006 05ac 01F0      		breq .L17
  83:main.c        ****   	if(!r1 || !r2 || !r3) nrk_kprintf( PSTR("error: sem_create\r\n" ));
 1008               	.LM121:
 1009 05ae 2091 0000 		lds r18,r2
 1010 05b2 3091 0000 		lds r19,r2+1
 1011 05b6 2115      		cp r18,__zero_reg__
 1012 05b8 3105      		cpc r19,__zero_reg__
 1013 05ba 01F0      		breq .L17
  83:main.c        ****   	if(!r1 || !r2 || !r3) nrk_kprintf( PSTR("error: sem_create\r\n" ));
 1015               	.LM122:
 1016 05bc 0097      		sbiw r24,0
 1017 05be 01F4      		brne .L18
 1018               	.L17:
 1019 05c0 80E0      		ldi r24,lo8(__c.2131)
 1020 05c2 90E0      		ldi r25,hi8(__c.2131)
 1021 05c4 0E94 0000 		call nrk_kprintf
 1022 05c8 00C0      		rjmp .L19
 1023               	.L18:
  84:main.c        **** 	else nrk_start();
 1025               	.LM123:
 1026 05ca 0E94 0000 		call nrk_start
 1027               	.L19:
  87:main.c        **** }
 1029               	.LM124:
 1030 05ce 80E0      		ldi r24,lo8(0)
 1031 05d0 90E0      		ldi r25,hi8(0)
 1032               	/* epilogue start */
 1033 05d2 0895      		ret
 1035               	.Lscope6:
 1037               		.stabd	78,0,0
 1038               		.comm _nrk_signal_list,4,1
 1039               		.comm nrk_system_ceiling,2,1
 1040               		.comm nrk_idle_task_stk,128,1
 1041               		.comm nrk_kernel_stk_ptr,2,1
 1042               		.comm error_task,1,1
 1043               		.comm error_num,1,1
 1044               		.comm _nrk_prev_timer_val,1,1
 1045               		.comm _nrk_time_trigger,1,1
 1046               		.comm app_timer0_callback,2,1
 1047               		.comm app_timer0_prescale,1,1
 1048               		.comm Stack1,128,1
 1049               		.comm TaskOne,40,1
 1050               		.comm Stack2,128,1
 1051               		.comm TaskTwo,40,1
 1052               		.comm Stack3,128,1
 1053               		.comm TaskThree,40,1
 1054               		.comm Stack4,128,1
 1055               		.comm TaskFour,40,1
 1056               		.comm r1,2,1
 1057               		.comm r2,2,1
 1058               		.comm r3,2,1
 1059               		.section	.progmem.data,"a",@progbits
 1062               	__c.2146:
 1063 0000 5432 2065 		.string	"T2 error post\r\n"
 1063      7272 6F72 
 1063      2070 6F73 
 1063      740D 0A00 
 1066               	__c.2144:
 1067 0010 5432 2065 		.string	"T2 error pend\r\n"
 1067      7272 6F72 
 1067      2070 656E 
 1067      640D 0A00 
 1070               	__c.2138:
 1071 0020 5431 2065 		.string	"T1 error post\r\n"
 1071      7272 6F72 
 1071      2070 6F73 
 1071      740D 0A00 
 1074               	__c.2136:
 1075 0030 5431 2065 		.string	"T1 error pend\r\n"
 1075      7272 6F72 
 1075      2070 656E 
 1075      640D 0A00 
 1078               	__c.2131:
 1079 0040 6572 726F 		.string	"error: sem_create\r\n"
 1079      723A 2073 
 1079      656D 5F63 
 1079      7265 6174 
 1079      650D 0A00 
 1101               		.text
 1103               	.Letext0:
 1104               	.global __do_copy_data
 1105               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cchCCBHS.s:2      *ABS*:0000003f __SREG__
     /tmp/cchCCBHS.s:3      *ABS*:0000003e __SP_H__
     /tmp/cchCCBHS.s:4      *ABS*:0000003d __SP_L__
     /tmp/cchCCBHS.s:5      *ABS*:00000034 __CCP__
     /tmp/cchCCBHS.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/cchCCBHS.s:7      *ABS*:00000001 __zero_reg__
     /tmp/cchCCBHS.s:144    .text:00000000 Task4
     /tmp/cchCCBHS.s:197    .text:00000040 Task3
     /tmp/cchCCBHS.s:258    .text:00000080 Task2
                            *COM*:00000002 r1
     /tmp/cchCCBHS.s:1066   .progmem.data:00000010 __c.2144
     /tmp/cchCCBHS.s:1062   .progmem.data:00000000 __c.2146
     /tmp/cchCCBHS.s:404    .text:00000160 Task1
     /tmp/cchCCBHS.s:1074   .progmem.data:00000030 __c.2136
     /tmp/cchCCBHS.s:1070   .progmem.data:00000020 __c.2138
     /tmp/cchCCBHS.s:553    .text:00000244 nrk_create_taskset
                            *COM*:00000028 TaskOne
                            *COM*:00000028 TaskTwo
                            *COM*:00000028 TaskThree
                            *COM*:00000028 TaskFour
                            *COM*:00000080 Stack1
                            *COM*:00000080 Stack2
                            *COM*:00000080 Stack3
                            *COM*:00000080 Stack4
     /tmp/cchCCBHS.s:927    .text:0000052c main
                            *COM*:00000002 r2
                            *COM*:00000002 r3
     /tmp/cchCCBHS.s:1078   .progmem.data:00000040 __c.2131
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000002 nrk_system_ceiling
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale

UNDEFINED SYMBOLS
nrk_spin_wait_us
nrk_wait_until_next_period
nrk_get_pid
printf
nrk_led_toggle
nrk_sem_pend
nrk_kprintf
nrk_sem_post
nrk_activate_task
nrk_setup_ports
nrk_setup_uart
nrk_init
nrk_led_clr
nrk_led_set
nrk_time_set
nrk_sem_create
nrk_start
__do_copy_data
__do_clear_bss
