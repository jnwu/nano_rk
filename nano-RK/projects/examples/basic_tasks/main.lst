   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 142               	.global	Task3
 144               	Task3:
 145               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        **** *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        **** *  All rights reserved.
   5:main.c        **** *
   6:main.c        **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        **** *
  10:main.c        **** *  This program is free software: you can redistribute it and/or modify
  11:main.c        **** *  it under the terms of the GNU General Public License as published by
  12:main.c        **** *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        **** *
  14:main.c        **** *  This program is distributed in the hope that it will be useful,
  15:main.c        **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        **** *  GNU General Public License for more details.
  18:main.c        **** *
  19:main.c        **** *  You should have received a copy of the GNU General Public License
  20:main.c        **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        **** *
  22:main.c        **** *******************************************************************************/
  23:main.c        **** 
  24:main.c        **** #include <nrk.h>
  25:main.c        **** #include <include.h>
  26:main.c        **** #include <ulib.h>
  27:main.c        **** #include <stdio.h>
  28:main.c        **** #include <hal.h>
  29:main.c        **** #include <nrk_error.h>
  30:main.c        **** #include <nrk_timer.h>
  31:main.c        **** #include <nrk_stack_check.h>
  32:main.c        **** #include <nrk_stats.h>
  33:main.c        **** 
  34:main.c        **** 
  35:main.c        **** NRK_STK Stack1[NRK_APP_STACKSIZE];
  36:main.c        **** nrk_task_type TaskOne;
  37:main.c        **** void Task1(void);
  38:main.c        **** 
  39:main.c        **** NRK_STK Stack2[NRK_APP_STACKSIZE];
  40:main.c        **** nrk_task_type TaskTwo;
  41:main.c        **** void Task2 (void);
  42:main.c        **** 
  43:main.c        **** NRK_STK Stack3[NRK_APP_STACKSIZE];
  44:main.c        **** nrk_task_type TaskThree;
  45:main.c        **** void Task3 (void);
  46:main.c        **** 
  47:main.c        **** 
  48:main.c        **** NRK_STK Stack4[NRK_APP_STACKSIZE];
  49:main.c        **** nrk_task_type TaskFour;
  50:main.c        **** void Task4 (void);
  51:main.c        **** 
  52:main.c        **** void nrk_create_taskset();
  53:main.c        **** 
  54:main.c        **** int
  55:main.c        **** main ()
  56:main.c        **** {
  57:main.c        **** 	nrk_setup_ports();
  58:main.c        ****   	nrk_setup_uart(UART_BAUDRATE_115K2);
  59:main.c        **** 
  60:main.c        ****   	nrk_init();
  61:main.c        **** 
  62:main.c        ****   	nrk_led_clr(ORANGE_LED);
  63:main.c        ****   	nrk_led_clr(BLUE_LED);
  64:main.c        ****   	nrk_led_clr(GREEN_LED);
  65:main.c        ****   	nrk_led_clr(RED_LED);
  66:main.c        ****  
  67:main.c        ****   	nrk_time_set(0,0);
  68:main.c        ****   	nrk_create_taskset ();
  69:main.c        ****   	nrk_start();
  70:main.c        ****   
  71:main.c        ****   	return 0;
  72:main.c        **** }
  73:main.c        **** 
  74:main.c        **** void Task1()
  75:main.c        **** {
  76:main.c        **** 	nrk_time_t t;
  77:main.c        **** 	uint16_t cnt;
  78:main.c        **** 	uint8_t val;
  79:main.c        **** 	cnt=0;
  80:main.c        **** 	//nrk_kprintf( PSTR("Nano-RK Version ") );
  81:main.c        **** 	printf( "%d\r\n",NRK_VERSION );
  82:main.c        **** 
  83:main.c        **** 	//printf( "t1[addr]:%u\r\n",NODE_ADDR );
  84:main.c        **** 	//printf( "t1[pid]:%u\r\n",nrk_get_pid());
  85:main.c        **** 	t.secs=5;
  86:main.c        **** 	t.nano_secs=0;
  87:main.c        **** 
  88:main.c        **** 	// setup a software watch dog timer
  89:main.c        **** 	nrk_sw_wdt_init(0, &t, NULL);
  90:main.c        **** 	nrk_sw_wdt_start(0);
  91:main.c        **** 
  92:main.c        ****   	while(1) {
  93:main.c        **** 		// Update watchdog timer
  94:main.c        **** 		nrk_sw_wdt_update(0);
  95:main.c        **** 		nrk_led_toggle(ORANGE_LED);
  96:main.c        **** 
  97:main.c        **** 		// Button logic is inverter 0 means pressed, 1 not pressed
  98:main.c        **** 		//printf( "t1[cnt]:%u\nt1[button_state]:%u\r\n\n",cnt,val );
  99:main.c        **** 		nrk_wait_until_next_period();
 100:main.c        **** 		cnt++;
 101:main.c        **** 	}
 102:main.c        **** }
 103:main.c        **** 
 104:main.c        **** void Task2()
 105:main.c        **** {
 106:main.c        **** 	int16_t cnt;
 107:main.c        ****   	//printf( "t2[pid]:%u\r\n",nrk_get_pid());
 108:main.c        ****  	cnt=0;
 109:main.c        ****  	while(1) {
 110:main.c        **** 		nrk_led_toggle(BLUE_LED);
 111:main.c        **** 		//printf( "t2[cnt]:%d\r\n\n",cnt );
 112:main.c        **** 		//nrk_stats_display_pid(nrk_get_pid());
 113:main.c        **** 		nrk_wait_until_next_period();
 114:main.c        **** 		cnt--;
 115:main.c        **** 	}
 116:main.c        **** }
 117:main.c        **** 
 118:main.c        **** void Task3()
 119:main.c        **** {
 147               	.LM0:
 148               	.LFBB1:
 149               	/* prologue: function */
 150               	/* frame size = 0 */
 151               	/* stack size = 0 */
 152               	.L__stack_usage = 0
 153               	.L2:
 120:main.c        **** 	uint16_t cnt;
 121:main.c        ****  // 	printf( "Task3 PID=%u\r\n",nrk_get_pid());
 122:main.c        ****   	cnt=0;
 123:main.c        ****   	while(1) {
 124:main.c        **** 	nrk_led_toggle(GREEN_LED);
 155               	.LM1:
 156 0000 81E0      		ldi r24,lo8(1)
 157 0002 90E0      		ldi r25,hi8(1)
 158 0004 0E94 0000 		call nrk_led_toggle
 125:main.c        **** //	printf( "Task3 cnt=%u\r\n",cnt );
 126:main.c        **** 	nrk_wait_until_next_period();
 160               	.LM2:
 161 0008 0E94 0000 		call nrk_wait_until_next_period
 162 000c 00C0      		rjmp .L2
 164               	.Lscope1:
 166               		.stabd	78,0,0
 168               	.global	Task2
 170               	Task2:
 171               		.stabd	46,0,0
 105:main.c        **** {
 173               	.LM3:
 174               	.LFBB2:
 175               	/* prologue: function */
 176               	/* frame size = 0 */
 177               	/* stack size = 0 */
 178               	.L__stack_usage = 0
 179               	.L4:
 110:main.c        **** 		nrk_led_toggle(BLUE_LED);
 181               	.LM4:
 182 000e 8FEF      		ldi r24,lo8(255)
 183 0010 90E0      		ldi r25,hi8(255)
 184 0012 0E94 0000 		call nrk_led_toggle
 113:main.c        **** 		nrk_wait_until_next_period();
 186               	.LM5:
 187 0016 0E94 0000 		call nrk_wait_until_next_period
 188 001a 00C0      		rjmp .L4
 190               	.Lscope2:
 192               		.stabd	78,0,0
 193               		.data
 194               	.LC0:
 195 0000 2564 0D0A 		.string	"%d\r\n"
 195      00
 196               		.text
 198               	.global	Task1
 200               	Task1:
 201               		.stabd	46,0,0
  75:main.c        **** {
 203               	.LM6:
 204               	.LFBB3:
 205 001c DF93      		push r29
 206 001e CF93      		push r28
 207 0020 CDB7      		in r28,__SP_L__
 208 0022 DEB7      		in r29,__SP_H__
 209 0024 2897      		sbiw r28,8
 210 0026 0FB6      		in __tmp_reg__,__SREG__
 211 0028 F894      		cli
 212 002a DEBF      		out __SP_H__,r29
 213 002c 0FBE      		out __SREG__,__tmp_reg__
 214 002e CDBF      		out __SP_L__,r28
 215               	/* prologue: function */
 216               	/* frame size = 8 */
 217               	/* stack size = 10 */
 218               	.L__stack_usage = 10
  81:main.c        **** 	printf( "%d\r\n",NRK_VERSION );
 220               	.LM7:
 221 0030 00D0      		rcall .
 222 0032 00D0      		rcall .
 223 0034 80E0      		ldi r24,lo8(.LC0)
 224 0036 90E0      		ldi r25,hi8(.LC0)
 225 0038 EDB7      		in r30,__SP_L__
 226 003a FEB7      		in r31,__SP_H__
 227 003c 9283      		std Z+2,r25
 228 003e 8183      		std Z+1,r24
 229 0040 85E6      		ldi r24,lo8(101)
 230 0042 90E0      		ldi r25,hi8(101)
 231 0044 9483      		std Z+4,r25
 232 0046 8383      		std Z+3,r24
 233 0048 0E94 0000 		call printf
  85:main.c        **** 	t.secs=5;
 235               	.LM8:
 236 004c 85E0      		ldi r24,lo8(5)
 237 004e 90E0      		ldi r25,hi8(5)
 238 0050 A0E0      		ldi r26,hlo8(5)
 239 0052 B0E0      		ldi r27,hhi8(5)
 240 0054 8983      		std Y+1,r24
 241 0056 9A83      		std Y+2,r25
 242 0058 AB83      		std Y+3,r26
 243 005a BC83      		std Y+4,r27
  86:main.c        **** 	t.nano_secs=0;
 245               	.LM9:
 246 005c 1D82      		std Y+5,__zero_reg__
 247 005e 1E82      		std Y+6,__zero_reg__
 248 0060 1F82      		std Y+7,__zero_reg__
 249 0062 1886      		std Y+8,__zero_reg__
  89:main.c        **** 	nrk_sw_wdt_init(0, &t, NULL);
 251               	.LM10:
 252 0064 0F90      		pop __tmp_reg__
 253 0066 0F90      		pop __tmp_reg__
 254 0068 0F90      		pop __tmp_reg__
 255 006a 0F90      		pop __tmp_reg__
 256 006c 80E0      		ldi r24,lo8(0)
 257 006e 90E0      		ldi r25,hi8(0)
 258 0070 BE01      		movw r22,r28
 259 0072 6F5F      		subi r22,lo8(-(1))
 260 0074 7F4F      		sbci r23,hi8(-(1))
 261 0076 40E0      		ldi r20,lo8(0)
 262 0078 50E0      		ldi r21,hi8(0)
 263 007a 0E94 0000 		call nrk_sw_wdt_init
  90:main.c        **** 	nrk_sw_wdt_start(0);
 265               	.LM11:
 266 007e 80E0      		ldi r24,lo8(0)
 267 0080 90E0      		ldi r25,hi8(0)
 268 0082 0E94 0000 		call nrk_sw_wdt_start
 269               	.L6:
 270               	.LBB2:
  94:main.c        **** 		nrk_sw_wdt_update(0);
 272               	.LM12:
 273 0086 80E0      		ldi r24,lo8(0)
 274 0088 90E0      		ldi r25,hi8(0)
 275 008a 0E94 0000 		call nrk_sw_wdt_update
  95:main.c        **** 		nrk_led_toggle(ORANGE_LED);
 277               	.LM13:
 278 008e 80E0      		ldi r24,lo8(0)
 279 0090 90E0      		ldi r25,hi8(0)
 280 0092 0E94 0000 		call nrk_led_toggle
  99:main.c        **** 		nrk_wait_until_next_period();
 282               	.LM14:
 283 0096 0E94 0000 		call nrk_wait_until_next_period
 284 009a 00C0      		rjmp .L6
 285               	.LBE2:
 290               	.Lscope3:
 292               		.stabd	78,0,0
 294               	.global	Task4
 296               	Task4:
 297               		.stabd	46,0,0
 127:main.c        **** 	cnt++;
 128:main.c        **** 	}
 129:main.c        **** }
 130:main.c        **** 
 131:main.c        **** void Task4()
 132:main.c        **** {
 299               	.LM15:
 300               	.LFBB4:
 301               	/* prologue: function */
 302               	/* frame size = 0 */
 303               	/* stack size = 0 */
 304               	.L__stack_usage = 0
 305               	.L8:
 133:main.c        **** 	uint16_t cnt;
 134:main.c        **** 
 135:main.c        ****  //	printf( "Task4 PID=%u\r\n",nrk_get_pid());
 136:main.c        ****  	cnt=0;
 137:main.c        ****   	while(1) {
 138:main.c        **** 		nrk_led_toggle(RED_LED);
 307               	.LM16:
 308 009c 82E0      		ldi r24,lo8(2)
 309 009e 90E0      		ldi r25,hi8(2)
 310 00a0 0E94 0000 		call nrk_led_toggle
 139:main.c        **** //		printf( "Task4 cnt=%u\r\n",cnt );
 140:main.c        **** 		nrk_wait_until_next_period();
 312               	.LM17:
 313 00a4 0E94 0000 		call nrk_wait_until_next_period
 314 00a8 00C0      		rjmp .L8
 316               	.Lscope4:
 318               		.stabd	78,0,0
 319               		.data
 320               	.LC1:
 321 0005 646F 6E65 		.string	"done activate!"
 321      2061 6374 
 321      6976 6174 
 321      6521 00
 322               		.text
 324               	.global	nrk_create_taskset
 326               	nrk_create_taskset:
 327               		.stabd	46,0,0
 141:main.c        **** 		cnt++;
 142:main.c        **** 	}
 143:main.c        **** }
 144:main.c        **** 
 145:main.c        **** void
 146:main.c        **** nrk_create_taskset()
 147:main.c        **** {
 329               	.LM18:
 330               	.LFBB5:
 331 00aa CF92      		push r12
 332 00ac DF92      		push r13
 333 00ae EF92      		push r14
 334 00b0 FF92      		push r15
 335 00b2 0F93      		push r16
 336 00b4 1F93      		push r17
 337 00b6 CF93      		push r28
 338 00b8 DF93      		push r29
 339               	/* prologue: function */
 340               	/* frame size = 0 */
 341               	/* stack size = 8 */
 342               	.L__stack_usage = 8
 148:main.c        **** 	nrk_task_set_entry_function( &TaskOne, Task1);
 344               	.LM19:
 345 00ba C0E0      		ldi r28,lo8(TaskOne)
 346 00bc D0E0      		ldi r29,hi8(TaskOne)
 347 00be CE01      		movw r24,r28
 348 00c0 60E0      		ldi r22,lo8(gs(Task1))
 349 00c2 70E0      		ldi r23,hi8(gs(Task1))
 350 00c4 0E94 0000 		call nrk_task_set_entry_function
 149:main.c        ****   	nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
 352               	.LM20:
 353 00c8 CE01      		movw r24,r28
 354 00ca 60E0      		ldi r22,lo8(Stack1)
 355 00cc 70E0      		ldi r23,hi8(Stack1)
 356 00ce 40E8      		ldi r20,lo8(128)
 357 00d0 50E0      		ldi r21,hi8(128)
 358 00d2 0E94 0000 		call nrk_task_set_stk
 150:main.c        ****   	TaskOne.prio = 3;
 360               	.LM21:
 361 00d6 03E0      		ldi r16,lo8(3)
 362 00d8 0093 0000 		sts TaskOne+8,r16
 151:main.c        ****   	TaskOne.FirstActivation = TRUE;
 364               	.LM22:
 365 00dc 11E0      		ldi r17,lo8(1)
 366 00de 1093 0000 		sts TaskOne+7,r17
 152:main.c        ****   	TaskOne.Type = BASIC_TASK;
 368               	.LM23:
 369 00e2 1093 0000 		sts TaskOne+9,r17
 153:main.c        ****   	TaskOne.SchType = PREEMPTIVE;
 371               	.LM24:
 372 00e6 1093 0000 		sts TaskOne+10,r17
 154:main.c        ****   	TaskOne.period.secs = 0;
 374               	.LM25:
 375 00ea 1092 0000 		sts TaskOne+11,__zero_reg__
 376 00ee 1092 0000 		sts TaskOne+11+1,__zero_reg__
 377 00f2 1092 0000 		sts TaskOne+11+2,__zero_reg__
 378 00f6 1092 0000 		sts TaskOne+11+3,__zero_reg__
 155:main.c        ****   	TaskOne.period.nano_secs = 200*NANOS_PER_MS;
 380               	.LM26:
 381 00fa 80E0      		ldi r24,lo8(200000000)
 382 00fc 92EC      		ldi r25,hi8(200000000)
 383 00fe ABEE      		ldi r26,hlo8(200000000)
 384 0100 BBE0      		ldi r27,hhi8(200000000)
 385 0102 8093 0000 		sts TaskOne+15,r24
 386 0106 9093 0000 		sts TaskOne+15+1,r25
 387 010a A093 0000 		sts TaskOne+15+2,r26
 388 010e B093 0000 		sts TaskOne+15+3,r27
 156:main.c        ****   	TaskOne.cpu_reserve.secs = 50*NANOS_PER_MS;
 390               	.LM27:
 391 0112 80E8      		ldi r24,lo8(50000000)
 392 0114 C82E      		mov r12,r24
 393 0116 80EF      		ldi r24,hi8(50000000)
 394 0118 D82E      		mov r13,r24
 395 011a 8AEF      		ldi r24,hlo8(50000000)
 396 011c E82E      		mov r14,r24
 397 011e 82E0      		ldi r24,hhi8(50000000)
 398 0120 F82E      		mov r15,r24
 399 0122 C092 0000 		sts TaskOne+19,r12
 400 0126 D092 0000 		sts TaskOne+19+1,r13
 401 012a E092 0000 		sts TaskOne+19+2,r14
 402 012e F092 0000 		sts TaskOne+19+3,r15
 157:main.c        ****   	TaskOne.cpu_reserve.nano_secs = 0;
 404               	.LM28:
 405 0132 1092 0000 		sts TaskOne+23,__zero_reg__
 406 0136 1092 0000 		sts TaskOne+23+1,__zero_reg__
 407 013a 1092 0000 		sts TaskOne+23+2,__zero_reg__
 408 013e 1092 0000 		sts TaskOne+23+3,__zero_reg__
 158:main.c        ****   	TaskOne.offset.secs = 0;
 410               	.LM29:
 411 0142 1092 0000 		sts TaskOne+27,__zero_reg__
 412 0146 1092 0000 		sts TaskOne+27+1,__zero_reg__
 413 014a 1092 0000 		sts TaskOne+27+2,__zero_reg__
 414 014e 1092 0000 		sts TaskOne+27+3,__zero_reg__
 159:main.c        ****   	TaskOne.offset.nano_secs= 0;
 416               	.LM30:
 417 0152 1092 0000 		sts TaskOne+31,__zero_reg__
 418 0156 1092 0000 		sts TaskOne+31+1,__zero_reg__
 419 015a 1092 0000 		sts TaskOne+31+2,__zero_reg__
 420 015e 1092 0000 		sts TaskOne+31+3,__zero_reg__
 160:main.c        ****   	nrk_activate_task (&TaskOne);
 422               	.LM31:
 423 0162 CE01      		movw r24,r28
 424 0164 0E94 0000 		call nrk_activate_task
 161:main.c        **** 
 162:main.c        ****   	nrk_task_set_entry_function( &TaskTwo, Task2);
 426               	.LM32:
 427 0168 C0E0      		ldi r28,lo8(TaskTwo)
 428 016a D0E0      		ldi r29,hi8(TaskTwo)
 429 016c CE01      		movw r24,r28
 430 016e 60E0      		ldi r22,lo8(gs(Task2))
 431 0170 70E0      		ldi r23,hi8(gs(Task2))
 432 0172 0E94 0000 		call nrk_task_set_entry_function
 163:main.c        ****   	nrk_task_set_stk( &TaskTwo, Stack2, NRK_APP_STACKSIZE);
 434               	.LM33:
 435 0176 CE01      		movw r24,r28
 436 0178 60E0      		ldi r22,lo8(Stack2)
 437 017a 70E0      		ldi r23,hi8(Stack2)
 438 017c 40E8      		ldi r20,lo8(128)
 439 017e 50E0      		ldi r21,hi8(128)
 440 0180 0E94 0000 		call nrk_task_set_stk
 164:main.c        ****   	TaskTwo.prio = 1;
 442               	.LM34:
 443 0184 1093 0000 		sts TaskTwo+8,r17
 165:main.c        ****   	TaskTwo.FirstActivation = TRUE;
 445               	.LM35:
 446 0188 1093 0000 		sts TaskTwo+7,r17
 166:main.c        ****   	TaskTwo.Type = BASIC_TASK;
 448               	.LM36:
 449 018c 1093 0000 		sts TaskTwo+9,r17
 167:main.c        ****   	TaskTwo.SchType = PREEMPTIVE;
 451               	.LM37:
 452 0190 1093 0000 		sts TaskTwo+10,r17
 168:main.c        ****   	TaskTwo.period.secs = 0;
 454               	.LM38:
 455 0194 1092 0000 		sts TaskTwo+11,__zero_reg__
 456 0198 1092 0000 		sts TaskTwo+11+1,__zero_reg__
 457 019c 1092 0000 		sts TaskTwo+11+2,__zero_reg__
 458 01a0 1092 0000 		sts TaskTwo+11+3,__zero_reg__
 169:main.c        ****   	TaskTwo.period.nano_secs = 150*NANOS_PER_MS;
 460               	.LM39:
 461 01a4 80E8      		ldi r24,lo8(150000000)
 462 01a6 91ED      		ldi r25,hi8(150000000)
 463 01a8 A0EF      		ldi r26,hlo8(150000000)
 464 01aa B8E0      		ldi r27,hhi8(150000000)
 465 01ac 8093 0000 		sts TaskTwo+15,r24
 466 01b0 9093 0000 		sts TaskTwo+15+1,r25
 467 01b4 A093 0000 		sts TaskTwo+15+2,r26
 468 01b8 B093 0000 		sts TaskTwo+15+3,r27
 170:main.c        ****   	TaskTwo.cpu_reserve.secs = 50*NANOS_PER_MS;
 470               	.LM40:
 471 01bc C092 0000 		sts TaskTwo+19,r12
 472 01c0 D092 0000 		sts TaskTwo+19+1,r13
 473 01c4 E092 0000 		sts TaskTwo+19+2,r14
 474 01c8 F092 0000 		sts TaskTwo+19+3,r15
 171:main.c        ****   	TaskTwo.cpu_reserve.nano_secs = 0;
 476               	.LM41:
 477 01cc 1092 0000 		sts TaskTwo+23,__zero_reg__
 478 01d0 1092 0000 		sts TaskTwo+23+1,__zero_reg__
 479 01d4 1092 0000 		sts TaskTwo+23+2,__zero_reg__
 480 01d8 1092 0000 		sts TaskTwo+23+3,__zero_reg__
 172:main.c        ****   	TaskTwo.offset.secs = 0;
 482               	.LM42:
 483 01dc 1092 0000 		sts TaskTwo+27,__zero_reg__
 484 01e0 1092 0000 		sts TaskTwo+27+1,__zero_reg__
 485 01e4 1092 0000 		sts TaskTwo+27+2,__zero_reg__
 486 01e8 1092 0000 		sts TaskTwo+27+3,__zero_reg__
 173:main.c        ****   	TaskTwo.offset.nano_secs = 0;
 488               	.LM43:
 489 01ec 1092 0000 		sts TaskTwo+31,__zero_reg__
 490 01f0 1092 0000 		sts TaskTwo+31+1,__zero_reg__
 491 01f4 1092 0000 		sts TaskTwo+31+2,__zero_reg__
 492 01f8 1092 0000 		sts TaskTwo+31+3,__zero_reg__
 174:main.c        ****   	nrk_activate_task (&TaskTwo);
 494               	.LM44:
 495 01fc CE01      		movw r24,r28
 496 01fe 0E94 0000 		call nrk_activate_task
 175:main.c        **** 
 176:main.c        **** 	nrk_task_set_entry_function( &TaskThree, Task3);
 498               	.LM45:
 499 0202 C0E0      		ldi r28,lo8(TaskThree)
 500 0204 D0E0      		ldi r29,hi8(TaskThree)
 501 0206 CE01      		movw r24,r28
 502 0208 60E0      		ldi r22,lo8(gs(Task3))
 503 020a 70E0      		ldi r23,hi8(gs(Task3))
 504 020c 0E94 0000 		call nrk_task_set_entry_function
 177:main.c        ****   	nrk_task_set_stk( &TaskThree, Stack3, NRK_APP_STACKSIZE);
 506               	.LM46:
 507 0210 CE01      		movw r24,r28
 508 0212 60E0      		ldi r22,lo8(Stack3)
 509 0214 70E0      		ldi r23,hi8(Stack3)
 510 0216 40E8      		ldi r20,lo8(128)
 511 0218 50E0      		ldi r21,hi8(128)
 512 021a 0E94 0000 		call nrk_task_set_stk
 178:main.c        ****   	TaskThree.prio = 3;
 514               	.LM47:
 515 021e 0093 0000 		sts TaskThree+8,r16
 179:main.c        ****   	TaskThree.FirstActivation = TRUE;
 517               	.LM48:
 518 0222 1093 0000 		sts TaskThree+7,r17
 180:main.c        ****   	TaskThree.Type = BASIC_TASK;
 520               	.LM49:
 521 0226 1093 0000 		sts TaskThree+9,r17
 181:main.c        ****   	TaskThree.SchType = PREEMPTIVE;
 523               	.LM50:
 524 022a 1093 0000 		sts TaskThree+10,r17
 182:main.c        ****   	TaskThree.period.secs = 0;
 526               	.LM51:
 527 022e 1092 0000 		sts TaskThree+11,__zero_reg__
 528 0232 1092 0000 		sts TaskThree+11+1,__zero_reg__
 529 0236 1092 0000 		sts TaskThree+11+2,__zero_reg__
 530 023a 1092 0000 		sts TaskThree+11+3,__zero_reg__
 183:main.c        ****   	TaskThree.period.nano_secs = 100*NANOS_PER_MS;
 532               	.LM52:
 533 023e 80E0      		ldi r24,lo8(100000000)
 534 0240 91EE      		ldi r25,hi8(100000000)
 535 0242 A5EF      		ldi r26,hlo8(100000000)
 536 0244 B5E0      		ldi r27,hhi8(100000000)
 537 0246 8093 0000 		sts TaskThree+15,r24
 538 024a 9093 0000 		sts TaskThree+15+1,r25
 539 024e A093 0000 		sts TaskThree+15+2,r26
 540 0252 B093 0000 		sts TaskThree+15+3,r27
 184:main.c        ****   	TaskThree.cpu_reserve.secs = 50*NANOS_PER_MS;
 542               	.LM53:
 543 0256 C092 0000 		sts TaskThree+19,r12
 544 025a D092 0000 		sts TaskThree+19+1,r13
 545 025e E092 0000 		sts TaskThree+19+2,r14
 546 0262 F092 0000 		sts TaskThree+19+3,r15
 185:main.c        ****   	TaskThree.cpu_reserve.nano_secs = 0;
 548               	.LM54:
 549 0266 1092 0000 		sts TaskThree+23,__zero_reg__
 550 026a 1092 0000 		sts TaskThree+23+1,__zero_reg__
 551 026e 1092 0000 		sts TaskThree+23+2,__zero_reg__
 552 0272 1092 0000 		sts TaskThree+23+3,__zero_reg__
 186:main.c        ****   	TaskThree.offset.secs = 0;
 554               	.LM55:
 555 0276 1092 0000 		sts TaskThree+27,__zero_reg__
 556 027a 1092 0000 		sts TaskThree+27+1,__zero_reg__
 557 027e 1092 0000 		sts TaskThree+27+2,__zero_reg__
 558 0282 1092 0000 		sts TaskThree+27+3,__zero_reg__
 187:main.c        ****   	TaskThree.offset.nano_secs= 0;
 560               	.LM56:
 561 0286 1092 0000 		sts TaskThree+31,__zero_reg__
 562 028a 1092 0000 		sts TaskThree+31+1,__zero_reg__
 563 028e 1092 0000 		sts TaskThree+31+2,__zero_reg__
 564 0292 1092 0000 		sts TaskThree+31+3,__zero_reg__
 188:main.c        ****   	nrk_activate_task (&TaskThree);
 566               	.LM57:
 567 0296 CE01      		movw r24,r28
 568 0298 0E94 0000 		call nrk_activate_task
 189:main.c        **** /*
 190:main.c        ****   	nrk_task_set_entry_function( &TaskFour, Task4);
 191:main.c        ****   	nrk_task_set_stk( &TaskFour, Stack4, NRK_APP_STACKSIZE);
 192:main.c        ****   	TaskFour.prio = 3;
 193:main.c        ****   	TaskFour.FirstActivation = TRUE;
 194:main.c        ****   	TaskFour.Type = BASIC_TASK;
 195:main.c        ****   	TaskFour.SchType = PREEMPTIVE;
 196:main.c        ****   	TaskFour.period.secs = 3;
 197:main.c        ****   	TaskFour.period.nano_secs = 0;
 198:main.c        ****   	TaskFour.cpu_reserve.secs = 0;
 199:main.c        ****   	TaskFour.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
 200:main.c        ****   	TaskFour.offset.secs = 0;
 201:main.c        ****   	TaskFour.offset.nano_secs= 0;
 202:main.c        ****   	nrk_activate_task (&TaskFour);
 203:main.c        **** */
 204:main.c        **** 
 205:main.c        **** 	printf("done activate!\n");
 570               	.LM58:
 571 029c 80E0      		ldi r24,lo8(.LC1)
 572 029e 90E0      		ldi r25,hi8(.LC1)
 573 02a0 0E94 0000 		call puts
 574               	/* epilogue start */
 206:main.c        **** }
 576               	.LM59:
 577 02a4 DF91      		pop r29
 578 02a6 CF91      		pop r28
 579 02a8 1F91      		pop r17
 580 02aa 0F91      		pop r16
 581 02ac FF90      		pop r15
 582 02ae EF90      		pop r14
 583 02b0 DF90      		pop r13
 584 02b2 CF90      		pop r12
 585 02b4 0895      		ret
 587               	.Lscope5:
 589               		.stabd	78,0,0
 591               	.global	main
 593               	main:
 594               		.stabd	46,0,0
  56:main.c        **** {
 596               	.LM60:
 597               	.LFBB6:
 598               	/* prologue: function */
 599               	/* frame size = 0 */
 600               	/* stack size = 0 */
 601               	.L__stack_usage = 0
  57:main.c        **** 	nrk_setup_ports();
 603               	.LM61:
 604 02b6 0E94 0000 		call nrk_setup_ports
  58:main.c        ****   	nrk_setup_uart(UART_BAUDRATE_115K2);
 606               	.LM62:
 607 02ba 87E0      		ldi r24,lo8(7)
 608 02bc 90E0      		ldi r25,hi8(7)
 609 02be 0E94 0000 		call nrk_setup_uart
  60:main.c        ****   	nrk_init();
 611               	.LM63:
 612 02c2 0E94 0000 		call nrk_init
  62:main.c        ****   	nrk_led_clr(ORANGE_LED);
 614               	.LM64:
 615 02c6 80E0      		ldi r24,lo8(0)
 616 02c8 90E0      		ldi r25,hi8(0)
 617 02ca 0E94 0000 		call nrk_led_clr
  63:main.c        ****   	nrk_led_clr(BLUE_LED);
 619               	.LM65:
 620 02ce 8FEF      		ldi r24,lo8(255)
 621 02d0 90E0      		ldi r25,hi8(255)
 622 02d2 0E94 0000 		call nrk_led_clr
  64:main.c        ****   	nrk_led_clr(GREEN_LED);
 624               	.LM66:
 625 02d6 81E0      		ldi r24,lo8(1)
 626 02d8 90E0      		ldi r25,hi8(1)
 627 02da 0E94 0000 		call nrk_led_clr
  65:main.c        ****   	nrk_led_clr(RED_LED);
 629               	.LM67:
 630 02de 82E0      		ldi r24,lo8(2)
 631 02e0 90E0      		ldi r25,hi8(2)
 632 02e2 0E94 0000 		call nrk_led_clr
  67:main.c        ****   	nrk_time_set(0,0);
 634               	.LM68:
 635 02e6 60E0      		ldi r22,lo8(0)
 636 02e8 70E0      		ldi r23,hi8(0)
 637 02ea CB01      		movw r24,r22
 638 02ec 20E0      		ldi r18,lo8(0)
 639 02ee 30E0      		ldi r19,hi8(0)
 640 02f0 A901      		movw r20,r18
 641 02f2 0E94 0000 		call nrk_time_set
  68:main.c        ****   	nrk_create_taskset ();
 643               	.LM69:
 644 02f6 0E94 0000 		call nrk_create_taskset
  69:main.c        ****   	nrk_start();
 646               	.LM70:
 647 02fa 0E94 0000 		call nrk_start
  72:main.c        **** }
 649               	.LM71:
 650 02fe 80E0      		ldi r24,lo8(0)
 651 0300 90E0      		ldi r25,hi8(0)
 652               	/* epilogue start */
 653 0302 0895      		ret
 655               	.Lscope6:
 657               		.stabd	78,0,0
 658               		.data
 659               	.LC2:
 660 0014 2564 2000 		.string	"%d "
 661               	.LC3:
 662 0018 4469 6520 		.string	"Die Stack %d\r\n"
 662      5374 6163 
 662      6B20 2564 
 662      0D0A 00
 663               		.text
 666               	.global	kill_stack
 668               	kill_stack:
 669               		.stabd	46,0,0
 207:main.c        **** 
 208:main.c        **** uint8_t kill_stack(uint8_t val)
 209:main.c        **** {
 671               	.LM72:
 672               	.LFBB7:
 673 0304 BF92      		push r11
 674 0306 CF92      		push r12
 675 0308 DF92      		push r13
 676 030a EF92      		push r14
 677 030c FF92      		push r15
 678 030e 0F93      		push r16
 679 0310 1F93      		push r17
 680 0312 DF93      		push r29
 681 0314 CF93      		push r28
 682 0316 CDB7      		in r28,__SP_L__
 683 0318 DEB7      		in r29,__SP_H__
 684 031a 2A97      		sbiw r28,10
 685 031c 0FB6      		in __tmp_reg__,__SREG__
 686 031e F894      		cli
 687 0320 DEBF      		out __SP_H__,r29
 688 0322 0FBE      		out __SREG__,__tmp_reg__
 689 0324 CDBF      		out __SP_L__,r28
 690               	/* prologue: function */
 691               	/* frame size = 10 */
 692               	/* stack size = 19 */
 693               	.L__stack_usage = 19
 694 0326 B82E      		mov r11,r24
 210:main.c        **** 	char bad_memory[10];
 211:main.c        **** 	uint8_t i;
 212:main.c        **** 	
 213:main.c        **** 	for(i=0; i<10; i++ ) bad_memory[i]=i;
 696               	.LM73:
 697 0328 8E01      		movw r16,r28
 698 032a 0F5F      		subi r16,lo8(-(1))
 699 032c 1F4F      		sbci r17,hi8(-(1))
 209:main.c        **** {
 701               	.LM74:
 702 032e F801      		movw r30,r16
 704               	.LM75:
 705 0330 80E0      		ldi r24,lo8(0)
 706               	.L12:
 708               	.LM76:
 709 0332 8193      		st Z+,r24
 710 0334 8F5F      		subi r24,lo8(-(1))
 711 0336 8A30      		cpi r24,lo8(10)
 712 0338 01F4      		brne .L12
 208:main.c        **** uint8_t kill_stack(uint8_t val)
 714               	.LM77:
 715 033a 2BE0      		ldi r18,lo8(11)
 716 033c E22E      		mov r14,r18
 717 033e F12C      		mov r15,__zero_reg__
 718 0340 EC0E      		add r14,r28
 719 0342 FD1E      		adc r15,r29
 214:main.c        **** 	for(i=0; i<10; i++ ) printf( "%d ", bad_memory[i]);
 721               	.LM78:
 722 0344 90E0      		ldi r25,lo8(.LC2)
 723 0346 C92E      		mov r12,r25
 724 0348 90E0      		ldi r25,hi8(.LC2)
 725 034a D92E      		mov r13,r25
 726               	.L13:
 728               	.LM79:
 729 034c D801      		movw r26,r16
 730 034e 8D91      		ld r24,X+
 731 0350 8D01      		movw r16,r26
 732 0352 00D0      		rcall .
 733 0354 00D0      		rcall .
 734 0356 EDB7      		in r30,__SP_L__
 735 0358 FEB7      		in r31,__SP_H__
 736 035a 3196      		adiw r30,1
 737 035c ADB7      		in r26,__SP_L__
 738 035e BEB7      		in r27,__SP_H__
 739 0360 1296      		adiw r26,1+1
 740 0362 DC92      		st X,r13
 741 0364 CE92      		st -X,r12
 742 0366 1197      		sbiw r26,1
 743 0368 8283      		std Z+2,r24
 744 036a 1382      		std Z+3,__zero_reg__
 745 036c 0E94 0000 		call printf
 746 0370 0F90      		pop __tmp_reg__
 747 0372 0F90      		pop __tmp_reg__
 748 0374 0F90      		pop __tmp_reg__
 749 0376 0F90      		pop __tmp_reg__
 750 0378 0E15      		cp r16,r14
 751 037a 1F05      		cpc r17,r15
 752 037c 01F4      		brne .L13
 215:main.c        ****    	printf( "Die Stack %d\r\n",val );
 754               	.LM80:
 755 037e 00D0      		rcall .
 756 0380 00D0      		rcall .
 757 0382 EDB7      		in r30,__SP_L__
 758 0384 FEB7      		in r31,__SP_H__
 759 0386 3196      		adiw r30,1
 760 0388 20E0      		ldi r18,lo8(.LC3)
 761 038a 30E0      		ldi r19,hi8(.LC3)
 762 038c ADB7      		in r26,__SP_L__
 763 038e BEB7      		in r27,__SP_H__
 764 0390 1296      		adiw r26,1+1
 765 0392 3C93      		st X,r19
 766 0394 2E93      		st -X,r18
 767 0396 1197      		sbiw r26,1
 768 0398 B282      		std Z+2,r11
 769 039a 1382      		std Z+3,__zero_reg__
 770 039c 0E94 0000 		call printf
 216:main.c        **** 	
 217:main.c        **** 	if(val>1) kill_stack(val-1);
 772               	.LM81:
 773 03a0 0F90      		pop __tmp_reg__
 774 03a2 0F90      		pop __tmp_reg__
 775 03a4 0F90      		pop __tmp_reg__
 776 03a6 0F90      		pop __tmp_reg__
 777 03a8 BB2D      		mov r27,r11
 778 03aa B230      		cpi r27,lo8(2)
 779 03ac 00F0      		brlo .L14
 781               	.LM82:
 782 03ae 8B2D      		mov r24,r11
 783 03b0 8150      		subi r24,lo8(-(-1))
 784 03b2 0E94 0000 		call kill_stack
 785               	.L14:
 218:main.c        **** 	return 0;
 219:main.c        **** }
 787               	.LM83:
 788 03b6 80E0      		ldi r24,lo8(0)
 789               	/* epilogue start */
 790 03b8 2A96      		adiw r28,10
 791 03ba 0FB6      		in __tmp_reg__,__SREG__
 792 03bc F894      		cli
 793 03be DEBF      		out __SP_H__,r29
 794 03c0 0FBE      		out __SREG__,__tmp_reg__
 795 03c2 CDBF      		out __SP_L__,r28
 796 03c4 CF91      		pop r28
 797 03c6 DF91      		pop r29
 798 03c8 1F91      		pop r17
 799 03ca 0F91      		pop r16
 800 03cc FF90      		pop r15
 801 03ce EF90      		pop r14
 802 03d0 DF90      		pop r13
 803 03d2 CF90      		pop r12
 804 03d4 BF90      		pop r11
 805 03d6 0895      		ret
 811               	.Lscope7:
 813               		.stabd	78,0,0
 814               		.comm _nrk_signal_list,4,1
 815               		.comm nrk_idle_task_stk,128,1
 816               		.comm nrk_kernel_stk_ptr,2,1
 817               		.comm error_task,1,1
 818               		.comm error_num,1,1
 819               		.comm _nrk_prev_timer_val,1,1
 820               		.comm _nrk_time_trigger,1,1
 821               		.comm app_timer0_callback,2,1
 822               		.comm app_timer0_prescale,1,1
 823               		.comm cur_task_stats,150,1
 824               		.comm _nrk_stats_sleep_time,8,1
 825               		.comm Stack1,128,1
 826               		.comm TaskOne,35,1
 827               		.comm Stack2,128,1
 828               		.comm TaskTwo,35,1
 829               		.comm Stack3,128,1
 830               		.comm TaskThree,35,1
 831               		.comm Stack4,128,1
 832               		.comm TaskFour,35,1
 853               	.Letext0:
 854               	.global __do_copy_data
 855               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cckvTb5k.s:2      *ABS*:0000003f __SREG__
     /tmp/cckvTb5k.s:3      *ABS*:0000003e __SP_H__
     /tmp/cckvTb5k.s:4      *ABS*:0000003d __SP_L__
     /tmp/cckvTb5k.s:5      *ABS*:00000034 __CCP__
     /tmp/cckvTb5k.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/cckvTb5k.s:7      *ABS*:00000001 __zero_reg__
     /tmp/cckvTb5k.s:144    .text:00000000 Task3
     /tmp/cckvTb5k.s:170    .text:0000000e Task2
     /tmp/cckvTb5k.s:200    .text:0000001c Task1
     /tmp/cckvTb5k.s:296    .text:0000009c Task4
     /tmp/cckvTb5k.s:326    .text:000000aa nrk_create_taskset
                            *COM*:00000023 TaskOne
                            *COM*:00000080 Stack1
                            *COM*:00000023 TaskTwo
                            *COM*:00000080 Stack2
                            *COM*:00000023 TaskThree
                            *COM*:00000080 Stack3
     /tmp/cckvTb5k.s:593    .text:000002b6 main
     /tmp/cckvTb5k.s:668    .text:00000304 kill_stack
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale
                            *COM*:00000096 cur_task_stats
                            *COM*:00000008 _nrk_stats_sleep_time
                            *COM*:00000080 Stack4
                            *COM*:00000023 TaskFour

UNDEFINED SYMBOLS
nrk_led_toggle
nrk_wait_until_next_period
printf
nrk_sw_wdt_init
nrk_sw_wdt_start
nrk_sw_wdt_update
nrk_task_set_entry_function
nrk_task_set_stk
nrk_activate_task
puts
nrk_setup_ports
nrk_setup_uart
nrk_init
nrk_led_clr
nrk_time_set
nrk_start
__do_copy_data
__do_clear_bss
