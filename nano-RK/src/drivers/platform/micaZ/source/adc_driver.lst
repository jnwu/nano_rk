   1               		.file	"adc_driver.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
  72               	.global	adc_init
  74               	adc_init:
  75               		.stabd	46,0,0
   1:../../../src/drivers/platform/micaZ/source/adc_driver.c **** /******************************************************************************
   2:../../../src/drivers/platform/micaZ/source/adc_driver.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../../src/drivers/platform/micaZ/source/adc_driver.c **** *  Copyright (C) 2011 Technische Universität München (www.vmi.ei.tum.de)
   4:../../../src/drivers/platform/micaZ/source/adc_driver.c **** *  All rights reserved.
   5:../../../src/drivers/platform/micaZ/source/adc_driver.c **** *
   6:../../../src/drivers/platform/micaZ/source/adc_driver.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../../src/drivers/platform/micaZ/source/adc_driver.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../../src/drivers/platform/micaZ/source/adc_driver.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../../src/drivers/platform/micaZ/source/adc_driver.c **** *
  10:../../../src/drivers/platform/micaZ/source/adc_driver.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../../src/drivers/platform/micaZ/source/adc_driver.c **** *  it under the terms of the GNU General Public License as published by
  12:../../../src/drivers/platform/micaZ/source/adc_driver.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../../src/drivers/platform/micaZ/source/adc_driver.c **** *
  14:../../../src/drivers/platform/micaZ/source/adc_driver.c **** *  This program is distributed in the hope that it will be useful,
  15:../../../src/drivers/platform/micaZ/source/adc_driver.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../../src/drivers/platform/micaZ/source/adc_driver.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../../src/drivers/platform/micaZ/source/adc_driver.c **** *  GNU General Public License for more details.
  18:../../../src/drivers/platform/micaZ/source/adc_driver.c **** *
  19:../../../src/drivers/platform/micaZ/source/adc_driver.c **** *  You should have received a copy of the GNU General Public License
  20:../../../src/drivers/platform/micaZ/source/adc_driver.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../../src/drivers/platform/micaZ/source/adc_driver.c **** *
  22:../../../src/drivers/platform/micaZ/source/adc_driver.c **** *
  23:../../../src/drivers/platform/micaZ/source/adc_driver.c **** *  ATmega128 analog to digital converter driver
  24:../../../src/drivers/platform/micaZ/source/adc_driver.c **** *
  25:../../../src/drivers/platform/micaZ/source/adc_driver.c **** *  Contributing Authors (specific to this file):
  26:../../../src/drivers/platform/micaZ/source/adc_driver.c **** *  Author: Peter Diener
  27:../../../src/drivers/platform/micaZ/source/adc_driver.c **** *
  28:../../../src/drivers/platform/micaZ/source/adc_driver.c **** ***************************************************************************************/
  29:../../../src/drivers/platform/micaZ/source/adc_driver.c **** 
  30:../../../src/drivers/platform/micaZ/source/adc_driver.c **** 
  31:../../../src/drivers/platform/micaZ/source/adc_driver.c **** 
  32:../../../src/drivers/platform/micaZ/source/adc_driver.c **** #define F_CPU 7372800
  33:../../../src/drivers/platform/micaZ/source/adc_driver.c **** 
  34:../../../src/drivers/platform/micaZ/source/adc_driver.c **** #include "adc_driver.h"
  35:../../../src/drivers/platform/micaZ/source/adc_driver.c **** #include <avr/io.h>
  36:../../../src/drivers/platform/micaZ/source/adc_driver.c **** #include <util/delay.h>
  37:../../../src/drivers/platform/micaZ/source/adc_driver.c **** 
  38:../../../src/drivers/platform/micaZ/source/adc_driver.c **** 
  39:../../../src/drivers/platform/micaZ/source/adc_driver.c **** 
  40:../../../src/drivers/platform/micaZ/source/adc_driver.c **** void adc_init()
  41:../../../src/drivers/platform/micaZ/source/adc_driver.c **** {
  77               	.LM0:
  78               	.LFBB1:
  79 0000 DF93      		push r29
  80 0002 CF93      		push r28
  81 0004 00D0      		rcall .
  82 0006 CDB7      		in r28,__SP_L__
  83 0008 DEB7      		in r29,__SP_H__
  84               	/* prologue: function */
  85               	/* frame size = 2 */
  86               	/* stack size = 4 */
  87               	.L__stack_usage = 4
  42:../../../src/drivers/platform/micaZ/source/adc_driver.c ****   volatile unsigned int dummy;
  43:../../../src/drivers/platform/micaZ/source/adc_driver.c **** 
  44:../../../src/drivers/platform/micaZ/source/adc_driver.c ****   ADMUX = (0 << REFS1) | (1 << REFS0);      						// Vcc is reference
  89               	.LM1:
  90 000a 80E4      		ldi r24,lo8(64)
  91 000c 87B9      		out 39-32,r24
  45:../../../src/drivers/platform/micaZ/source/adc_driver.c ****   ADCSRA = (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0);       // Prescaler = 64
  93               	.LM2:
  94 000e 86E0      		ldi r24,lo8(6)
  95 0010 86B9      		out 38-32,r24
  46:../../../src/drivers/platform/micaZ/source/adc_driver.c ****   ADCSRA |= (1 << ADEN);                								// ADC on
  97               	.LM3:
  98 0012 379A      		sbi 38-32,7
  47:../../../src/drivers/platform/micaZ/source/adc_driver.c **** 
  48:../../../src/drivers/platform/micaZ/source/adc_driver.c **** 	// One dummy read after init
  49:../../../src/drivers/platform/micaZ/source/adc_driver.c ****   ADCSRA |= (1<<ADSC);
 100               	.LM4:
 101 0014 369A      		sbi 38-32,6
 102               	.L2:
  50:../../../src/drivers/platform/micaZ/source/adc_driver.c ****   while (ADCSRA & (1<<ADSC));
 104               	.LM5:
 105 0016 3699      		sbic 38-32,6
 106 0018 00C0      		rjmp .L2
  51:../../../src/drivers/platform/micaZ/source/adc_driver.c ****   dummy = ADCW;
 108               	.LM6:
 109 001a 84B1      		in r24,36-32
 110 001c 95B1      		in r25,36+1-32
 111 001e 9A83      		std Y+2,r25
 112 0020 8983      		std Y+1,r24
 113               	/* epilogue start */
  52:../../../src/drivers/platform/micaZ/source/adc_driver.c **** }
 115               	.LM7:
 116 0022 0F90      		pop __tmp_reg__
 117 0024 0F90      		pop __tmp_reg__
 118 0026 CF91      		pop r28
 119 0028 DF91      		pop r29
 120 002a 0895      		ret
 125               	.Lscope1:
 127               		.stabd	78,0,0
 129               	.global	adc_Powersave
 131               	adc_Powersave:
 132               		.stabd	46,0,0
  53:../../../src/drivers/platform/micaZ/source/adc_driver.c **** 
  54:../../../src/drivers/platform/micaZ/source/adc_driver.c **** 
  55:../../../src/drivers/platform/micaZ/source/adc_driver.c **** 
  56:../../../src/drivers/platform/micaZ/source/adc_driver.c **** // If ADC should be used after a powersave period, call init again before starting a conversion
  57:../../../src/drivers/platform/micaZ/source/adc_driver.c **** void adc_Powersave()
  58:../../../src/drivers/platform/micaZ/source/adc_driver.c **** {
 134               	.LM8:
 135               	.LFBB2:
 136               	/* prologue: function */
 137               	/* frame size = 0 */
 138               	/* stack size = 0 */
 139               	.L__stack_usage = 0
  59:../../../src/drivers/platform/micaZ/source/adc_driver.c **** 	ADCSRA &= ~(1 << ADEN);
 141               	.LM9:
 142 002c 3798      		cbi 38-32,7
 143               	/* epilogue start */
  60:../../../src/drivers/platform/micaZ/source/adc_driver.c **** }
 145               	.LM10:
 146 002e 0895      		ret
 148               	.Lscope2:
 150               		.stabd	78,0,0
 153               	.global	adc_GetChannel
 155               	adc_GetChannel:
 156               		.stabd	46,0,0
  61:../../../src/drivers/platform/micaZ/source/adc_driver.c **** 
  62:../../../src/drivers/platform/micaZ/source/adc_driver.c **** 
  63:../../../src/drivers/platform/micaZ/source/adc_driver.c **** 
  64:../../../src/drivers/platform/micaZ/source/adc_driver.c **** unsigned int adc_GetChannel(unsigned char ch)
  65:../../../src/drivers/platform/micaZ/source/adc_driver.c **** {
 158               	.LM11:
 159               	.LFBB3:
 160               	/* prologue: function */
 161               	/* frame size = 0 */
 162               	/* stack size = 0 */
 163               	.L__stack_usage = 0
  66:../../../src/drivers/platform/micaZ/source/adc_driver.c ****   ADMUX = (ADMUX & 0b11100000) | (ch & 0b00011111);	// Select channel
 165               	.LM12:
 166 0030 97B1      		in r25,39-32
 167 0032 8F71      		andi r24,lo8(31)
 168 0034 907E      		andi r25,lo8(-32)
 169 0036 892B      		or r24,r25
 170 0038 87B9      		out 39-32,r24
  67:../../../src/drivers/platform/micaZ/source/adc_driver.c ****   ADCSRA |= (1 << ADSC);										// Start a single conversion
 172               	.LM13:
 173 003a 369A      		sbi 38-32,6
 174               	.L6:
  68:../../../src/drivers/platform/micaZ/source/adc_driver.c ****   while (ADCSRA & (1 << ADSC));  							// wait until conversion result is available
 176               	.LM14:
 177 003c 3699      		sbic 38-32,6
 178 003e 00C0      		rjmp .L6
  69:../../../src/drivers/platform/micaZ/source/adc_driver.c ****   return ADCW;
 180               	.LM15:
 181 0040 24B1      		in r18,36-32
 182 0042 35B1      		in r19,36+1-32
  70:../../../src/drivers/platform/micaZ/source/adc_driver.c **** }
 184               	.LM16:
 185 0044 C901      		movw r24,r18
 186               	/* epilogue start */
 187 0046 0895      		ret
 189               	.Lscope3:
 191               		.stabd	78,0,0
 193               	.global	adc_GetBatteryVoltage
 195               	adc_GetBatteryVoltage:
 196               		.stabd	46,0,0
  71:../../../src/drivers/platform/micaZ/source/adc_driver.c **** 
  72:../../../src/drivers/platform/micaZ/source/adc_driver.c **** 
  73:../../../src/drivers/platform/micaZ/source/adc_driver.c **** float adc_GetBatteryVoltage()
  74:../../../src/drivers/platform/micaZ/source/adc_driver.c **** {
 198               	.LM17:
 199               	.LFBB4:
 200               	/* prologue: function */
 201               	/* frame size = 0 */
 202               	/* stack size = 0 */
 203               	.L__stack_usage = 0
  75:../../../src/drivers/platform/micaZ/source/adc_driver.c **** // adc channel 30 is connected to the internal 1.23 V reference
  76:../../../src/drivers/platform/micaZ/source/adc_driver.c **** 	unsigned int adValue;
  77:../../../src/drivers/platform/micaZ/source/adc_driver.c **** 
  78:../../../src/drivers/platform/micaZ/source/adc_driver.c **** 	adValue = adc_GetChannel(30);
 205               	.LM18:
 206 0048 8EE1      		ldi r24,lo8(30)
 207 004a 0E94 0000 		call adc_GetChannel
  79:../../../src/drivers/platform/micaZ/source/adc_driver.c **** 
  80:../../../src/drivers/platform/micaZ/source/adc_driver.c **** 	return (1.23 * 1024.0 / (float)adValue);
 209               	.LM19:
 210 004e BC01      		movw r22,r24
 211 0050 80E0      		ldi r24,lo8(0)
 212 0052 90E0      		ldi r25,hi8(0)
 213 0054 0E94 0000 		call __floatunsisf
 214 0058 9B01      		movw r18,r22
 215 005a AC01      		movw r20,r24
 216 005c 64EA      		ldi r22,lo8(0x449d70a4)
 217 005e 70E7      		ldi r23,hi8(0x449d70a4)
 218 0060 8DE9      		ldi r24,hlo8(0x449d70a4)
 219 0062 94E4      		ldi r25,hhi8(0x449d70a4)
 220 0064 0E94 0000 		call __divsf3
 221               	/* epilogue start */
  81:../../../src/drivers/platform/micaZ/source/adc_driver.c **** }
 223               	.LM20:
 224 0068 0895      		ret
 226               	.Lscope4:
 228               		.stabd	78,0,0
 230               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 adc_driver.c
     /tmp/ccVFuQ1J.s:2      *ABS*:0000003f __SREG__
     /tmp/ccVFuQ1J.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccVFuQ1J.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccVFuQ1J.s:5      *ABS*:00000034 __CCP__
     /tmp/ccVFuQ1J.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccVFuQ1J.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccVFuQ1J.s:74     .text:00000000 adc_init
     /tmp/ccVFuQ1J.s:131    .text:0000002c adc_Powersave
     /tmp/ccVFuQ1J.s:155    .text:00000030 adc_GetChannel
     /tmp/ccVFuQ1J.s:195    .text:00000048 adc_GetBatteryVoltage

UNDEFINED SYMBOLS
__floatunsisf
__divsf3
