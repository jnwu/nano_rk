   1               		.file	"i2c_driver.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
  72               	.global	i2c_init
  74               	i2c_init:
  75               		.stabd	46,0,0
   1:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** /******************************************************************************
   2:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** *  Copyright (C) 2011 Technische Universität München (www.vmi.ei.tum.de)
   4:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** *  All rights reserved.
   5:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** *
   6:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** *
  10:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** *  it under the terms of the GNU General Public License as published by
  12:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** *
  14:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** *  This program is distributed in the hope that it will be useful,
  15:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** *  GNU General Public License for more details.
  18:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** *
  19:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** *  You should have received a copy of the GNU General Public License
  20:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** *
  22:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** *
  23:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** *  I²C driver for ATmega128 as a Master
  24:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** *
  25:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** *  Contributing Authors (specific to this file):
  26:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** *  Author: Peter Diener
  27:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** *
  28:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** ***************************************************************************************/
  29:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
  30:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
  31:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
  32:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** #include <avr/io.h>
  33:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** #include <util/twi.h>
  34:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** #include "i2c_driver.h"
  35:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
  36:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
  37:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
  38:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** // inits to ~300 kHz bus frequency
  39:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** void i2c_init()
  40:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** {
  77               	.LM0:
  78               	.LFBB1:
  79               	/* prologue: function */
  80               	/* frame size = 0 */
  81               	/* stack size = 0 */
  82               	.L__stack_usage = 0
  41:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	// Set up clock prescaler
  42:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	TWSR |= (0 << TWPS1) | (0 << TWPS0);	// Prescaler = 1
  84               	.LM1:
  85 0000 E1E7      		ldi r30,lo8(113)
  86 0002 F0E0      		ldi r31,hi8(113)
  87 0004 8081      		ld r24,Z
  88 0006 8083      		st Z,r24
  43:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	// Set up clock divider
  44:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	TWBR = 1;
  90               	.LM2:
  91 0008 81E0      		ldi r24,lo8(1)
  92 000a 8093 7000 		sts 112,r24
  45:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	// Set up module
  46:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	TWCR = (1 << TWEN);	// I2C on, no interrupts
  94               	.LM3:
  95 000e 84E0      		ldi r24,lo8(4)
  96 0010 8093 7400 		sts 116,r24
  97               	/* epilogue start */
  47:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** }
  99               	.LM4:
 100 0014 0895      		ret
 102               	.Lscope1:
 104               		.stabd	78,0,0
 106               	.global	i2c_waitForInterruptFlag
 108               	i2c_waitForInterruptFlag:
 109               		.stabd	46,0,0
  48:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
  49:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
  50:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
  51:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** void i2c_waitForInterruptFlag()
  52:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** {
 111               	.LM5:
 112               	.LFBB2:
 113               	/* prologue: function */
 114               	/* frame size = 0 */
 115               	/* stack size = 0 */
 116               	.L__stack_usage = 0
 117               	.L3:
  53:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	while (! (TWCR & (1 << TWINT)));
 119               	.LM6:
 120 0016 8091 7400 		lds r24,116
 121 001a 87FF      		sbrs r24,7
 122 001c 00C0      		rjmp .L3
 123               	/* epilogue start */
  54:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** }
 125               	.LM7:
 126 001e 0895      		ret
 128               	.Lscope2:
 130               		.stabd	78,0,0
 132               	.global	i2c_actionStart
 134               	i2c_actionStart:
 135               		.stabd	46,0,0
  55:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
  56:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
  57:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
  58:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** void i2c_actionStart()
  59:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** {
 137               	.LM8:
 138               	.LFBB3:
 139               	/* prologue: function */
 140               	/* frame size = 0 */
 141               	/* stack size = 0 */
 142               	.L__stack_usage = 0
  60:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	TWCR |= (1 << TWINT);		// clearing the interrupt flag will start the next action
 144               	.LM9:
 145 0020 E4E7      		ldi r30,lo8(116)
 146 0022 F0E0      		ldi r31,hi8(116)
 147 0024 8081      		ld r24,Z
 148 0026 8068      		ori r24,lo8(-128)
 149 0028 8083      		st Z,r24
 150               	/* epilogue start */
  61:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** }
 152               	.LM10:
 153 002a 0895      		ret
 155               	.Lscope3:
 157               		.stabd	78,0,0
 159               	.global	i2c_start
 161               	i2c_start:
 162               		.stabd	46,0,0
  62:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
  63:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
  64:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
  65:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** void i2c_start()
  66:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** {
 164               	.LM11:
 165               	.LFBB4:
 166 002c CF93      		push r28
 167 002e DF93      		push r29
 168               	/* prologue: function */
 169               	/* frame size = 0 */
 170               	/* stack size = 2 */
 171               	.L__stack_usage = 2
  67:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	TWCR |= (1 << TWSTA);			// Set start condition flag
 173               	.LM12:
 174 0030 C4E7      		ldi r28,lo8(116)
 175 0032 D0E0      		ldi r29,hi8(116)
 176 0034 8881      		ld r24,Y
 177 0036 8062      		ori r24,lo8(32)
 178 0038 8883      		st Y,r24
  68:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	i2c_actionStart();				// Send START
 180               	.LM13:
 181 003a 0E94 0000 		call i2c_actionStart
  69:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	i2c_waitForInterruptFlag();	// Wait until START is sent
 183               	.LM14:
 184 003e 0E94 0000 		call i2c_waitForInterruptFlag
  70:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	TWCR &= ~(1 << TWSTA);			// Clear start condition flag
 186               	.LM15:
 187 0042 8881      		ld r24,Y
 188 0044 8F7D      		andi r24,lo8(-33)
 189 0046 8883      		st Y,r24
 190               	/* epilogue start */
  71:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** }
 192               	.LM16:
 193 0048 DF91      		pop r29
 194 004a CF91      		pop r28
 195 004c 0895      		ret
 197               	.Lscope4:
 199               		.stabd	78,0,0
 201               	.global	i2c_stop
 203               	i2c_stop:
 204               		.stabd	46,0,0
  72:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
  73:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
  74:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
  75:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** void i2c_stop()
  76:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** {
 206               	.LM17:
 207               	.LFBB5:
 208               	/* prologue: function */
 209               	/* frame size = 0 */
 210               	/* stack size = 0 */
 211               	.L__stack_usage = 0
  77:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	TWCR |= (1 << TWSTO);			// Set stop condition flag - this will be cleared automatically
 213               	.LM18:
 214 004e 8091 7400 		lds r24,116
 215 0052 8061      		ori r24,lo8(16)
 216 0054 8093 7400 		sts 116,r24
  78:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	i2c_actionStart();				// Send STOP
 218               	.LM19:
 219 0058 0E94 0000 		call i2c_actionStart
 220               	.L8:
  79:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	while (TWCR & (1 << TWSTO));	// Wait until STOP is sent
 222               	.LM20:
 223 005c 8091 7400 		lds r24,116
 224 0060 84FD      		sbrc r24,4
 225 0062 00C0      		rjmp .L8
 226               	/* epilogue start */
  80:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** }
 228               	.LM21:
 229 0064 0895      		ret
 231               	.Lscope5:
 233               		.stabd	78,0,0
 236               	.global	i2c_send
 238               	i2c_send:
 239               		.stabd	46,0,0
  81:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
  82:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
  83:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
  84:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** // Returns 0 if ACK has been received, else 1
  85:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** unsigned char i2c_send(unsigned char data)
  86:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** {
 241               	.LM22:
 242               	.LFBB6:
 243               	/* prologue: function */
 244               	/* frame size = 0 */
 245               	/* stack size = 0 */
 246               	.L__stack_usage = 0
  87:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	TWDR = data;
 248               	.LM23:
 249 0066 8093 7300 		sts 115,r24
  88:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	i2c_actionStart();
 251               	.LM24:
 252 006a 0E94 0000 		call i2c_actionStart
  89:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	i2c_waitForInterruptFlag();
 254               	.LM25:
 255 006e 0E94 0000 		call i2c_waitForInterruptFlag
  90:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	if ((TWSR & 0xF8) == TW_MT_DATA_ACK) return 0;			// Data byte ACK
 257               	.LM26:
 258 0072 8091 7100 		lds r24,113
 259 0076 887F      		andi r24,lo8(-8)
 260 0078 8832      		cpi r24,lo8(40)
 261 007a 01F0      		breq .L13
  91:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	else if ((TWSR & 0xF8) == TW_MT_SLA_ACK) return 0;	// Address byte ACK
 263               	.LM27:
 264 007c 9091 7100 		lds r25,113
 265 0080 987F      		andi r25,lo8(-8)
  90:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	if ((TWSR & 0xF8) == TW_MT_DATA_ACK) return 0;			// Data byte ACK
 267               	.LM28:
 268 0082 81E0      		ldi r24,lo8(1)
 269 0084 9831      		cpi r25,lo8(24)
 270 0086 01F4      		brne .L11
 271 0088 80E0      		ldi r24,lo8(0)
 272 008a 0895      		ret
 273               	.L13:
 274 008c 80E0      		ldi r24,lo8(0)
 275               	.L11:
  92:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	else return 1;
  93:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** }
 277               	.LM29:
 278 008e 0895      		ret
 280               	.Lscope6:
 282               		.stabd	78,0,0
 285               	.global	i2c_receive
 287               	i2c_receive:
 288               		.stabd	46,0,0
  94:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
  95:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
  96:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
  97:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** // if ack == 0, no-ACK will be sent
  98:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** unsigned char i2c_receive(unsigned int ack)
  99:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** {
 290               	.LM30:
 291               	.LFBB7:
 292               	/* prologue: function */
 293               	/* frame size = 0 */
 294               	/* stack size = 0 */
 295               	.L__stack_usage = 0
 100:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	if (ack) TWCR |= (1 << TWEA);	// ACK
 297               	.LM31:
 298 0090 0097      		sbiw r24,0
 299 0092 01F0      		breq .L15
 301               	.LM32:
 302 0094 8091 7400 		lds r24,116
 303 0098 8064      		ori r24,lo8(64)
 304 009a 00C0      		rjmp .L17
 305               	.L15:
 101:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	else 		TWCR &= ~(1 << TWEA);	// no ACK
 307               	.LM33:
 308 009c 8091 7400 		lds r24,116
 309 00a0 8F7B      		andi r24,lo8(-65)
 310               	.L17:
 311 00a2 8093 7400 		sts 116,r24
 102:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	i2c_actionStart();					// Start receiving
 313               	.LM34:
 314 00a6 0E94 0000 		call i2c_actionStart
 103:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	i2c_waitForInterruptFlag();		// Wait until byte is received
 316               	.LM35:
 317 00aa 0E94 0000 		call i2c_waitForInterruptFlag
 104:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	return TWDR;
 319               	.LM36:
 320 00ae 8091 7300 		lds r24,115
 321               	/* epilogue start */
 105:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** }
 323               	.LM37:
 324 00b2 0895      		ret
 326               	.Lscope7:
 328               		.stabd	78,0,0
 331               	.global	i2c_controlByte_RX
 333               	i2c_controlByte_RX:
 334               		.stabd	46,0,0
 106:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
 107:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
 108:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
 109:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** // This initiates an rx transfer with START + SLA + R
 110:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** void i2c_controlByte_RX(unsigned char address)
 111:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** {
 336               	.LM38:
 337               	.LFBB8:
 338 00b4 DF93      		push r29
 339 00b6 CF93      		push r28
 340 00b8 0F92      		push __tmp_reg__
 341 00ba CDB7      		in r28,__SP_L__
 342 00bc DEB7      		in r29,__SP_H__
 343               	/* prologue: function */
 344               	/* frame size = 1 */
 345               	/* stack size = 3 */
 346               	.L__stack_usage = 3
 112:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	i2c_start();
 348               	.LM39:
 349 00be 8983      		std Y+1,r24
 350 00c0 0E94 0000 		call i2c_start
 113:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	i2c_send((address << 1) | 0x01);
 352               	.LM40:
 353 00c4 8981      		ldd r24,Y+1
 354 00c6 880F      		lsl r24
 355 00c8 8160      		ori r24,lo8(1)
 356 00ca 0E94 0000 		call i2c_send
 357               	/* epilogue start */
 114:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** }
 359               	.LM41:
 360 00ce 0F90      		pop __tmp_reg__
 361 00d0 CF91      		pop r28
 362 00d2 DF91      		pop r29
 363 00d4 0895      		ret
 365               	.Lscope8:
 367               		.stabd	78,0,0
 370               	.global	i2c_controlByte_TX
 372               	i2c_controlByte_TX:
 373               		.stabd	46,0,0
 115:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
 116:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
 117:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 
 118:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** // This initiates an tx transfer with START + SLA
 119:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** void i2c_controlByte_TX(unsigned char address)
 120:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** {
 375               	.LM42:
 376               	.LFBB9:
 377 00d6 DF93      		push r29
 378 00d8 CF93      		push r28
 379 00da 0F92      		push __tmp_reg__
 380 00dc CDB7      		in r28,__SP_L__
 381 00de DEB7      		in r29,__SP_H__
 382               	/* prologue: function */
 383               	/* frame size = 1 */
 384               	/* stack size = 3 */
 385               	.L__stack_usage = 3
 121:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	i2c_start();
 387               	.LM43:
 388 00e0 8983      		std Y+1,r24
 389 00e2 0E94 0000 		call i2c_start
 122:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** 	i2c_send(address << 1);
 391               	.LM44:
 392 00e6 8981      		ldd r24,Y+1
 393 00e8 880F      		lsl r24
 394 00ea 0E94 0000 		call i2c_send
 395               	/* epilogue start */
 123:../../../src/drivers/platform/micaZ/source/i2c_driver.c **** }
 397               	.LM45:
 398 00ee 0F90      		pop __tmp_reg__
 399 00f0 CF91      		pop r28
 400 00f2 DF91      		pop r29
 401 00f4 0895      		ret
 403               	.Lscope9:
 405               		.stabd	78,0,0
 407               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 i2c_driver.c
     /tmp/ccyJTOsv.s:2      *ABS*:0000003f __SREG__
     /tmp/ccyJTOsv.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccyJTOsv.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccyJTOsv.s:5      *ABS*:00000034 __CCP__
     /tmp/ccyJTOsv.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccyJTOsv.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccyJTOsv.s:74     .text:00000000 i2c_init
     /tmp/ccyJTOsv.s:108    .text:00000016 i2c_waitForInterruptFlag
     /tmp/ccyJTOsv.s:134    .text:00000020 i2c_actionStart
     /tmp/ccyJTOsv.s:161    .text:0000002c i2c_start
     /tmp/ccyJTOsv.s:203    .text:0000004e i2c_stop
     /tmp/ccyJTOsv.s:238    .text:00000066 i2c_send
     /tmp/ccyJTOsv.s:287    .text:00000090 i2c_receive
     /tmp/ccyJTOsv.s:333    .text:000000b4 i2c_controlByte_RX
     /tmp/ccyJTOsv.s:372    .text:000000d6 i2c_controlByte_TX

NO UNDEFINED SYMBOLS
