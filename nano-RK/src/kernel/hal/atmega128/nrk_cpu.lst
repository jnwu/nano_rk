   1               		.file	"nrk_cpu.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  12               		.text
  13               	.Ltext0:
 136               	.global	nrk_battery_save
 138               	nrk_battery_save:
 139               		.stabd	46,0,0
   0:../../../src/kernel/hal/atmega128/nrk_cpu.c **** /******************************************************************************
   1:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *  Nano-RK, a real-time operating system for sensor networks.
   2:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   3:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *  All rights reserved.
   4:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *
   5:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   6:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   7:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   8:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *
   9:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *  This program is free software: you can redistribute it and/or modify
  10:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *  it under the terms of the GNU General Public License as published by
  11:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *  the Free Software Foundation, version 2.0 of the License.
  12:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *
  13:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *  This program is distributed in the hope that it will be useful,
  14:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *  GNU General Public License for more details.
  17:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *
  18:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *  You should have received a copy of the GNU General Public License
  19:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  20:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *
  21:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *  Contributing Authors (specific to this file):
  22:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *  Anthony Rowe
  23:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *  Zane Starr
  24:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *  Anand Eswaren
  25:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *******************************************************************************/
  26:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
  27:../../../src/kernel/hal/atmega128/nrk_cpu.c **** #include <include.h>
  28:../../../src/kernel/hal/atmega128/nrk_cpu.c **** #include <nrk.h>
  29:../../../src/kernel/hal/atmega128/nrk_cpu.c **** #include <avr/sleep.h>
  30:../../../src/kernel/hal/atmega128/nrk_cpu.c **** #include <nrk_stack_check.h>
  31:../../../src/kernel/hal/atmega128/nrk_cpu.c **** #include <nrk_cfg.h>
  32:../../../src/kernel/hal/atmega128/nrk_cpu.c **** #include <nrk_error.h>
  33:../../../src/kernel/hal/atmega128/nrk_cpu.c **** #include <nrk_task.h>
  34:../../../src/kernel/hal/atmega128/nrk_cpu.c **** #include <nrk_defs.h>
  35:../../../src/kernel/hal/atmega128/nrk_cpu.c **** #include <nrk_timer.h>
  36:../../../src/kernel/hal/atmega128/nrk_cpu.c **** #
  37:../../../src/kernel/hal/atmega128/nrk_cpu.c **** /*
  38:../../../src/kernel/hal/atmega128/nrk_cpu.c **** ***************************************************************************************************
  39:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *                                        INITIALIZE A TASK'S STACK
  40:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *
  41:../../../src/kernel/hal/atmega128/nrk_cpu.c **** * Description: This function is highly processor specific.
  42:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *
  43:../../../src/kernel/hal/atmega128/nrk_cpu.c **** * Arguments  : task          is a pointer to the task code
  44:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *
  45:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *              pdata         is a pointer to a user supplied data area that will be passed to the t
  46:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *                            when the task first executes.
  47:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *
  48:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *              ptos          is a pointer to the top of stack.  It is assumed that 'ptos' points to
  49:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *                            a 'free' entry on the task stack.
  50:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *                            'ptos' contains the HIGHEST valid address of the stack.
  51:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *
  52:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *              opt           specifies options that can be used to alter the behavior of OSTaskStkI
  53:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *                            We don't use have any option implemented for this project. You can jus
  54:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *                            set opt to 0
  55:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *
  56:../../../src/kernel/hal/atmega128/nrk_cpu.c **** * Returns    : Always returns the location of the new top-of-stack' once the processor registers ha
  57:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *              been placed on the stack in the proper order.
  58:../../../src/kernel/hal/atmega128/nrk_cpu.c **** *
  59:../../../src/kernel/hal/atmega128/nrk_cpu.c **** * Note(s)    :
  60:../../../src/kernel/hal/atmega128/nrk_cpu.c **** ***************************************************************************************************
  61:../../../src/kernel/hal/atmega128/nrk_cpu.c **** */
  62:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
  63:../../../src/kernel/hal/atmega128/nrk_cpu.c **** #define BUILD_DATE "Date: " __DATE__ "\n"
  64:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
  65:../../../src/kernel/hal/atmega128/nrk_cpu.c **** void nrk_battery_save()
  66:../../../src/kernel/hal/atmega128/nrk_cpu.c **** {
 141               	.LM0:
 142               	.LFBB1:
 143               	/* prologue: function */
 144               	/* frame size = 0 */
 145               	/* epilogue start */
  67:../../../src/kernel/hal/atmega128/nrk_cpu.c **** #ifdef NRK_BATTERY_SAVE
  68:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     _nrk_stop_os_timer();
  69:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     _nrk_set_next_wakeup(250);
  70:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     nrk_led_clr(0);
  71:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     nrk_led_set(1);
  72:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     nrk_led_clr(2);
  73:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     nrk_led_clr(3);
  74:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     SET_VREG_INACTIVE();
  75:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     nrk_sleep();
  76:../../../src/kernel/hal/atmega128/nrk_cpu.c **** #endif
  77:../../../src/kernel/hal/atmega128/nrk_cpu.c **** }
 147               	.LM1:
 148 0000 0895      		ret
 150               	.Lscope1:
 152               		.stabd	78,0,0
 156               	.global	nrk_task_set_entry_function
 158               	nrk_task_set_entry_function:
 159               		.stabd	46,0,0
  78:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
  79:../../../src/kernel/hal/atmega128/nrk_cpu.c **** void nrk_task_set_entry_function( nrk_task_type *task, void *func )
  80:../../../src/kernel/hal/atmega128/nrk_cpu.c **** {
 161               	.LM2:
 162               	.LFBB2:
 163               	/* prologue: function */
 164               	/* frame size = 0 */
  81:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     task->task=func;
 166               	.LM3:
 167 0002 FC01      		movw r30,r24
 168 0004 7683      		std Z+6,r23
 169 0006 6583      		std Z+5,r22
 170               	/* epilogue start */
  82:../../../src/kernel/hal/atmega128/nrk_cpu.c **** }
 172               	.LM4:
 173 0008 0895      		ret
 175               	.Lscope2:
 177               		.stabd	78,0,0
 179               	.global	nrk_sleep
 181               	nrk_sleep:
 182               		.stabd	46,0,0
  83:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
  84:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
  85:../../../src/kernel/hal/atmega128/nrk_cpu.c **** void nrk_sleep()
  86:../../../src/kernel/hal/atmega128/nrk_cpu.c **** {
 184               	.LM5:
 185               	.LFBB3:
 186               	/* prologue: function */
 187               	/* frame size = 0 */
  87:../../../src/kernel/hal/atmega128/nrk_cpu.c **** // pdiener: Powersave stops main oscillator!
  88:../../../src/kernel/hal/atmega128/nrk_cpu.c **** // This is in general no good idea if a fast wake up response time is needed
  89:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     set_sleep_mode (SLEEP_MODE_PWR_SAVE);
 189               	.LM6:
 190 000a 85B7      		in r24,85-32
 191 000c 837E      		andi r24,lo8(-29)
 192 000e 8861      		ori r24,lo8(24)
 193 0010 85BF      		out 85-32,r24
  90:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     sleep_mode ();
 195               	.LM7:
 196 0012 85B7      		in r24,85-32
 197 0014 8062      		ori r24,lo8(32)
 198 0016 85BF      		out 85-32,r24
 199               	/* #APP */
 200               	 ;  91 "../../../src/kernel/hal/atmega128/nrk_cpu.c" 1
 201 0018 8895      		sleep
 202               		
 203               	 ;  0 "" 2
 204               	/* #NOAPP */
 205 001a 85B7      		in r24,85-32
 206 001c 8F7D      		andi r24,lo8(-33)
 207 001e 85BF      		out 85-32,r24
 208               	/* epilogue start */
  91:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
  92:../../../src/kernel/hal/atmega128/nrk_cpu.c **** }
 210               	.LM8:
 211 0020 0895      		ret
 213               	.Lscope3:
 215               		.stabd	78,0,0
 217               	.global	nrk_idle
 219               	nrk_idle:
 220               		.stabd	46,0,0
  93:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
  94:../../../src/kernel/hal/atmega128/nrk_cpu.c **** void nrk_idle()
  95:../../../src/kernel/hal/atmega128/nrk_cpu.c **** {
 222               	.LM9:
 223               	.LFBB4:
 224               	/* prologue: function */
 225               	/* frame size = 0 */
  96:../../../src/kernel/hal/atmega128/nrk_cpu.c **** // pdiener: This stops the CPU core clock and flash clock while peripheral clock is kept running
  97:../../../src/kernel/hal/atmega128/nrk_cpu.c **** // Main and aux oscillator keep running
  98:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     set_sleep_mode( SLEEP_MODE_IDLE);
 227               	.LM10:
 228 0022 85B7      		in r24,85-32
 229 0024 837E      		andi r24,lo8(-29)
 230 0026 85BF      		out 85-32,r24
  99:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     sleep_mode ();
 232               	.LM11:
 233 0028 85B7      		in r24,85-32
 234 002a 8062      		ori r24,lo8(32)
 235 002c 85BF      		out 85-32,r24
 236               	/* #APP */
 237               	 ;  100 "../../../src/kernel/hal/atmega128/nrk_cpu.c" 1
 238 002e 8895      		sleep
 239               		
 240               	 ;  0 "" 2
 241               	/* #NOAPP */
 242 0030 85B7      		in r24,85-32
 243 0032 8F7D      		andi r24,lo8(-33)
 244 0034 85BF      		out 85-32,r24
 245               	/* epilogue start */
 100:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
 101:../../../src/kernel/hal/atmega128/nrk_cpu.c **** }
 247               	.LM12:
 248 0036 0895      		ret
 250               	.Lscope4:
 252               		.stabd	78,0,0
 255               	.global	nrk_task_stk_init
 257               	nrk_task_stk_init:
 258               		.stabd	46,0,0
 102:../../../src/kernel/hal/atmega128/nrk_cpu.c **** void *nrk_task_stk_init (void (*task)(), void *ptos, void *pbos)
 103:../../../src/kernel/hal/atmega128/nrk_cpu.c **** {
 260               	.LM13:
 261               	.LFBB5:
 262               	/* prologue: function */
 263               	/* frame size = 0 */
 264 0038 FA01      		movw r30,r20
 104:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     uint16_t *stk ;  // 2 bytes
 105:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     uint8_t *stkc; // 1 byte
 106:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
 107:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     stk    = (unsigned int *)pbos;          /* Load stack pointer */
 108:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     stkc = (unsigned char*)stk;
 109:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow
 266               	.LM14:
 267 003a 25E5      		ldi r18,lo8(85)
 268 003c 2083      		st Z,r18
 110:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     stk    = (unsigned int *)ptos;          /* Load stack pointer */
 270               	.LM15:
 271 003e FB01      		movw r30,r22
 111:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     /* build a context for the new task */
 112:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     /* Where do these numbers come from? */
 113:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     /* *(--stk) = 0x4f50;   // O P
 114:../../../src/kernel/hal/atmega128/nrk_cpu.c ****      *(--stk) = 0x4d4e;   // M N
 115:../../../src/kernel/hal/atmega128/nrk_cpu.c ****      *(--stk) = 0x4b4c;   // K L
 116:../../../src/kernel/hal/atmega128/nrk_cpu.c ****      *(--stk) = 0x494a;   // I J
 117:../../../src/kernel/hal/atmega128/nrk_cpu.c ****      *(--stk) = 0x4748;   // G H
 118:../../../src/kernel/hal/atmega128/nrk_cpu.c ****      *(--stk) = 0x4546;   // E F
 119:../../../src/kernel/hal/atmega128/nrk_cpu.c ****      *(--stk) = 0x4344;   // C D
 120:../../../src/kernel/hal/atmega128/nrk_cpu.c ****      *(--stk) = 0x4142;   // A B
 121:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     */
 122:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     --stk;
 273               	.LM16:
 274 0040 3297      		sbiw r30,2
 123:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     stkc = (unsigned char*)stk;
 124:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
 276               	.LM17:
 277 0042 9083      		st Z,r25
 125:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     *stkc = (unsigned char)((unsigned int)(task)%256);
 279               	.LM18:
 280 0044 8183      		std Z+1,r24
 126:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
 127:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0;
 282               	.LM19:
 283 0046 1292      		st -Z,__zero_reg__
 284 0048 1292      		st -Z,__zero_reg__
 128:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0;
 286               	.LM20:
 287 004a 1292      		st -Z,__zero_reg__
 288 004c 1292      		st -Z,__zero_reg__
 129:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0;
 290               	.LM21:
 291 004e 1292      		st -Z,__zero_reg__
 292 0050 1292      		st -Z,__zero_reg__
 130:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0;
 294               	.LM22:
 295 0052 1292      		st -Z,__zero_reg__
 296 0054 1292      		st -Z,__zero_reg__
 131:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0;
 298               	.LM23:
 299 0056 1292      		st -Z,__zero_reg__
 300 0058 1292      		st -Z,__zero_reg__
 132:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0;
 302               	.LM24:
 303 005a 1292      		st -Z,__zero_reg__
 304 005c 1292      		st -Z,__zero_reg__
 133:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0;
 306               	.LM25:
 307 005e 1292      		st -Z,__zero_reg__
 308 0060 1292      		st -Z,__zero_reg__
 134:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0;
 310               	.LM26:
 311 0062 1292      		st -Z,__zero_reg__
 312 0064 1292      		st -Z,__zero_reg__
 135:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
 136:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0;
 314               	.LM27:
 315 0066 1292      		st -Z,__zero_reg__
 316 0068 1292      		st -Z,__zero_reg__
 137:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0;
 318               	.LM28:
 319 006a 1292      		st -Z,__zero_reg__
 320 006c 1292      		st -Z,__zero_reg__
 138:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0;
 322               	.LM29:
 323 006e 1292      		st -Z,__zero_reg__
 324 0070 1292      		st -Z,__zero_reg__
 139:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0;
 326               	.LM30:
 327 0072 1292      		st -Z,__zero_reg__
 328 0074 1292      		st -Z,__zero_reg__
 140:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0;
 330               	.LM31:
 331 0076 1292      		st -Z,__zero_reg__
 332 0078 1292      		st -Z,__zero_reg__
 141:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0;
 334               	.LM32:
 335 007a 1292      		st -Z,__zero_reg__
 336 007c 1292      		st -Z,__zero_reg__
 142:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0;
 338               	.LM33:
 339 007e 1292      		st -Z,__zero_reg__
 340 0080 1292      		st -Z,__zero_reg__
 143:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0;
 342               	.LM34:
 343 0082 1292      		st -Z,__zero_reg__
 344 0084 1292      		st -Z,__zero_reg__
 144:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0;
 346               	.LM35:
 347 0086 1292      		st -Z,__zero_reg__
 348 0088 1292      		st -Z,__zero_reg__
 145:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
 146:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
 147:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     return ((void *)stk);
 148:../../../src/kernel/hal/atmega128/nrk_cpu.c **** }
 350               	.LM36:
 351 008a CF01      		movw r24,r30
 352               	/* epilogue start */
 353 008c 0895      		ret
 355               	.Lscope5:
 357               		.stabd	78,0,0
 359               	.global	nrk_stack_pointer_restore
 361               	nrk_stack_pointer_restore:
 362               		.stabd	46,0,0
 149:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
 150:../../../src/kernel/hal/atmega128/nrk_cpu.c **** void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
 151:../../../src/kernel/hal/atmega128/nrk_cpu.c **** {
 152:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
 153:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
 154:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     task->Ptos = (void *) &stk_base[stk_size-1];
 155:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     task->Pbos = (void *) &stk_base[0];
 156:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
 157:../../../src/kernel/hal/atmega128/nrk_cpu.c **** }
 158:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
 159:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
 160:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
 161:../../../src/kernel/hal/atmega128/nrk_cpu.c **** inline void nrk_stack_pointer_restore()
 162:../../../src/kernel/hal/atmega128/nrk_cpu.c **** {
 364               	.LM37:
 365               	.LFBB6:
 366               	/* prologue: function */
 367               	/* frame size = 0 */
 163:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     unsigned char *stkc;
 164:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
 165:../../../src/kernel/hal/atmega128/nrk_cpu.c **** #ifdef KERNEL_STK_ARRAY
 166:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 167:../../../src/kernel/hal/atmega128/nrk_cpu.c **** #else
 168:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     stkc = (unsigned char*) NRK_KERNEL_STK_TOP;
 169:../../../src/kernel/hal/atmega128/nrk_cpu.c **** #endif
 170:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
 369               	.LM38:
 370 008e 80E0      		ldi r24,lo8(gs(_nrk_timer_tick))
 371 0090 90E0      		ldi r25,hi8(gs(_nrk_timer_tick))
 372 0092 9093 FE10 		sts 4350,r25
 171:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
 374               	.LM39:
 375 0096 8093 FF10 		sts 4351,r24
 376               	/* epilogue start */
 172:../../../src/kernel/hal/atmega128/nrk_cpu.c **** }
 378               	.LM40:
 379 009a 0895      		ret
 381               	.Lscope6:
 383               		.stabd	78,0,0
 385               	.global	nrk_stack_pointer_init
 387               	nrk_stack_pointer_init:
 388               		.stabd	46,0,0
 173:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
 174:../../../src/kernel/hal/atmega128/nrk_cpu.c **** inline void nrk_stack_pointer_init()
 175:../../../src/kernel/hal/atmega128/nrk_cpu.c **** {
 390               	.LM41:
 391               	.LFBB7:
 392               	/* prologue: function */
 393               	/* frame size = 0 */
 176:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     unsigned char *stkc;
 177:../../../src/kernel/hal/atmega128/nrk_cpu.c **** #ifdef KERNEL_STK_ARRAY
 178:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 179:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     nrk_kernel_stk[0]=STK_CANARY_VAL;
 180:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 181:../../../src/kernel/hal/atmega128/nrk_cpu.c **** #else
 182:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     stkc = (unsigned char *)NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
 183:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     *stkc = STK_CANARY_VAL;
 395               	.LM42:
 396 009c 85E5      		ldi r24,lo8(85)
 397 009e 8093 7E10 		sts 4222,r24
 184:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
 185:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
 399               	.LM43:
 400 00a2 EEEF      		ldi r30,lo8(4350)
 401 00a4 F0E1      		ldi r31,hi8(4350)
 402 00a6 F093 0000 		sts (nrk_kernel_stk_ptr)+1,r31
 403 00aa E093 0000 		sts nrk_kernel_stk_ptr,r30
 186:../../../src/kernel/hal/atmega128/nrk_cpu.c **** #endif
 187:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
 405               	.LM44:
 406 00ae 80E0      		ldi r24,lo8(gs(_nrk_timer_tick))
 407 00b0 90E0      		ldi r25,hi8(gs(_nrk_timer_tick))
 408 00b2 9083      		st Z,r25
 188:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
 410               	.LM45:
 411 00b4 8093 FF10 		sts 4351,r24
 412               	/* epilogue start */
 189:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
 190:../../../src/kernel/hal/atmega128/nrk_cpu.c **** }
 414               	.LM46:
 415 00b8 0895      		ret
 417               	.Lscope7:
 419               		.stabd	78,0,0
 421               	.global	nrk_target_start
 423               	nrk_target_start:
 424               		.stabd	46,0,0
 191:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
 192:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
 193:../../../src/kernel/hal/atmega128/nrk_cpu.c **** /* start the target running */
 194:../../../src/kernel/hal/atmega128/nrk_cpu.c **** void nrk_target_start(void)
 195:../../../src/kernel/hal/atmega128/nrk_cpu.c **** {
 426               	.LM47:
 427               	.LFBB8:
 428               	/* prologue: function */
 429               	/* frame size = 0 */
 196:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
 197:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     _nrk_setup_timer();
 431               	.LM48:
 432 00ba 0E94 0000 		call _nrk_setup_timer
 198:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     nrk_int_enable();
 434               	.LM49:
 435 00be 0E94 0000 		call nrk_int_enable
 436               	/* epilogue start */
 199:../../../src/kernel/hal/atmega128/nrk_cpu.c **** 
 200:../../../src/kernel/hal/atmega128/nrk_cpu.c **** }
 438               	.LM50:
 439 00c2 0895      		ret
 441               	.Lscope8:
 443               		.stabd	78,0,0
 448               	.global	nrk_task_set_stk
 450               	nrk_task_set_stk:
 451               		.stabd	46,0,0
 152:../../../src/kernel/hal/atmega128/nrk_cpu.c **** {
 453               	.LM51:
 454               	.LFBB9:
 455 00c4 EF92      		push r14
 456 00c6 FF92      		push r15
 457 00c8 0F93      		push r16
 458 00ca 1F93      		push r17
 459 00cc CF93      		push r28
 460 00ce DF93      		push r29
 461               	/* prologue: function */
 462               	/* frame size = 0 */
 463 00d0 7C01      		movw r14,r24
 464 00d2 8B01      		movw r16,r22
 465 00d4 EA01      		movw r28,r20
 154:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
 467               	.LM52:
 468 00d6 4032      		cpi r20,32
 469 00d8 5105      		cpc r21,__zero_reg__
 470 00da 00F4      		brsh .L18
 471 00dc 81E1      		ldi r24,lo8(17)
 472 00de 0E94 0000 		call nrk_error_add
 473               	.L18:
 155:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     task->Ptos = (void *) &stk_base[stk_size-1];
 475               	.LM53:
 476 00e2 2197      		sbiw r28,1
 477 00e4 C00F      		add r28,r16
 478 00e6 D11F      		adc r29,r17
 479 00e8 F701      		movw r30,r14
 480 00ea D283      		std Z+2,r29
 481 00ec C183      		std Z+1,r28
 156:../../../src/kernel/hal/atmega128/nrk_cpu.c ****     task->Pbos = (void *) &stk_base[0];
 483               	.LM54:
 484 00ee 1483      		std Z+4,r17
 485 00f0 0383      		std Z+3,r16
 486               	/* epilogue start */
 158:../../../src/kernel/hal/atmega128/nrk_cpu.c **** }
 488               	.LM55:
 489 00f2 DF91      		pop r29
 490 00f4 CF91      		pop r28
 491 00f6 1F91      		pop r17
 492 00f8 0F91      		pop r16
 493 00fa FF90      		pop r15
 494 00fc EF90      		pop r14
 495 00fe 0895      		ret
 497               	.Lscope9:
 499               		.stabd	78,0,0
 500               		.comm _nrk_signal_list,4,1
 501               		.comm nrk_idle_task_stk,128,1
 502               		.comm nrk_kernel_stk_ptr,2,1
 503               		.comm nrk_task_TCB,165,1
 504               		.comm nrk_wakeup_signal,1,1
 505               		.comm _nrk_readyQ,30,1
 506               		.comm _free_node,2,1
 507               		.comm _head_node,2,1
 508               		.comm nrk_cur_task_prio,1,1
 509               		.comm nrk_cur_task_TCB,2,1
 510               		.comm nrk_high_ready_prio,1,1
 511               		.comm nrk_high_ready_TCB,2,1
 512               		.comm _nrk_resource_cnt,1,1
 513               		.comm nrk_system_time,8,1
 514               		.comm error_task,1,1
 515               		.comm error_num,1,1
 516               		.comm nrk_sem_list,3,1
 517               		.comm _nrk_prev_timer_val,1,1
 518               		.comm _nrk_time_trigger,1,1
 519               		.comm app_timer0_callback,2,1
 520               		.comm app_timer0_prescale,1,1
 543               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 nrk_cpu.c
     /tmp/ccVOycss.s:2      *ABS*:0000003f __SREG__
     /tmp/ccVOycss.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccVOycss.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccVOycss.s:5      *ABS*:00000034 __CCP__
     /tmp/ccVOycss.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccVOycss.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccVOycss.s:138    .text:00000000 nrk_battery_save
     /tmp/ccVOycss.s:158    .text:00000002 nrk_task_set_entry_function
     /tmp/ccVOycss.s:181    .text:0000000a nrk_sleep
     /tmp/ccVOycss.s:219    .text:00000022 nrk_idle
     /tmp/ccVOycss.s:257    .text:00000038 nrk_task_stk_init
     /tmp/ccVOycss.s:361    .text:0000008e nrk_stack_pointer_restore
     /tmp/ccVOycss.s:387    .text:0000009c nrk_stack_pointer_init
                            *COM*:00000002 nrk_kernel_stk_ptr
     /tmp/ccVOycss.s:423    .text:000000ba nrk_target_start
     /tmp/ccVOycss.s:450    .text:000000c4 nrk_task_set_stk
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:000000a5 nrk_task_TCB
                            *COM*:00000001 nrk_wakeup_signal
                            *COM*:0000001e _nrk_readyQ
                            *COM*:00000002 _free_node
                            *COM*:00000002 _head_node
                            *COM*:00000001 nrk_cur_task_prio
                            *COM*:00000002 nrk_cur_task_TCB
                            *COM*:00000001 nrk_high_ready_prio
                            *COM*:00000002 nrk_high_ready_TCB
                            *COM*:00000001 _nrk_resource_cnt
                            *COM*:00000008 nrk_system_time
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000003 nrk_sem_list
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
_nrk_timer_tick
_nrk_setup_timer
nrk_int_enable
nrk_error_add
