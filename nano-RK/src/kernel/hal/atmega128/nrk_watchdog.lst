   1               		.file	"nrk_watchdog.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 133               	.global	nrk_watchdog_disable
 135               	nrk_watchdog_disable:
 136               		.stabd	46,0,0
   1:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** /******************************************************************************
   2:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  All rights reserved.
   5:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *
   6:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *
  10:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  it under the terms of the GNU General Public License as published by
  12:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *
  14:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  This program is distributed in the hope that it will be useful,
  15:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  GNU General Public License for more details.
  18:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *
  19:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  You should have received a copy of the GNU General Public License
  20:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *
  22:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  Contributing Authors (specific to this file):
  23:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  Anthony Rowe
  24:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *******************************************************************************/
  25:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** 
  26:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** #include <include.h>
  27:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** #include <nrk_watchdog.h>
  28:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** #include <nrk_error.h>
  29:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** #include <avr/wdt.h>
  30:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** #include <nrk.h>
  31:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** 
  32:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** void nrk_watchdog_disable()
  33:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** {
 138               	.LM0:
 139               	.LFBB1:
 140               	/* prologue: function */
 141               	/* frame size = 0 */
 142               	/* stack size = 0 */
 143               	.L__stack_usage = 0
  34:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     nrk_int_disable();
 145               	.LM1:
 146 0000 0E94 0000 		call nrk_int_disable
 147               	.LBB6:
 148               	.LBB7:
  35:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     nrk_watchdog_reset();
  36:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     MCUSR &= ~(1<<WDRF);
  37:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     WDTCR |= (1<<WDCE) | (1<<WDE);
  38:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     WDTCR = 0;
  39:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     nrk_int_enable();
  40:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** }
  41:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** 
  42:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** void nrk_watchdog_enable()
  43:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** {
  44:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** // Enable watchdog with 1024K cycle timeout
  45:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** // No Interrupt Trigger
  46:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     nrk_int_disable();
  47:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     MCUSR &= ~(1<<WDRF);
  48:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     nrk_watchdog_reset();
  49:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     WDTCR |= (1<<WDCE) | (1<<WDE);
  50:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     WDTCR = (1<<WDE) | (1<<WDP2) | (1<<WDP1) | (1<<WDP0);
  51:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     nrk_int_enable();
  52:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** 
  53:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** }
  54:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** 
  55:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** int8_t nrk_watchdog_check()
  56:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** {
  57:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** 
  58:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     if((MCUSR & (1<<WDRF))==0) return NRK_OK;
  59:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     return NRK_ERROR;
  60:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** }
  61:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** 
  62:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** inline void nrk_watchdog_reset()
  63:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** {
  64:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     wdt_reset();
 150               	.LM2:
 151               	/* #APP */
 152               	 ;  64 "../../../src/kernel/hal/atmega128/nrk_watchdog.c" 1
 153 0004 A895      		wdr
 154               	 ;  0 "" 2
 155               	/* #NOAPP */
 156               	.LBE7:
 157               	.LBE6:
  36:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     MCUSR &= ~(1<<WDRF);
 159               	.LM3:
 160 0006 84B7      		in r24,84-32
 161 0008 877F      		andi r24,lo8(-9)
 162 000a 84BF      		out 84-32,r24
  37:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     WDTCR |= (1<<WDCE) | (1<<WDE);
 164               	.LM4:
 165 000c 81B5      		in r24,65-32
 166 000e 8861      		ori r24,lo8(24)
 167 0010 81BD      		out 65-32,r24
  38:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     WDTCR = 0;
 169               	.LM5:
 170 0012 11BC      		out 65-32,__zero_reg__
  39:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     nrk_int_enable();
 172               	.LM6:
 173 0014 0E94 0000 		call nrk_int_enable
 174               	/* epilogue start */
  40:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** }
 176               	.LM7:
 177 0018 0895      		ret
 179               	.Lscope1:
 181               		.stabd	78,0,0
 183               	.global	nrk_watchdog_enable
 185               	nrk_watchdog_enable:
 186               		.stabd	46,0,0
  43:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** {
 188               	.LM8:
 189               	.LFBB2:
 190               	/* prologue: function */
 191               	/* frame size = 0 */
 192               	/* stack size = 0 */
 193               	.L__stack_usage = 0
  46:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     nrk_int_disable();
 195               	.LM9:
 196 001a 0E94 0000 		call nrk_int_disable
  47:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     MCUSR &= ~(1<<WDRF);
 198               	.LM10:
 199 001e 84B7      		in r24,84-32
 200 0020 877F      		andi r24,lo8(-9)
 201 0022 84BF      		out 84-32,r24
 202               	.LBB8:
 203               	.LBB9:
 205               	.LM11:
 206               	/* #APP */
 207               	 ;  64 "../../../src/kernel/hal/atmega128/nrk_watchdog.c" 1
 208 0024 A895      		wdr
 209               	 ;  0 "" 2
 210               	/* #NOAPP */
 211               	.LBE9:
 212               	.LBE8:
  49:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     WDTCR |= (1<<WDCE) | (1<<WDE);
 214               	.LM12:
 215 0026 81B5      		in r24,65-32
 216 0028 8861      		ori r24,lo8(24)
 217 002a 81BD      		out 65-32,r24
  50:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     WDTCR = (1<<WDE) | (1<<WDP2) | (1<<WDP1) | (1<<WDP0);
 219               	.LM13:
 220 002c 8FE0      		ldi r24,lo8(15)
 221 002e 81BD      		out 65-32,r24
  51:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     nrk_int_enable();
 223               	.LM14:
 224 0030 0E94 0000 		call nrk_int_enable
 225               	/* epilogue start */
  53:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** }
 227               	.LM15:
 228 0034 0895      		ret
 230               	.Lscope2:
 232               		.stabd	78,0,0
 234               	.global	nrk_watchdog_check
 236               	nrk_watchdog_check:
 237               		.stabd	46,0,0
  56:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** {
 239               	.LM16:
 240               	.LFBB3:
 241               	/* prologue: function */
 242               	/* frame size = 0 */
 243               	/* stack size = 0 */
 244               	.L__stack_usage = 0
  58:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     if((MCUSR & (1<<WDRF))==0) return NRK_OK;
 246               	.LM17:
 247 0036 04B6      		in __tmp_reg__,84-32
 248 0038 03FC      		sbrc __tmp_reg__,3
 249 003a 00C0      		rjmp .L5
 250 003c 81E0      		ldi r24,lo8(1)
 251 003e 0895      		ret
 252               	.L5:
  59:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     return NRK_ERROR;
 254               	.LM18:
 255 0040 8FEF      		ldi r24,lo8(-1)
  60:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** }
 257               	.LM19:
 258 0042 0895      		ret
 260               	.Lscope3:
 262               		.stabd	78,0,0
 264               	.global	nrk_watchdog_reset
 266               	nrk_watchdog_reset:
 267               		.stabd	46,0,0
  63:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** {
 269               	.LM20:
 270               	.LFBB4:
 271               	/* prologue: function */
 272               	/* frame size = 0 */
 273               	/* stack size = 0 */
 274               	.L__stack_usage = 0
 276               	.LM21:
 277               	/* #APP */
 278               	 ;  64 "../../../src/kernel/hal/atmega128/nrk_watchdog.c" 1
 279 0044 A895      		wdr
 280               	 ;  0 "" 2
 281               	/* epilogue start */
  65:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** 
  66:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** }
 283               	.LM22:
 284               	/* #NOAPP */
 285 0046 0895      		ret
 287               	.Lscope4:
 289               		.stabd	78,0,0
 290               		.comm _nrk_signal_list,4,1
 291               		.comm error_task,1,1
 292               		.comm error_num,1,1
 293               		.comm nrk_idle_task_stk,128,1
 294               		.comm nrk_kernel_stk_ptr,2,1
 301               	.Letext0:
 302               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 nrk_watchdog.c
     /tmp/ccH9FwaA.s:2      *ABS*:0000003f __SREG__
     /tmp/ccH9FwaA.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccH9FwaA.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccH9FwaA.s:5      *ABS*:00000034 __CCP__
     /tmp/ccH9FwaA.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccH9FwaA.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccH9FwaA.s:135    .text:00000000 nrk_watchdog_disable
     /tmp/ccH9FwaA.s:185    .text:0000001a nrk_watchdog_enable
     /tmp/ccH9FwaA.s:236    .text:00000036 nrk_watchdog_check
     /tmp/ccH9FwaA.s:266    .text:00000044 nrk_watchdog_reset
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr

UNDEFINED SYMBOLS
nrk_int_disable
nrk_int_enable
__do_clear_bss
