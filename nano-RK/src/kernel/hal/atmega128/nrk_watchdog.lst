   1               		.file	"nrk_watchdog.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  12               		.text
  13               	.Ltext0:
 133               	.global	nrk_watchdog_check
 135               	nrk_watchdog_check:
 136               		.stabd	46,0,0
   0:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** /******************************************************************************
   1:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  Nano-RK, a real-time operating system for sensor networks.
   2:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   3:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  All rights reserved.
   4:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *
   5:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   6:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   7:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   8:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *
   9:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  This program is free software: you can redistribute it and/or modify
  10:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  it under the terms of the GNU General Public License as published by
  11:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  the Free Software Foundation, version 2.0 of the License.
  12:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *
  13:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  This program is distributed in the hope that it will be useful,
  14:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  GNU General Public License for more details.
  17:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *
  18:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  You should have received a copy of the GNU General Public License
  19:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  20:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *
  21:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  Contributing Authors (specific to this file):
  22:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *  Anthony Rowe
  23:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** *******************************************************************************/
  24:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** 
  25:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** #include <include.h>
  26:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** #include <nrk_watchdog.h>
  27:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** #include <nrk_error.h>
  28:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** #include <avr/wdt.h>
  29:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** #include <nrk.h>
  30:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** 
  31:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** void nrk_watchdog_disable()
  32:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** {
  33:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     nrk_int_disable();
  34:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     nrk_watchdog_reset();
  35:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     MCUSR &= ~(1<<WDRF);
  36:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     WDTCR |= (1<<WDCE) | (1<<WDE);
  37:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     WDTCR = 0;
  38:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     nrk_int_enable();
  39:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** }
  40:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** 
  41:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** void nrk_watchdog_enable()
  42:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** {
  43:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** // Enable watchdog with 1024K cycle timeout
  44:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** // No Interrupt Trigger
  45:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     nrk_int_disable();
  46:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     MCUSR &= ~(1<<WDRF);
  47:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     nrk_watchdog_reset();
  48:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     WDTCR |= (1<<WDCE) | (1<<WDE);
  49:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     WDTCR = (1<<WDE) | (1<<WDP2) | (1<<WDP1) | (1<<WDP0);
  50:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     nrk_int_enable();
  51:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** 
  52:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** }
  53:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** 
  54:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** int8_t nrk_watchdog_check()
  55:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** {
 138               	.LM0:
 139               	.LFBB1:
 140               	/* prologue: function */
 141               	/* frame size = 0 */
  56:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** 
  57:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     if((MCUSR & (1<<WDRF))==0) return NRK_OK;
 143               	.LM1:
 144 0000 04B6      		in __tmp_reg__,84-32
 145 0002 03FE      		sbrs __tmp_reg__,3
 146 0004 00C0      		rjmp .L2
 147 0006 8FEF      		ldi r24,lo8(-1)
 148 0008 0895      		ret
 149               	.L2:
 150 000a 81E0      		ldi r24,lo8(1)
  58:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     return NRK_ERROR;
  59:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** }
 152               	.LM2:
 153 000c 0895      		ret
 155               	.Lscope1:
 157               		.stabd	78,0,0
 159               	.global	nrk_watchdog_reset
 161               	nrk_watchdog_reset:
 162               		.stabd	46,0,0
  60:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** 
  61:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** inline void nrk_watchdog_reset()
  62:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** {
 164               	.LM3:
 165               	.LFBB2:
 166               	/* prologue: function */
 167               	/* frame size = 0 */
  63:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     wdt_reset();
 169               	.LM4:
 170               	/* #APP */
 171               	 ;  64 "../../../src/kernel/hal/atmega128/nrk_watchdog.c" 1
 172 000e A895      		wdr
 173               	 ;  0 "" 2
 174               	/* epilogue start */
  64:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** 
  65:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** }
 176               	.LM5:
 177               	/* #NOAPP */
 178 0010 0895      		ret
 180               	.Lscope2:
 182               		.stabd	78,0,0
 184               	.global	nrk_watchdog_enable
 186               	nrk_watchdog_enable:
 187               		.stabd	46,0,0
  43:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** {
 189               	.LM6:
 190               	.LFBB3:
 191               	/* prologue: function */
 192               	/* frame size = 0 */
  46:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     nrk_int_disable();
 194               	.LM7:
 195 0012 0E94 0000 		call nrk_int_disable
  47:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     MCUSR &= ~(1<<WDRF);
 197               	.LM8:
 198 0016 84B7      		in r24,84-32
 199 0018 877F      		andi r24,lo8(-9)
 200 001a 84BF      		out 84-32,r24
 201               	.LBB6:
 202               	.LBB7:
  64:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     wdt_reset();
 204               	.LM9:
 205               	/* #APP */
 206               	 ;  64 "../../../src/kernel/hal/atmega128/nrk_watchdog.c" 1
 207 001c A895      		wdr
 208               	 ;  0 "" 2
 209               	/* #NOAPP */
 210               	.LBE7:
 211               	.LBE6:
  49:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     WDTCR |= (1<<WDCE) | (1<<WDE);
 213               	.LM10:
 214 001e 81B5      		in r24,65-32
 215 0020 8861      		ori r24,lo8(24)
 216 0022 81BD      		out 65-32,r24
  50:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     WDTCR = (1<<WDE) | (1<<WDP2) | (1<<WDP1) | (1<<WDP0);
 218               	.LM11:
 219 0024 8FE0      		ldi r24,lo8(15)
 220 0026 81BD      		out 65-32,r24
  51:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     nrk_int_enable();
 222               	.LM12:
 223 0028 0E94 0000 		call nrk_int_enable
 224               	/* epilogue start */
  53:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** }
 226               	.LM13:
 227 002c 0895      		ret
 229               	.Lscope3:
 231               		.stabd	78,0,0
 233               	.global	nrk_watchdog_disable
 235               	nrk_watchdog_disable:
 236               		.stabd	46,0,0
  33:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** {
 238               	.LM14:
 239               	.LFBB4:
 240               	/* prologue: function */
 241               	/* frame size = 0 */
  34:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     nrk_int_disable();
 243               	.LM15:
 244 002e 0E94 0000 		call nrk_int_disable
 245               	.LBB8:
 246               	.LBB9:
  64:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     wdt_reset();
 248               	.LM16:
 249               	/* #APP */
 250               	 ;  64 "../../../src/kernel/hal/atmega128/nrk_watchdog.c" 1
 251 0032 A895      		wdr
 252               	 ;  0 "" 2
 253               	/* #NOAPP */
 254               	.LBE9:
 255               	.LBE8:
  36:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     MCUSR &= ~(1<<WDRF);
 257               	.LM17:
 258 0034 84B7      		in r24,84-32
 259 0036 877F      		andi r24,lo8(-9)
 260 0038 84BF      		out 84-32,r24
  37:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     WDTCR |= (1<<WDCE) | (1<<WDE);
 262               	.LM18:
 263 003a 81B5      		in r24,65-32
 264 003c 8861      		ori r24,lo8(24)
 265 003e 81BD      		out 65-32,r24
  38:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     WDTCR = 0;
 267               	.LM19:
 268 0040 11BC      		out 65-32,__zero_reg__
  39:../../../src/kernel/hal/atmega128/nrk_watchdog.c ****     nrk_int_enable();
 270               	.LM20:
 271 0042 0E94 0000 		call nrk_int_enable
 272               	/* epilogue start */
  40:../../../src/kernel/hal/atmega128/nrk_watchdog.c **** }
 274               	.LM21:
 275 0046 0895      		ret
 277               	.Lscope4:
 279               		.stabd	78,0,0
 280               		.comm _nrk_signal_list,4,1
 281               		.comm error_task,1,1
 282               		.comm error_num,1,1
 283               		.comm nrk_idle_task_stk,128,1
 284               		.comm nrk_kernel_stk_ptr,2,1
 291               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 nrk_watchdog.c
     /tmp/cceCICWf.s:2      *ABS*:0000003f __SREG__
     /tmp/cceCICWf.s:3      *ABS*:0000003e __SP_H__
     /tmp/cceCICWf.s:4      *ABS*:0000003d __SP_L__
     /tmp/cceCICWf.s:5      *ABS*:00000034 __CCP__
     /tmp/cceCICWf.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/cceCICWf.s:7      *ABS*:00000001 __zero_reg__
     /tmp/cceCICWf.s:135    .text:00000000 nrk_watchdog_check
     /tmp/cceCICWf.s:161    .text:0000000e nrk_watchdog_reset
     /tmp/cceCICWf.s:186    .text:00000012 nrk_watchdog_enable
     /tmp/cceCICWf.s:235    .text:0000002e nrk_watchdog_disable
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
nrk_int_disable
nrk_int_enable
