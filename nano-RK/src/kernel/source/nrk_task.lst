   1               		.file	"nrk_task.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 138               	.global	nrk_get_high_ready_task_ID
 140               	nrk_get_high_ready_task_ID:
 141               		.stabd	46,0,0
   1:../../../src/kernel/source/nrk_task.c **** /******************************************************************************
   2:../../../src/kernel/source/nrk_task.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../../src/kernel/source/nrk_task.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../../src/kernel/source/nrk_task.c **** *  All rights reserved.
   5:../../../src/kernel/source/nrk_task.c **** *
   6:../../../src/kernel/source/nrk_task.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../../src/kernel/source/nrk_task.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../../src/kernel/source/nrk_task.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../../src/kernel/source/nrk_task.c **** *
  10:../../../src/kernel/source/nrk_task.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../../src/kernel/source/nrk_task.c **** *  it under the terms of the GNU General Public License as published by
  12:../../../src/kernel/source/nrk_task.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../../src/kernel/source/nrk_task.c **** *
  14:../../../src/kernel/source/nrk_task.c **** *  This program is distributed in the hope that it will be useful,
  15:../../../src/kernel/source/nrk_task.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../../src/kernel/source/nrk_task.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../../src/kernel/source/nrk_task.c **** *  GNU General Public License for more details.
  18:../../../src/kernel/source/nrk_task.c **** *
  19:../../../src/kernel/source/nrk_task.c **** *  You should have received a copy of the GNU General Public License
  20:../../../src/kernel/source/nrk_task.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../../src/kernel/source/nrk_task.c **** *
  22:../../../src/kernel/source/nrk_task.c **** *  Contributing Authors (specific to this file):
  23:../../../src/kernel/source/nrk_task.c **** *  Anthony Rowe
  24:../../../src/kernel/source/nrk_task.c **** *  Zane Starr
  25:../../../src/kernel/source/nrk_task.c **** *  Anand Eswaren
  26:../../../src/kernel/source/nrk_task.c **** *******************************************************************************/
  27:../../../src/kernel/source/nrk_task.c **** 
  28:../../../src/kernel/source/nrk_task.c **** #include <nrk.h>
  29:../../../src/kernel/source/nrk_task.c **** #include <nrk_task.h>
  30:../../../src/kernel/source/nrk_task.c **** #include <include.h>
  31:../../../src/kernel/source/nrk_task.c **** #include <ulib.h>
  32:../../../src/kernel/source/nrk_task.c **** #include <nrk_timer.h>
  33:../../../src/kernel/source/nrk_task.c **** #include <nrk_scheduler.h>
  34:../../../src/kernel/source/nrk_task.c **** #include <nrk_error.h>
  35:../../../src/kernel/source/nrk_task.c **** #include <nrk_stack_check.h>
  36:../../../src/kernel/source/nrk_task.c **** 
  37:../../../src/kernel/source/nrk_task.c **** //#define TIME_PAD  2
  38:../../../src/kernel/source/nrk_task.c **** 
  39:../../../src/kernel/source/nrk_task.c **** inline void _nrk_wait_for_scheduler ();
  40:../../../src/kernel/source/nrk_task.c **** 
  41:../../../src/kernel/source/nrk_task.c **** uint8_t nrk_get_high_ready_task_ID ()
  42:../../../src/kernel/source/nrk_task.c **** {
 143               	.LM0:
 144               	.LFBB1:
 145               	/* prologue: function */
 146               	/* frame size = 0 */
 147               	/* stack size = 0 */
 148               	.L__stack_usage = 0
  43:../../../src/kernel/source/nrk_task.c ****     return (_head_node->task_ID);
 150               	.LM1:
 151 0000 E091 0000 		lds r30,_head_node
 152 0004 F091 0000 		lds r31,_head_node+1
  44:../../../src/kernel/source/nrk_task.c **** }
 154               	.LM2:
 155 0008 8081      		ld r24,Z
 156               	/* epilogue start */
 157 000a 0895      		ret
 159               	.Lscope1:
 161               		.stabd	78,0,0
 163               	.global	nrk_print_readyQ
 165               	nrk_print_readyQ:
 166               		.stabd	46,0,0
  45:../../../src/kernel/source/nrk_task.c **** 
  46:../../../src/kernel/source/nrk_task.c **** void nrk_print_readyQ ()
  47:../../../src/kernel/source/nrk_task.c **** {
 168               	.LM3:
 169               	.LFBB2:
 170               	/* prologue: function */
 171               	/* frame size = 0 */
 172               	/* stack size = 0 */
 173               	.L__stack_usage = 0
  48:../../../src/kernel/source/nrk_task.c ****     nrk_queue *ptr;
  49:../../../src/kernel/source/nrk_task.c ****     ptr = _head_node;
 175               	.LM4:
 176 000c E091 0000 		lds r30,_head_node
 177 0010 F091 0000 		lds r31,_head_node+1
  50:../../../src/kernel/source/nrk_task.c ****     //nrk_kprintf (PSTR ("nrk_queue: "));
  51:../../../src/kernel/source/nrk_task.c ****     while (ptr != NULL)
 179               	.LM5:
 180 0014 00C0      		rjmp .L3
 181               	.L4:
  52:../../../src/kernel/source/nrk_task.c ****     {
  53:../../../src/kernel/source/nrk_task.c ****         //printf ("%d ", ptr->task_ID);
  54:../../../src/kernel/source/nrk_task.c ****         ptr = ptr->Next;
 183               	.LM6:
 184 0016 0380      		ldd __tmp_reg__,Z+3
 185 0018 F481      		ldd r31,Z+4
 186 001a E02D      		mov r30,__tmp_reg__
 187               	.L3:
  51:../../../src/kernel/source/nrk_task.c ****     while (ptr != NULL)
 189               	.LM7:
 190 001c 3097      		sbiw r30,0
 191 001e 01F4      		brne .L4
 192               	/* epilogue start */
  55:../../../src/kernel/source/nrk_task.c ****     }
  56:../../../src/kernel/source/nrk_task.c ****     //nrk_kprintf (PSTR ("\n\r"));
  57:../../../src/kernel/source/nrk_task.c **** }
 194               	.LM8:
 195 0020 0895      		ret
 200               	.Lscope2:
 202               		.stabd	78,0,0
 205               	.global	nrk_add_to_readyQ
 207               	nrk_add_to_readyQ:
 208               		.stabd	46,0,0
  58:../../../src/kernel/source/nrk_task.c **** 
  59:../../../src/kernel/source/nrk_task.c **** 
  60:../../../src/kernel/source/nrk_task.c **** void nrk_add_to_readyQ (int8_t task_ID)
  61:../../../src/kernel/source/nrk_task.c **** {
 210               	.LM9:
 211               	.LFBB3:
 212 0022 EF92      		push r14
 213 0024 FF92      		push r15
 214 0026 0F93      		push r16
 215 0028 1F93      		push r17
 216 002a CF93      		push r28
 217 002c DF93      		push r29
 218               	/* prologue: function */
 219               	/* frame size = 0 */
 220               	/* stack size = 6 */
 221               	.L__stack_usage = 6
  62:../../../src/kernel/source/nrk_task.c ****     nrk_queue *NextNode;
  63:../../../src/kernel/source/nrk_task.c ****     nrk_queue *CurNode;
  64:../../../src/kernel/source/nrk_task.c **** 
  65:../../../src/kernel/source/nrk_task.c ****     //printf( "nrk_add_to_readyQ %d\n",task_ID );
  66:../../../src/kernel/source/nrk_task.c ****     // nrk_queue full
  67:../../../src/kernel/source/nrk_task.c ****     if (_free_node == NULL)
 223               	.LM10:
 224 002e E091 0000 		lds r30,_free_node
 225 0032 F091 0000 		lds r31,_free_node+1
 226 0036 3097      		sbiw r30,0
 227 0038 01F4      		brne .+2
 228 003a 00C0      		rjmp .L5
  68:../../../src/kernel/source/nrk_task.c ****     {
  69:../../../src/kernel/source/nrk_task.c ****         return;
  70:../../../src/kernel/source/nrk_task.c ****     }
  71:../../../src/kernel/source/nrk_task.c **** 
  72:../../../src/kernel/source/nrk_task.c **** 
  73:../../../src/kernel/source/nrk_task.c ****     NextNode = _head_node;
 230               	.LM11:
 231 003c 4091 0000 		lds r20,_head_node
 232 0040 5091 0000 		lds r21,_head_node+1
  74:../../../src/kernel/source/nrk_task.c ****     CurNode = _free_node;
  75:../../../src/kernel/source/nrk_task.c **** 
  76:../../../src/kernel/source/nrk_task.c ****     if (_head_node != NULL)
 234               	.LM12:
 235 0044 4115      		cp r20,__zero_reg__
 236 0046 5105      		cpc r21,__zero_reg__
 237 0048 01F4      		brne .+2
 238 004a 00C0      		rjmp .L15
 239 004c DA01      		movw r26,r20
 240 004e 682F      		mov r22,r24
 241 0050 7727      		clr r23
 242 0052 67FD      		sbrc r22,7
 243 0054 7095      		com r23
  77:../../../src/kernel/source/nrk_task.c ****     {
  78:../../../src/kernel/source/nrk_task.c ****         while (NextNode != NULL)
  79:../../../src/kernel/source/nrk_task.c ****         {
  80:../../../src/kernel/source/nrk_task.c **** /*
  81:../../../src/kernel/source/nrk_task.c ****             if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
  82:../../../src/kernel/source/nrk_task.c ****                 if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
  83:../../../src/kernel/source/nrk_task.c ****                         nrk_task_TCB[task_ID].task_prio)
  84:../../../src/kernel/source/nrk_task.c ****                     break;
  85:../../../src/kernel/source/nrk_task.c ****             if (nrk_task_TCB[task_ID].elevated_prio_flag)
  86:../../../src/kernel/source/nrk_task.c ****                 if (nrk_task_TCB[NextNode->task_ID].task_prio <
  87:../../../src/kernel/source/nrk_task.c ****                         nrk_task_TCB[task_ID].task_prio_ceil)
  88:../../../src/kernel/source/nrk_task.c ****                     break;
  89:../../../src/kernel/source/nrk_task.c **** */
  90:../../../src/kernel/source/nrk_task.c **** 
  91:../../../src/kernel/source/nrk_task.c **** 		// Put any new tasks in front of the idle task
  92:../../../src/kernel/source/nrk_task.c **** 	    	if(NextNode->task_ID == 0)
  93:../../../src/kernel/source/nrk_task.c **** 			break;
  94:../../../src/kernel/source/nrk_task.c **** 
  95:../../../src/kernel/source/nrk_task.c **** 		// Both tasks starting for the first time
  96:../../../src/kernel/source/nrk_task.c **** 		// Compare both task's period only
  97:../../../src/kernel/source/nrk_task.c **** 		if(nrk_task_TCB[NextNode->task_ID].next_wakeup == 0 && 
  98:../../../src/kernel/source/nrk_task.c **** 		nrk_task_TCB[task_ID].next_wakeup == 0 && 
  99:../../../src/kernel/source/nrk_task.c **** 		nrk_task_TCB[task_ID].period < nrk_task_TCB[NextNode->task_ID].period)
 100:../../../src/kernel/source/nrk_task.c **** 			break;
 101:../../../src/kernel/source/nrk_task.c **** 		else if (nrk_task_TCB[NextNode->task_ID].next_wakeup != 0 &&
 102:../../../src/kernel/source/nrk_task.c ****                 nrk_task_TCB[task_ID].next_wakeup == 0 &&
 245               	.LM13:
 246 0056 9B01      		movw r18,r22
 247 0058 15E0      		ldi r17,5
 248 005a 220F      	1:	lsl r18
 249 005c 331F      		rol r19
 250 005e 1A95      		dec r17
 251 0060 01F4      		brne 1b
 252 0062 260F      		add r18,r22
 253 0064 371F      		adc r19,r23
 254 0066 2050      		subi r18,lo8(-(nrk_task_TCB))
 255 0068 3040      		sbci r19,hi8(-(nrk_task_TCB))
 256 006a B901      		movw r22,r18
 257 006c 6B5E      		subi r22,lo8(-(21))
 258 006e 7F4F      		sbci r23,hi8(-(21))
  99:../../../src/kernel/source/nrk_task.c **** 		nrk_task_TCB[task_ID].period < nrk_task_TCB[NextNode->task_ID].period)
 260               	.LM14:
 261 0070 255E      		subi r18,lo8(-(27))
 262 0072 3F4F      		sbci r19,hi8(-(27))
 263               	.L10:
  92:../../../src/kernel/source/nrk_task.c **** 	    	if(NextNode->task_ID == 0)
 265               	.LM15:
 266 0074 0C91      		ld r16,X
 267 0076 0023      		tst r16
 268 0078 01F0      		breq .L7
  97:../../../src/kernel/source/nrk_task.c **** 		if(nrk_task_TCB[NextNode->task_ID].next_wakeup == 0 && 
 270               	.LM16:
 271 007a 10E0      		ldi r17,lo8(0)
 272 007c 7801      		movw r14,r16
 273 007e 95E0      		ldi r25,5
 274 0080 EE0C      	1:	lsl r14
 275 0082 FF1C      		rol r15
 276 0084 9A95      		dec r25
 277 0086 01F4      		brne 1b
 278 0088 E00E      		add r14,r16
 279 008a F11E      		adc r15,r17
 280 008c C0E0      		ldi r28,lo8(nrk_task_TCB)
 281 008e D0E0      		ldi r29,hi8(nrk_task_TCB)
 282 0090 EC0E      		add r14,r28
 283 0092 FD1E      		adc r15,r29
 284 0094 E701      		movw r28,r14
 285 0096 0D89      		ldd r16,Y+21
 286 0098 1E89      		ldd r17,Y+22
 287 009a 0115      		cp r16,__zero_reg__
 288 009c 1105      		cpc r17,__zero_reg__
 289 009e 01F4      		brne .L8
  97:../../../src/kernel/source/nrk_task.c **** 		if(nrk_task_TCB[NextNode->task_ID].next_wakeup == 0 && 
 291               	.LM17:
 292 00a0 EB01      		movw r28,r22
 293 00a2 0881      		ld r16,Y
 294 00a4 1981      		ldd r17,Y+1
 295 00a6 0115      		cp r16,__zero_reg__
 296 00a8 1105      		cpc r17,__zero_reg__
 297 00aa 01F4      		brne .L9
  98:../../../src/kernel/source/nrk_task.c **** 		nrk_task_TCB[task_ID].next_wakeup == 0 && 
 299               	.LM18:
 300 00ac E901      		movw r28,r18
 301 00ae 0881      		ld r16,Y
 302 00b0 1981      		ldd r17,Y+1
 303 00b2 E701      		movw r28,r14
 304 00b4 EB8C      		ldd r14,Y+27
 305 00b6 FC8C      		ldd r15,Y+28
 306 00b8 0E15      		cp r16,r14
 307 00ba 1F05      		cpc r17,r15
 308 00bc 00F4      		brsh .L9
 309 00be 00C0      		rjmp .L7
 310               	.L8:
 312               	.LM19:
 313 00c0 EB01      		movw r28,r22
 314 00c2 E880      		ld r14,Y
 315 00c4 F980      		ldd r15,Y+1
 101:../../../src/kernel/source/nrk_task.c **** 		else if (nrk_task_TCB[NextNode->task_ID].next_wakeup != 0 &&
 317               	.LM20:
 318 00c6 E114      		cp r14,__zero_reg__
 319 00c8 F104      		cpc r15,__zero_reg__
 320 00ca 01F0      		breq .L7
 103:../../../src/kernel/source/nrk_task.c ****                 nrk_task_TCB[task_ID].next_wakeup < nrk_task_TCB[NextNode->task_ID].next_wakeup)
 104:../../../src/kernel/source/nrk_task.c **** 			break;
 105:../../../src/kernel/source/nrk_task.c **** 		else if (nrk_task_TCB[NextNode->task_ID].next_wakeup != 0 &&
 106:../../../src/kernel/source/nrk_task.c **** 		nrk_task_TCB[task_ID].next_wakeup != 0 &&
 322               	.LM21:
 323 00cc E016      		cp r14,r16
 324 00ce F106      		cpc r15,r17
 325 00d0 00F0      		brlo .L7
 326               	.L9:
 107:../../../src/kernel/source/nrk_task.c **** 		nrk_task_TCB[task_ID].next_wakeup < nrk_task_TCB[NextNode->task_ID].next_wakeup)
 108:../../../src/kernel/source/nrk_task.c **** 			break;
 109:../../../src/kernel/source/nrk_task.c **** 
 110:../../../src/kernel/source/nrk_task.c ****             	NextNode = NextNode->Next;
 328               	.LM22:
 329 00d2 1396      		adiw r26,3
 330 00d4 0D90      		ld __tmp_reg__,X+
 331 00d6 BC91      		ld r27,X
 332 00d8 A02D      		mov r26,__tmp_reg__
  78:../../../src/kernel/source/nrk_task.c ****         while (NextNode != NULL)
 334               	.LM23:
 335 00da 1097      		sbiw r26,0
 336 00dc 01F4      		brne .L10
 337 00de 00C0      		rjmp .L7
 338               	.L15:
  76:../../../src/kernel/source/nrk_task.c ****     if (_head_node != NULL)
 340               	.LM24:
 341 00e0 A0E0      		ldi r26,lo8(0)
 342 00e2 B0E0      		ldi r27,hi8(0)
 343               	.L7:
 111:../../../src/kernel/source/nrk_task.c ****         }
 112:../../../src/kernel/source/nrk_task.c ****     }
 113:../../../src/kernel/source/nrk_task.c **** 
 114:../../../src/kernel/source/nrk_task.c **** 
 115:../../../src/kernel/source/nrk_task.c ****     CurNode->task_ID = task_ID;
 345               	.LM25:
 346 00e4 8083      		st Z,r24
 116:../../../src/kernel/source/nrk_task.c ****     _free_node = _free_node->Next;
 348               	.LM26:
 349 00e6 C381      		ldd r28,Z+3
 350 00e8 D481      		ldd r29,Z+4
 351 00ea D093 0000 		sts _free_node+1,r29
 352 00ee C093 0000 		sts _free_node,r28
 117:../../../src/kernel/source/nrk_task.c **** 
 118:../../../src/kernel/source/nrk_task.c ****     if (NextNode == _head_node)
 354               	.LM27:
 355 00f2 A417      		cp r26,r20
 356 00f4 B507      		cpc r27,r21
 357 00f6 01F4      		brne .L11
 119:../../../src/kernel/source/nrk_task.c ****     {
 120:../../../src/kernel/source/nrk_task.c ****         //at start
 121:../../../src/kernel/source/nrk_task.c ****         if (_head_node != NULL)
 359               	.LM28:
 360 00f8 1097      		sbiw r26,0
 361 00fa 01F0      		breq .L12
 122:../../../src/kernel/source/nrk_task.c ****         {
 123:../../../src/kernel/source/nrk_task.c ****             CurNode->Next = _head_node;
 363               	.LM29:
 364 00fc B483      		std Z+4,r27
 365 00fe A383      		std Z+3,r26
 124:../../../src/kernel/source/nrk_task.c ****             CurNode->Prev = NULL;
 367               	.LM30:
 368 0100 1282      		std Z+2,__zero_reg__
 369 0102 1182      		std Z+1,__zero_reg__
 125:../../../src/kernel/source/nrk_task.c ****             _head_node->Prev = CurNode;
 371               	.LM31:
 372 0104 1296      		adiw r26,1+1
 373 0106 FC93      		st X,r31
 374 0108 EE93      		st -X,r30
 375 010a 1197      		sbiw r26,1
 376 010c 00C0      		rjmp .L13
 377               	.L12:
 126:../../../src/kernel/source/nrk_task.c ****         }
 127:../../../src/kernel/source/nrk_task.c ****         else
 128:../../../src/kernel/source/nrk_task.c ****         {
 129:../../../src/kernel/source/nrk_task.c ****             CurNode->Next = NULL;
 379               	.LM32:
 380 010e 1482      		std Z+4,__zero_reg__
 381 0110 1382      		std Z+3,__zero_reg__
 130:../../../src/kernel/source/nrk_task.c ****             CurNode->Prev = NULL;
 383               	.LM33:
 384 0112 1282      		std Z+2,__zero_reg__
 385 0114 1182      		std Z+1,__zero_reg__
 131:../../../src/kernel/source/nrk_task.c ****             _free_node->Prev = CurNode;
 387               	.LM34:
 388 0116 FA83      		std Y+2,r31
 389 0118 E983      		std Y+1,r30
 390               	.L13:
 132:../../../src/kernel/source/nrk_task.c ****         }
 133:../../../src/kernel/source/nrk_task.c ****         _head_node = CurNode;
 392               	.LM35:
 393 011a F093 0000 		sts _head_node+1,r31
 394 011e E093 0000 		sts _head_node,r30
 395 0122 00C0      		rjmp .L5
 396               	.L11:
 397 0124 1196      		adiw r26,1
 398 0126 8D91      		ld r24,X+
 399 0128 9C91      		ld r25,X
 400 012a 1297      		sbiw r26,1+1
 134:../../../src/kernel/source/nrk_task.c **** 
 135:../../../src/kernel/source/nrk_task.c ****     }
 136:../../../src/kernel/source/nrk_task.c ****     else
 137:../../../src/kernel/source/nrk_task.c ****     {
 138:../../../src/kernel/source/nrk_task.c ****         if (NextNode != _free_node)
 402               	.LM36:
 403 012c AC17      		cp r26,r28
 404 012e BD07      		cpc r27,r29
 405 0130 01F0      		breq .L14
 139:../../../src/kernel/source/nrk_task.c ****         {
 140:../../../src/kernel/source/nrk_task.c ****             // Insert  in middle
 141:../../../src/kernel/source/nrk_task.c **** 
 142:../../../src/kernel/source/nrk_task.c ****             CurNode->Prev = NextNode->Prev;
 407               	.LM37:
 408 0132 9283      		std Z+2,r25
 409 0134 8183      		std Z+1,r24
 143:../../../src/kernel/source/nrk_task.c ****             CurNode->Next = NextNode;
 411               	.LM38:
 412 0136 B483      		std Z+4,r27
 413 0138 A383      		std Z+3,r26
 144:../../../src/kernel/source/nrk_task.c ****             (NextNode->Prev)->Next = CurNode;
 415               	.LM39:
 416 013a 1196      		adiw r26,1
 417 013c CD91      		ld r28,X+
 418 013e DC91      		ld r29,X
 419 0140 1297      		sbiw r26,1+1
 420 0142 FC83      		std Y+4,r31
 421 0144 EB83      		std Y+3,r30
 422 0146 00C0      		rjmp .L17
 423               	.L14:
 145:../../../src/kernel/source/nrk_task.c ****             NextNode->Prev = CurNode;
 146:../../../src/kernel/source/nrk_task.c ****         }
 147:../../../src/kernel/source/nrk_task.c ****         else
 148:../../../src/kernel/source/nrk_task.c ****         {
 149:../../../src/kernel/source/nrk_task.c ****             //insert at end
 150:../../../src/kernel/source/nrk_task.c ****             CurNode->Next = NULL;
 425               	.LM40:
 426 0148 1482      		std Z+4,__zero_reg__
 427 014a 1382      		std Z+3,__zero_reg__
 151:../../../src/kernel/source/nrk_task.c ****             CurNode->Prev = _free_node->Prev;
 429               	.LM41:
 430 014c 9283      		std Z+2,r25
 431 014e 8183      		std Z+1,r24
 432               	.L17:
 152:../../../src/kernel/source/nrk_task.c ****             _free_node->Prev = CurNode;
 434               	.LM42:
 435 0150 1296      		adiw r26,1+1
 436 0152 FC93      		st X,r31
 437 0154 EE93      		st -X,r30
 438 0156 1197      		sbiw r26,1
 439               	.L5:
 440               	/* epilogue start */
 153:../../../src/kernel/source/nrk_task.c ****         }
 154:../../../src/kernel/source/nrk_task.c **** 
 155:../../../src/kernel/source/nrk_task.c ****     }
 156:../../../src/kernel/source/nrk_task.c **** 
 157:../../../src/kernel/source/nrk_task.c **** }
 442               	.LM43:
 443 0158 DF91      		pop r29
 444 015a CF91      		pop r28
 445 015c 1F91      		pop r17
 446 015e 0F91      		pop r16
 447 0160 FF90      		pop r15
 448 0162 EF90      		pop r14
 449 0164 0895      		ret
 451               	.Lscope3:
 453               		.stabd	78,0,0
 456               	.global	nrk_rem_from_readyQ
 458               	nrk_rem_from_readyQ:
 459               		.stabd	46,0,0
 158:../../../src/kernel/source/nrk_task.c **** 
 159:../../../src/kernel/source/nrk_task.c **** 
 160:../../../src/kernel/source/nrk_task.c **** void nrk_rem_from_readyQ (int8_t task_ID)
 161:../../../src/kernel/source/nrk_task.c **** {
 461               	.LM44:
 462               	.LFBB4:
 463 0166 CF93      		push r28
 464 0168 DF93      		push r29
 465               	/* prologue: function */
 466               	/* frame size = 0 */
 467               	/* stack size = 2 */
 468               	.L__stack_usage = 2
 162:../../../src/kernel/source/nrk_task.c **** 
 163:../../../src/kernel/source/nrk_task.c ****     nrk_queue *CurNode;
 164:../../../src/kernel/source/nrk_task.c **** //      nrk_queue       *tempNode;
 165:../../../src/kernel/source/nrk_task.c **** 
 166:../../../src/kernel/source/nrk_task.c **** //return;
 167:../../../src/kernel/source/nrk_task.c **** 
 168:../../../src/kernel/source/nrk_task.c ****     /*CurNode = _head_node;
 169:../../../src/kernel/source/nrk_task.c **** 
 170:../../../src/kernel/source/nrk_task.c ****        _head_node = _head_node->Next;
 171:../../../src/kernel/source/nrk_task.c ****        _head_node->Prev = NULL;
 172:../../../src/kernel/source/nrk_task.c **** 
 173:../../../src/kernel/source/nrk_task.c ****        if (_free_node == NULL)
 174:../../../src/kernel/source/nrk_task.c ****        {
 175:../../../src/kernel/source/nrk_task.c ****        tempNode = _head_node;
 176:../../../src/kernel/source/nrk_task.c ****        while (tempNode->Next!=NULL) tempNode=tempNode->Next;
 177:../../../src/kernel/source/nrk_task.c ****        CurNode->Next = NULL;
 178:../../../src/kernel/source/nrk_task.c ****        CurNode->Prev = tempNode;
 179:../../../src/kernel/source/nrk_task.c ****        tempNode->Next = CurNode;
 180:../../../src/kernel/source/nrk_task.c ****        _free_node = CurNode;
 181:../../../src/kernel/source/nrk_task.c ****        }
 182:../../../src/kernel/source/nrk_task.c ****        else
 183:../../../src/kernel/source/nrk_task.c ****        {
 184:../../../src/kernel/source/nrk_task.c ****        CurNode->Next = _free_node;
 185:../../../src/kernel/source/nrk_task.c ****        _free_node->Prev = CurNode;
 186:../../../src/kernel/source/nrk_task.c ****        _free_node = CurNode;
 187:../../../src/kernel/source/nrk_task.c ****        }
 188:../../../src/kernel/source/nrk_task.c ****      */
 189:../../../src/kernel/source/nrk_task.c **** 
 190:../../../src/kernel/source/nrk_task.c **** //      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);
 191:../../../src/kernel/source/nrk_task.c **** 
 192:../../../src/kernel/source/nrk_task.c ****     if (_head_node == NULL)
 470               	.LM45:
 471 016a E091 0000 		lds r30,_head_node
 472 016e F091 0000 		lds r31,_head_node+1
 473 0172 3097      		sbiw r30,0
 474 0174 01F4      		brne .+2
 475 0176 00C0      		rjmp .L18
 193:../../../src/kernel/source/nrk_task.c ****         return;
 194:../../../src/kernel/source/nrk_task.c **** 
 195:../../../src/kernel/source/nrk_task.c ****     CurNode = _head_node;
 196:../../../src/kernel/source/nrk_task.c **** 
 197:../../../src/kernel/source/nrk_task.c ****     if (_head_node->task_ID == task_ID)
 477               	.LM46:
 478 0178 9927      		clr r25
 479 017a 87FD      		sbrc r24,7
 480 017c 9095      		com r25
 481 017e 2081      		ld r18,Z
 482 0180 30E0      		ldi r19,lo8(0)
 483 0182 2817      		cp r18,r24
 484 0184 3907      		cpc r19,r25
 485 0186 01F4      		brne .L28
 198:../../../src/kernel/source/nrk_task.c ****     {
 199:../../../src/kernel/source/nrk_task.c ****         //REmove from start
 200:../../../src/kernel/source/nrk_task.c ****         _head_node = _head_node->Next;
 487               	.LM47:
 488 0188 A381      		ldd r26,Z+3
 489 018a B481      		ldd r27,Z+4
 490 018c B093 0000 		sts _head_node+1,r27
 491 0190 A093 0000 		sts _head_node,r26
 201:../../../src/kernel/source/nrk_task.c ****         _head_node->Prev = NULL;
 493               	.LM48:
 494 0194 1296      		adiw r26,1+1
 495 0196 1C92      		st X,__zero_reg__
 496 0198 1E92      		st -X,__zero_reg__
 497 019a 1197      		sbiw r26,1
 498 019c 00C0      		rjmp .L21
 499               	.L23:
 202:../../../src/kernel/source/nrk_task.c ****     }
 203:../../../src/kernel/source/nrk_task.c ****     else
 204:../../../src/kernel/source/nrk_task.c ****     {
 205:../../../src/kernel/source/nrk_task.c ****         while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
 206:../../../src/kernel/source/nrk_task.c ****             CurNode = CurNode->Next;
 501               	.LM49:
 502 019e 0380      		ldd __tmp_reg__,Z+3
 503 01a0 F481      		ldd r31,Z+4
 504 01a2 E02D      		mov r30,__tmp_reg__
 205:../../../src/kernel/source/nrk_task.c ****         while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
 506               	.LM50:
 507 01a4 3097      		sbiw r30,0
 508 01a6 01F0      		breq .L18
 509               	.L28:
 205:../../../src/kernel/source/nrk_task.c ****         while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
 511               	.LM51:
 512 01a8 2081      		ld r18,Z
 513 01aa 30E0      		ldi r19,lo8(0)
 514 01ac 2817      		cp r18,r24
 515 01ae 3907      		cpc r19,r25
 516 01b0 01F4      		brne .L23
 207:../../../src/kernel/source/nrk_task.c ****         if (CurNode == NULL)
 208:../../../src/kernel/source/nrk_task.c ****             return;
 209:../../../src/kernel/source/nrk_task.c **** 
 210:../../../src/kernel/source/nrk_task.c **** 
 211:../../../src/kernel/source/nrk_task.c ****         (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
 518               	.LM52:
 519 01b2 C181      		ldd r28,Z+1
 520 01b4 D281      		ldd r29,Z+2
 521 01b6 8381      		ldd r24,Z+3
 522 01b8 9481      		ldd r25,Z+4
 523 01ba 9C83      		std Y+4,r25
 524 01bc 8B83      		std Y+3,r24
 212:../../../src/kernel/source/nrk_task.c ****         if (CurNode->Next != NULL)
 526               	.LM53:
 527 01be A381      		ldd r26,Z+3
 528 01c0 B481      		ldd r27,Z+4
 529 01c2 1097      		sbiw r26,0
 530 01c4 01F0      		breq .L21
 213:../../../src/kernel/source/nrk_task.c ****             (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
 532               	.LM54:
 533 01c6 1296      		adiw r26,1+1
 534 01c8 DC93      		st X,r29
 535 01ca CE93      		st -X,r28
 536 01cc 1197      		sbiw r26,1
 537               	.L21:
 214:../../../src/kernel/source/nrk_task.c **** 
 215:../../../src/kernel/source/nrk_task.c ****     }
 216:../../../src/kernel/source/nrk_task.c **** 
 217:../../../src/kernel/source/nrk_task.c **** 
 218:../../../src/kernel/source/nrk_task.c **** 
 219:../../../src/kernel/source/nrk_task.c ****     // Add to free list
 220:../../../src/kernel/source/nrk_task.c ****     if (_free_node == NULL)
 539               	.LM55:
 540 01ce A091 0000 		lds r26,_free_node
 541 01d2 B091 0000 		lds r27,_free_node+1
 542 01d6 1097      		sbiw r26,0
 543 01d8 01F4      		brne .L25
 221:../../../src/kernel/source/nrk_task.c ****     {
 222:../../../src/kernel/source/nrk_task.c ****         _free_node = CurNode;
 545               	.LM56:
 546 01da F093 0000 		sts _free_node+1,r31
 547 01de E093 0000 		sts _free_node,r30
 223:../../../src/kernel/source/nrk_task.c ****         _free_node->Next = NULL;
 549               	.LM57:
 550 01e2 1482      		std Z+4,__zero_reg__
 551 01e4 1382      		std Z+3,__zero_reg__
 552 01e6 00C0      		rjmp .L26
 553               	.L25:
 224:../../../src/kernel/source/nrk_task.c ****     }
 225:../../../src/kernel/source/nrk_task.c ****     else
 226:../../../src/kernel/source/nrk_task.c ****     {
 227:../../../src/kernel/source/nrk_task.c ****         CurNode->Next = _free_node;
 555               	.LM58:
 556 01e8 B483      		std Z+4,r27
 557 01ea A383      		std Z+3,r26
 228:../../../src/kernel/source/nrk_task.c ****         _free_node->Prev = CurNode;
 559               	.LM59:
 560 01ec 1296      		adiw r26,1+1
 561 01ee FC93      		st X,r31
 562 01f0 EE93      		st -X,r30
 563 01f2 1197      		sbiw r26,1
 229:../../../src/kernel/source/nrk_task.c ****         _free_node = CurNode;
 565               	.LM60:
 566 01f4 F093 0000 		sts _free_node+1,r31
 567 01f8 E093 0000 		sts _free_node,r30
 568               	.L26:
 230:../../../src/kernel/source/nrk_task.c ****     }
 231:../../../src/kernel/source/nrk_task.c ****     _free_node->Prev = NULL;
 570               	.LM61:
 571 01fc 1282      		std Z+2,__zero_reg__
 572 01fe 1182      		std Z+1,__zero_reg__
 573               	.L18:
 574               	/* epilogue start */
 232:../../../src/kernel/source/nrk_task.c **** }
 576               	.LM62:
 577 0200 DF91      		pop r29
 578 0202 CF91      		pop r28
 579 0204 0895      		ret
 581               	.Lscope4:
 583               		.stabd	78,0,0
 586               	.global	nrk_activate_task
 588               	nrk_activate_task:
 589               		.stabd	46,0,0
 233:../../../src/kernel/source/nrk_task.c **** 
 234:../../../src/kernel/source/nrk_task.c **** 
 235:../../../src/kernel/source/nrk_task.c **** 
 236:../../../src/kernel/source/nrk_task.c **** 
 237:../../../src/kernel/source/nrk_task.c **** 
 238:../../../src/kernel/source/nrk_task.c **** nrk_status_t nrk_activate_task (nrk_task_type * Task)
 239:../../../src/kernel/source/nrk_task.c **** {
 591               	.LM63:
 592               	.LFBB5:
 593 0206 EF92      		push r14
 594 0208 FF92      		push r15
 595 020a 0F93      		push r16
 596 020c 1F93      		push r17
 597 020e CF93      		push r28
 598 0210 DF93      		push r29
 599               	/* prologue: function */
 600               	/* frame size = 0 */
 601               	/* stack size = 6 */
 602               	.L__stack_usage = 6
 603 0212 EC01      		movw r28,r24
 240:../../../src/kernel/source/nrk_task.c ****     uint8_t rtype;
 241:../../../src/kernel/source/nrk_task.c ****     void *topOfStackPtr;
 242:../../../src/kernel/source/nrk_task.c **** 
 243:../../../src/kernel/source/nrk_task.c ****     topOfStackPtr =
 605               	.LM64:
 606 0214 6981      		ldd r22,Y+1
 607 0216 7A81      		ldd r23,Y+2
 608 0218 4B81      		ldd r20,Y+3
 609 021a 5C81      		ldd r21,Y+4
 610 021c 8D81      		ldd r24,Y+5
 611 021e 9E81      		ldd r25,Y+6
 612 0220 0E94 0000 		call nrk_task_stk_init
 613 0224 BC01      		movw r22,r24
 244:../../../src/kernel/source/nrk_task.c ****         (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);
 245:../../../src/kernel/source/nrk_task.c **** 
 246:../../../src/kernel/source/nrk_task.c ****     //printf("activate %d\n",(int)Task.task_ID);
 247:../../../src/kernel/source/nrk_task.c ****     if (Task->FirstActivation == TRUE)
 615               	.LM65:
 616 0226 8F81      		ldd r24,Y+7
 617 0228 8823      		tst r24
 618 022a 01F0      		breq .L31
 248:../../../src/kernel/source/nrk_task.c ****     {
 249:../../../src/kernel/source/nrk_task.c ****         rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
 620               	.LM66:
 621 022c 4B81      		ldd r20,Y+3
 622 022e 5C81      		ldd r21,Y+4
 623 0230 CE01      		movw r24,r28
 624 0232 20E0      		ldi r18,lo8(0)
 625 0234 30E0      		ldi r19,hi8(0)
 626 0236 00E0      		ldi r16,lo8(0)
 627 0238 10E0      		ldi r17,hi8(0)
 628 023a EE24      		clr r14
 629 023c FF24      		clr r15
 630 023e 0E94 0000 		call nrk_TCB_init
 250:../../../src/kernel/source/nrk_task.c ****         Task->FirstActivation = FALSE;
 632               	.LM67:
 633 0242 1F82      		std Y+7,__zero_reg__
 634 0244 00C0      		rjmp .L32
 635               	.L31:
 251:../../../src/kernel/source/nrk_task.c **** 
 252:../../../src/kernel/source/nrk_task.c ****     }
 253:../../../src/kernel/source/nrk_task.c ****     else
 254:../../../src/kernel/source/nrk_task.c ****     {
 255:../../../src/kernel/source/nrk_task.c ****         if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
 637               	.LM68:
 638 0246 8881      		ld r24,Y
 639 0248 9927      		clr r25
 640 024a 87FD      		sbrc r24,7
 641 024c 9095      		com r25
 642 024e FC01      		movw r30,r24
 643 0250 25E0      		ldi r18,5
 644 0252 EE0F      	1:	lsl r30
 645 0254 FF1F      		rol r31
 646 0256 2A95      		dec r18
 647 0258 01F4      		brne 1b
 648 025a E80F      		add r30,r24
 649 025c F91F      		adc r31,r25
 650 025e E050      		subi r30,lo8(-(nrk_task_TCB))
 651 0260 F040      		sbci r31,hi8(-(nrk_task_TCB))
 652 0262 8185      		ldd r24,Z+9
 653 0264 8330      		cpi r24,lo8(3)
 654 0266 01F4      		brne .L34
 256:../../../src/kernel/source/nrk_task.c ****             return NRK_ERROR;
 257:../../../src/kernel/source/nrk_task.c ****         //Re-init some parts of TCB
 258:../../../src/kernel/source/nrk_task.c **** 
 259:../../../src/kernel/source/nrk_task.c ****         nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
 656               	.LM69:
 657 0268 7183      		std Z+1,r23
 658 026a 6083      		st Z,r22
 659               	.L32:
 260:../../../src/kernel/source/nrk_task.c **** 
 261:../../../src/kernel/source/nrk_task.c **** 
 262:../../../src/kernel/source/nrk_task.c **** 
 263:../../../src/kernel/source/nrk_task.c ****     }
 264:../../../src/kernel/source/nrk_task.c **** 
 265:../../../src/kernel/source/nrk_task.c ****     //nrk_task_TCB[Task->task_ID].task_state = READY;
 266:../../../src/kernel/source/nrk_task.c **** 
 267:../../../src/kernel/source/nrk_task.c ****     // Remove from suspended or waiting if extended
 268:../../../src/kernel/source/nrk_task.c **** 
 269:../../../src/kernel/source/nrk_task.c ****     // OSSchedLock();
 270:../../../src/kernel/source/nrk_task.c **** 
 271:../../../src/kernel/source/nrk_task.c **** 
 272:../../../src/kernel/source/nrk_task.c ****     // If Idle Task then Add to ready Q
 273:../../../src/kernel/source/nrk_task.c ****     //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
 274:../../../src/kernel/source/nrk_task.c ****     //nrk_add_to_readyQ(Task->task_ID);
 275:../../../src/kernel/source/nrk_task.c ****     //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
 276:../../../src/kernel/source/nrk_task.c ****     //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
 277:../../../src/kernel/source/nrk_task.c ****     if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
 661               	.LM70:
 662 026c 8881      		ld r24,Y
 663 026e 9927      		clr r25
 664 0270 87FD      		sbrc r24,7
 665 0272 9095      		com r25
 666 0274 FC01      		movw r30,r24
 667 0276 05E0      		ldi r16,5
 668 0278 EE0F      	1:	lsl r30
 669 027a FF1F      		rol r31
 670 027c 0A95      		dec r16
 671 027e 01F4      		brne 1b
 672 0280 E80F      		add r30,r24
 673 0282 F91F      		adc r31,r25
 674 0284 E050      		subi r30,lo8(-(nrk_task_TCB))
 675 0286 F040      		sbci r31,hi8(-(nrk_task_TCB))
 676 0288 8589      		ldd r24,Z+21
 677 028a 9689      		ldd r25,Z+22
 678 028c 0097      		sbiw r24,0
 679 028e 01F4      		brne .L35
 278:../../../src/kernel/source/nrk_task.c ****     {
 279:../../../src/kernel/source/nrk_task.c ****         nrk_task_TCB[Task->task_ID].task_state = READY;
 681               	.LM71:
 682 0290 82E0      		ldi r24,lo8(2)
 683 0292 8187      		std Z+9,r24
 280:../../../src/kernel/source/nrk_task.c ****         nrk_add_to_readyQ (Task->task_ID);
 685               	.LM72:
 686 0294 8881      		ld r24,Y
 687 0296 0E94 0000 		call nrk_add_to_readyQ
 688 029a 00C0      		rjmp .L35
 689               	.L34:
 256:../../../src/kernel/source/nrk_task.c ****             return NRK_ERROR;
 691               	.LM73:
 692 029c 8FEF      		ldi r24,lo8(-1)
 693 029e 00C0      		rjmp .L33
 694               	.L35:
 281:../../../src/kernel/source/nrk_task.c ****     }
 282:../../../src/kernel/source/nrk_task.c **** 
 283:../../../src/kernel/source/nrk_task.c ****     return NRK_OK;
 696               	.LM74:
 697 02a0 81E0      		ldi r24,lo8(1)
 698               	.L33:
 699               	/* epilogue start */
 284:../../../src/kernel/source/nrk_task.c **** }
 701               	.LM75:
 702 02a2 DF91      		pop r29
 703 02a4 CF91      		pop r28
 704 02a6 1F91      		pop r17
 705 02a8 0F91      		pop r16
 706 02aa FF90      		pop r15
 707 02ac EF90      		pop r14
 708 02ae 0895      		ret
 713               	.Lscope5:
 715               		.stabd	78,0,0
 718               	.global	nrk_set_next_wakeup
 720               	nrk_set_next_wakeup:
 721               		.stabd	46,0,0
 285:../../../src/kernel/source/nrk_task.c **** 
 286:../../../src/kernel/source/nrk_task.c **** 
 287:../../../src/kernel/source/nrk_task.c **** 
 288:../../../src/kernel/source/nrk_task.c **** nrk_status_t nrk_terminate_task ()
 289:../../../src/kernel/source/nrk_task.c **** {
 290:../../../src/kernel/source/nrk_task.c ****     nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
 291:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->task_state = FINISHED;
 292:../../../src/kernel/source/nrk_task.c **** 
 293:../../../src/kernel/source/nrk_task.c ****     // HAHA, there is NO next period...
 294:../../../src/kernel/source/nrk_task.c ****     nrk_wait_until_next_period ();
 295:../../../src/kernel/source/nrk_task.c ****     return NRK_OK;
 296:../../../src/kernel/source/nrk_task.c **** }
 297:../../../src/kernel/source/nrk_task.c **** 
 298:../../../src/kernel/source/nrk_task.c **** int8_t nrk_wait_until_next_period ()
 299:../../../src/kernel/source/nrk_task.c **** {
 300:../../../src/kernel/source/nrk_task.c ****     uint8_t timer;
 301:../../../src/kernel/source/nrk_task.c **** 
 302:../../../src/kernel/source/nrk_task.c ****     nrk_stack_check ();
 303:../../../src/kernel/source/nrk_task.c **** // Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
 304:../../../src/kernel/source/nrk_task.c ****     nrk_int_disable ();
 305:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->num_periods = 1;
 306:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->suspend_flag = 1;
 307:../../../src/kernel/source/nrk_task.c ****     timer = _nrk_os_timer_get ();
 308:../../../src/kernel/source/nrk_task.c **** 
 309:../../../src/kernel/source/nrk_task.c **** //nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;
 310:../../../src/kernel/source/nrk_task.c **** 
 311:../../../src/kernel/source/nrk_task.c ****     if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
 312:../../../src/kernel/source/nrk_task.c ****         if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 313:../../../src/kernel/source/nrk_task.c ****         {
 314:../../../src/kernel/source/nrk_task.c ****             timer += TIME_PAD;
 315:../../../src/kernel/source/nrk_task.c ****             _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this 
 316:../../../src/kernel/source/nrk_task.c ****             _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
 317:../../../src/kernel/source/nrk_task.c ****         }
 318:../../../src/kernel/source/nrk_task.c **** 
 319:../../../src/kernel/source/nrk_task.c ****     nrk_int_enable ();
 320:../../../src/kernel/source/nrk_task.c ****     _nrk_wait_for_scheduler ();
 321:../../../src/kernel/source/nrk_task.c ****     return NRK_OK;
 322:../../../src/kernel/source/nrk_task.c **** }
 323:../../../src/kernel/source/nrk_task.c **** 
 324:../../../src/kernel/source/nrk_task.c **** int8_t nrk_wait_until_next_n_periods (uint16_t p)
 325:../../../src/kernel/source/nrk_task.c **** {
 326:../../../src/kernel/source/nrk_task.c ****     uint8_t timer;
 327:../../../src/kernel/source/nrk_task.c **** 
 328:../../../src/kernel/source/nrk_task.c ****     nrk_stack_check ();
 329:../../../src/kernel/source/nrk_task.c **** 
 330:../../../src/kernel/source/nrk_task.c ****     if (p == 0)
 331:../../../src/kernel/source/nrk_task.c ****         p = 1;
 332:../../../src/kernel/source/nrk_task.c **** // Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
 333:../../../src/kernel/source/nrk_task.c ****     nrk_int_disable ();
 334:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->suspend_flag = 1;
 335:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->num_periods = p;
 336:../../../src/kernel/source/nrk_task.c ****     timer = _nrk_os_timer_get ();
 337:../../../src/kernel/source/nrk_task.c **** 
 338:../../../src/kernel/source/nrk_task.c **** //nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;
 339:../../../src/kernel/source/nrk_task.c **** 
 340:../../../src/kernel/source/nrk_task.c **** // +2 allows for potential time conflict resolution
 341:../../../src/kernel/source/nrk_task.c ****     if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
 342:../../../src/kernel/source/nrk_task.c ****         if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 343:../../../src/kernel/source/nrk_task.c ****         {
 344:../../../src/kernel/source/nrk_task.c ****             timer += TIME_PAD;
 345:../../../src/kernel/source/nrk_task.c ****             _nrk_prev_timer_val = timer;
 346:../../../src/kernel/source/nrk_task.c ****             _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
 347:../../../src/kernel/source/nrk_task.c ****         }
 348:../../../src/kernel/source/nrk_task.c **** 
 349:../../../src/kernel/source/nrk_task.c ****     nrk_int_enable ();
 350:../../../src/kernel/source/nrk_task.c ****     _nrk_wait_for_scheduler ();
 351:../../../src/kernel/source/nrk_task.c ****     return NRK_OK;
 352:../../../src/kernel/source/nrk_task.c **** }
 353:../../../src/kernel/source/nrk_task.c **** 
 354:../../../src/kernel/source/nrk_task.c **** /*
 355:../../../src/kernel/source/nrk_task.c ****  * nrk_wait_ticks()
 356:../../../src/kernel/source/nrk_task.c ****  *
 357:../../../src/kernel/source/nrk_task.c ****  * This function will wait until a specified number of
 358:../../../src/kernel/source/nrk_task.c ****  * timer ticks after the curret OS tick timer.
 359:../../../src/kernel/source/nrk_task.c ****  *
 360:../../../src/kernel/source/nrk_task.c ****  */
 361:../../../src/kernel/source/nrk_task.c **** 
 362:../../../src/kernel/source/nrk_task.c **** int8_t nrk_wait_ticks (uint16_t ticks)
 363:../../../src/kernel/source/nrk_task.c **** {
 364:../../../src/kernel/source/nrk_task.c ****     uint8_t timer;
 365:../../../src/kernel/source/nrk_task.c ****     nrk_int_disable ();
 366:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->suspend_flag = 1;
 367:../../../src/kernel/source/nrk_task.c ****     timer = _nrk_os_timer_get ();
 368:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->next_wakeup = ticks + timer;
 369:../../../src/kernel/source/nrk_task.c **** 
 370:../../../src/kernel/source/nrk_task.c ****     if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
 371:../../../src/kernel/source/nrk_task.c ****         if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 372:../../../src/kernel/source/nrk_task.c ****         {
 373:../../../src/kernel/source/nrk_task.c ****             timer += TIME_PAD;
 374:../../../src/kernel/source/nrk_task.c ****             _nrk_prev_timer_val = timer;
 375:../../../src/kernel/source/nrk_task.c ****             _nrk_set_next_wakeup (timer);
 376:../../../src/kernel/source/nrk_task.c ****         }
 377:../../../src/kernel/source/nrk_task.c **** //else nrk_cur_task_TCB->next_wakeup=ticks+1;
 378:../../../src/kernel/source/nrk_task.c ****     nrk_int_enable ();
 379:../../../src/kernel/source/nrk_task.c **** //while(nrk_cur_task_TCB->suspend_flag==1);
 380:../../../src/kernel/source/nrk_task.c ****     _nrk_wait_for_scheduler ();
 381:../../../src/kernel/source/nrk_task.c ****     return NRK_OK;
 382:../../../src/kernel/source/nrk_task.c **** }
 383:../../../src/kernel/source/nrk_task.c **** 
 384:../../../src/kernel/source/nrk_task.c **** 
 385:../../../src/kernel/source/nrk_task.c **** /*
 386:../../../src/kernel/source/nrk_task.c ****  * nrk_wait_until_ticks()
 387:../../../src/kernel/source/nrk_task.c ****  *
 388:../../../src/kernel/source/nrk_task.c ****  * This function will wait until a specified number of
 389:../../../src/kernel/source/nrk_task.c ****  * timer ticks starting from when the task was swapped in.
 390:../../../src/kernel/source/nrk_task.c ****  * This means that this function can set periodic timing
 391:../../../src/kernel/source/nrk_task.c ****  * taking into account any task processing time.
 392:../../../src/kernel/source/nrk_task.c ****  *
 393:../../../src/kernel/source/nrk_task.c ****  */
 394:../../../src/kernel/source/nrk_task.c **** 
 395:../../../src/kernel/source/nrk_task.c **** int8_t nrk_wait_until_ticks (uint16_t ticks)
 396:../../../src/kernel/source/nrk_task.c **** {
 397:../../../src/kernel/source/nrk_task.c ****     uint8_t timer;
 398:../../../src/kernel/source/nrk_task.c ****     nrk_int_disable ();
 399:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->suspend_flag = 1;
 400:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->next_wakeup = ticks;
 401:../../../src/kernel/source/nrk_task.c ****     // printf( "t %u\r\n",ticks );
 402:../../../src/kernel/source/nrk_task.c ****     timer = _nrk_os_timer_get ();
 403:../../../src/kernel/source/nrk_task.c **** 
 404:../../../src/kernel/source/nrk_task.c ****     if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
 405:../../../src/kernel/source/nrk_task.c ****         if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 406:../../../src/kernel/source/nrk_task.c ****         {
 407:../../../src/kernel/source/nrk_task.c ****             timer += TIME_PAD;
 408:../../../src/kernel/source/nrk_task.c ****             _nrk_prev_timer_val = timer;
 409:../../../src/kernel/source/nrk_task.c ****             _nrk_set_next_wakeup (timer);
 410:../../../src/kernel/source/nrk_task.c ****         }
 411:../../../src/kernel/source/nrk_task.c **** //else nrk_cur_task_TCB->next_wakeup=ticks+1;
 412:../../../src/kernel/source/nrk_task.c ****     nrk_int_enable ();
 413:../../../src/kernel/source/nrk_task.c **** //while(nrk_cur_task_TCB->suspend_flag==1);
 414:../../../src/kernel/source/nrk_task.c ****     _nrk_wait_for_scheduler ();
 415:../../../src/kernel/source/nrk_task.c ****     return NRK_OK;
 416:../../../src/kernel/source/nrk_task.c **** }
 417:../../../src/kernel/source/nrk_task.c **** 
 418:../../../src/kernel/source/nrk_task.c **** int8_t nrk_set_next_wakeup (nrk_time_t t)
 419:../../../src/kernel/source/nrk_task.c **** {
 723               	.LM76:
 724               	.LFBB6:
 725 02b0 1F93      		push r17
 726 02b2 DF93      		push r29
 727 02b4 CF93      		push r28
 728 02b6 CDB7      		in r28,__SP_L__
 729 02b8 DEB7      		in r29,__SP_H__
 730 02ba 2897      		sbiw r28,8
 731 02bc 0FB6      		in __tmp_reg__,__SREG__
 732 02be F894      		cli
 733 02c0 DEBF      		out __SP_H__,r29
 734 02c2 0FBE      		out __SREG__,__tmp_reg__
 735 02c4 CDBF      		out __SP_L__,r28
 736               	/* prologue: function */
 737               	/* frame size = 8 */
 738               	/* stack size = 11 */
 739               	.L__stack_usage = 11
 740 02c6 2983      		std Y+1,r18
 741 02c8 3A83      		std Y+2,r19
 742 02ca 4B83      		std Y+3,r20
 743 02cc 5C83      		std Y+4,r21
 744 02ce 6D83      		std Y+5,r22
 745 02d0 7E83      		std Y+6,r23
 746 02d2 8F83      		std Y+7,r24
 747 02d4 9887      		std Y+8,r25
 420:../../../src/kernel/source/nrk_task.c ****     uint8_t timer;
 421:../../../src/kernel/source/nrk_task.c ****     uint16_t nw;
 422:../../../src/kernel/source/nrk_task.c ****     nrk_int_disable ();
 749               	.LM77:
 750 02d6 0E94 0000 		call nrk_int_disable
 423:../../../src/kernel/source/nrk_task.c ****     timer = _nrk_os_timer_get ();
 752               	.LM78:
 753 02da 0E94 0000 		call _nrk_os_timer_get
 754 02de 182F      		mov r17,r24
 424:../../../src/kernel/source/nrk_task.c ****     nw = _nrk_time_to_ticks (&t);
 756               	.LM79:
 757 02e0 CE01      		movw r24,r28
 758 02e2 0196      		adiw r24,1
 759 02e4 0E94 0000 		call _nrk_time_to_ticks
 760 02e8 9C01      		movw r18,r24
 425:../../../src/kernel/source/nrk_task.c ****     if (nw <= TIME_PAD)
 762               	.LM80:
 763 02ea 8330      		cpi r24,3
 764 02ec 9105      		cpc r25,__zero_reg__
 765 02ee 00F0      		brlo .L38
 426:../../../src/kernel/source/nrk_task.c ****         return NRK_ERROR;
 427:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->next_wakeup = nw + timer;
 767               	.LM81:
 768 02f0 E091 0000 		lds r30,nrk_cur_task_TCB
 769 02f4 F091 0000 		lds r31,nrk_cur_task_TCB+1
 770 02f8 210F      		add r18,r17
 771 02fa 311D      		adc r19,__zero_reg__
 772 02fc 368B      		std Z+22,r19
 773 02fe 258B      		std Z+21,r18
 428:../../../src/kernel/source/nrk_task.c ****     /*	if(timer<(254-TIME_PAD))
 429:../../../src/kernel/source/nrk_task.c ****     		if((timer+TIME_PAD)<=_nrk_get_next_wakeup())
 430:../../../src/kernel/source/nrk_task.c ****     		{
 431:../../../src/kernel/source/nrk_task.c ****     			timer+=TIME_PAD;
 432:../../../src/kernel/source/nrk_task.c ****     			_nrk_prev_timer_val=timer;
 433:../../../src/kernel/source/nrk_task.c ****     			_nrk_set_next_wakeup(timer);
 434:../../../src/kernel/source/nrk_task.c ****     		}
 435:../../../src/kernel/source/nrk_task.c ****     */
 436:../../../src/kernel/source/nrk_task.c **** //      nrk_cur_task_TCB->nw_flag=1;
 437:../../../src/kernel/source/nrk_task.c ****     nrk_int_enable ();
 775               	.LM82:
 776 0300 0E94 0000 		call nrk_int_enable
 438:../../../src/kernel/source/nrk_task.c **** 
 439:../../../src/kernel/source/nrk_task.c ****     return NRK_OK;
 778               	.LM83:
 779 0304 81E0      		ldi r24,lo8(1)
 780 0306 00C0      		rjmp .L37
 781               	.L38:
 426:../../../src/kernel/source/nrk_task.c ****         return NRK_ERROR;
 783               	.LM84:
 784 0308 8FEF      		ldi r24,lo8(-1)
 785               	.L37:
 786               	/* epilogue start */
 440:../../../src/kernel/source/nrk_task.c **** }
 788               	.LM85:
 789 030a 2896      		adiw r28,8
 790 030c 0FB6      		in __tmp_reg__,__SREG__
 791 030e F894      		cli
 792 0310 DEBF      		out __SP_H__,r29
 793 0312 0FBE      		out __SREG__,__tmp_reg__
 794 0314 CDBF      		out __SP_L__,r28
 795 0316 CF91      		pop r28
 796 0318 DF91      		pop r29
 797 031a 1F91      		pop r17
 798 031c 0895      		ret
 804               	.Lscope6:
 806               		.stabd	78,0,0
 808               	.global	_nrk_wait_for_scheduler
 810               	_nrk_wait_for_scheduler:
 811               		.stabd	46,0,0
 441:../../../src/kernel/source/nrk_task.c **** 
 442:../../../src/kernel/source/nrk_task.c **** /*
 443:../../../src/kernel/source/nrk_task.c ****  * nrk_wait_until_nw()
 444:../../../src/kernel/source/nrk_task.c ****  *
 445:../../../src/kernel/source/nrk_task.c ****  * This function will wait until a specified number of
 446:../../../src/kernel/source/nrk_task.c ****  * timer ticks starting from when the task was swapped in.
 447:../../../src/kernel/source/nrk_task.c ****  * This means that this function can set periodic timing
 448:../../../src/kernel/source/nrk_task.c ****  * taking into account any task processing time.
 449:../../../src/kernel/source/nrk_task.c ****  *
 450:../../../src/kernel/source/nrk_task.c ****  */
 451:../../../src/kernel/source/nrk_task.c **** 
 452:../../../src/kernel/source/nrk_task.c **** int8_t nrk_wait_until_nw ()
 453:../../../src/kernel/source/nrk_task.c **** {
 454:../../../src/kernel/source/nrk_task.c ****     uint8_t timer;
 455:../../../src/kernel/source/nrk_task.c ****     nrk_int_disable ();
 456:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->suspend_flag = 1;
 457:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->nw_flag = 1;
 458:../../../src/kernel/source/nrk_task.c ****     timer = _nrk_os_timer_get ();
 459:../../../src/kernel/source/nrk_task.c **** 
 460:../../../src/kernel/source/nrk_task.c ****     if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
 461:../../../src/kernel/source/nrk_task.c ****         if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 462:../../../src/kernel/source/nrk_task.c ****         {
 463:../../../src/kernel/source/nrk_task.c ****             timer += TIME_PAD;
 464:../../../src/kernel/source/nrk_task.c ****             _nrk_prev_timer_val = timer;
 465:../../../src/kernel/source/nrk_task.c ****             _nrk_set_next_wakeup (timer);
 466:../../../src/kernel/source/nrk_task.c ****         }
 467:../../../src/kernel/source/nrk_task.c **** //else nrk_cur_task_TCB->next_wakeup=ticks+1;
 468:../../../src/kernel/source/nrk_task.c ****     nrk_int_enable ();
 469:../../../src/kernel/source/nrk_task.c **** //while(nrk_cur_task_TCB->suspend_flag==1);
 470:../../../src/kernel/source/nrk_task.c ****     _nrk_wait_for_scheduler ();
 471:../../../src/kernel/source/nrk_task.c ****     return NRK_OK;
 472:../../../src/kernel/source/nrk_task.c **** }
 473:../../../src/kernel/source/nrk_task.c **** 
 474:../../../src/kernel/source/nrk_task.c **** 
 475:../../../src/kernel/source/nrk_task.c **** int8_t nrk_wait (nrk_time_t t)
 476:../../../src/kernel/source/nrk_task.c **** {
 477:../../../src/kernel/source/nrk_task.c ****     uint8_t timer;
 478:../../../src/kernel/source/nrk_task.c ****     uint16_t nw;
 479:../../../src/kernel/source/nrk_task.c **** 
 480:../../../src/kernel/source/nrk_task.c ****     nrk_stack_check ();
 481:../../../src/kernel/source/nrk_task.c **** 
 482:../../../src/kernel/source/nrk_task.c ****     nrk_int_disable ();
 483:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->suspend_flag = 1;
 484:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->num_periods = 1;
 485:../../../src/kernel/source/nrk_task.c ****     timer = _nrk_os_timer_get ();
 486:../../../src/kernel/source/nrk_task.c **** 
 487:../../../src/kernel/source/nrk_task.c **** //printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);
 488:../../../src/kernel/source/nrk_task.c **** 
 489:../../../src/kernel/source/nrk_task.c ****     nw = _nrk_time_to_ticks (&t);
 490:../../../src/kernel/source/nrk_task.c **** // printf( "t2 %u %u\r\n",timer, nw);
 491:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->next_wakeup = nw + timer;
 492:../../../src/kernel/source/nrk_task.c **** //printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
 493:../../../src/kernel/source/nrk_task.c ****     if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
 494:../../../src/kernel/source/nrk_task.c ****     {
 495:../../../src/kernel/source/nrk_task.c ****         if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 496:../../../src/kernel/source/nrk_task.c ****         {
 497:../../../src/kernel/source/nrk_task.c ****             timer += TIME_PAD;
 498:../../../src/kernel/source/nrk_task.c ****             _nrk_prev_timer_val = timer;
 499:../../../src/kernel/source/nrk_task.c ****             _nrk_set_next_wakeup (timer);
 500:../../../src/kernel/source/nrk_task.c ****         }
 501:../../../src/kernel/source/nrk_task.c ****     }
 502:../../../src/kernel/source/nrk_task.c ****     nrk_int_enable ();
 503:../../../src/kernel/source/nrk_task.c **** 
 504:../../../src/kernel/source/nrk_task.c ****     _nrk_wait_for_scheduler ();
 505:../../../src/kernel/source/nrk_task.c ****     return NRK_OK;
 506:../../../src/kernel/source/nrk_task.c **** }
 507:../../../src/kernel/source/nrk_task.c **** 
 508:../../../src/kernel/source/nrk_task.c **** 
 509:../../../src/kernel/source/nrk_task.c **** inline void _nrk_wait_for_scheduler ()
 510:../../../src/kernel/source/nrk_task.c **** {
 813               	.LM86:
 814               	.LFBB7:
 815               	/* prologue: function */
 816               	/* frame size = 0 */
 817               	/* stack size = 0 */
 818               	.L__stack_usage = 0
 819               	.L40:
 511:../../../src/kernel/source/nrk_task.c **** 
 512:../../../src/kernel/source/nrk_task.c ****     //TIMSK = BM (OCIE1A);
 513:../../../src/kernel/source/nrk_task.c ****     do
 514:../../../src/kernel/source/nrk_task.c ****     {
 515:../../../src/kernel/source/nrk_task.c ****         nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here 
 821               	.LM87:
 822 031e 0E94 0000 		call nrk_idle
 516:../../../src/kernel/source/nrk_task.c ****     }
 517:../../../src/kernel/source/nrk_task.c ****     while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was
 824               	.LM88:
 825 0322 E091 0000 		lds r30,nrk_cur_task_TCB
 826 0326 F091 0000 		lds r31,nrk_cur_task_TCB+1
 827 032a 8581      		ldd r24,Z+5
 828 032c 8823      		tst r24
 829 032e 01F4      		brne .L40
 830               	/* epilogue start */
 518:../../../src/kernel/source/nrk_task.c **** 
 519:../../../src/kernel/source/nrk_task.c ****     //TIMSK = BM (OCIE1A) | BM(OCIE0);
 520:../../../src/kernel/source/nrk_task.c **** }
 832               	.LM89:
 833 0330 0895      		ret
 835               	.Lscope7:
 837               		.stabd	78,0,0
 840               	.global	nrk_wait
 842               	nrk_wait:
 843               		.stabd	46,0,0
 476:../../../src/kernel/source/nrk_task.c **** {
 845               	.LM90:
 846               	.LFBB8:
 847 0332 FF92      		push r15
 848 0334 0F93      		push r16
 849 0336 1F93      		push r17
 850 0338 DF93      		push r29
 851 033a CF93      		push r28
 852 033c CDB7      		in r28,__SP_L__
 853 033e DEB7      		in r29,__SP_H__
 854 0340 2897      		sbiw r28,8
 855 0342 0FB6      		in __tmp_reg__,__SREG__
 856 0344 F894      		cli
 857 0346 DEBF      		out __SP_H__,r29
 858 0348 0FBE      		out __SREG__,__tmp_reg__
 859 034a CDBF      		out __SP_L__,r28
 860               	/* prologue: function */
 861               	/* frame size = 8 */
 862               	/* stack size = 13 */
 863               	.L__stack_usage = 13
 864 034c 2983      		std Y+1,r18
 865 034e 3A83      		std Y+2,r19
 866 0350 4B83      		std Y+3,r20
 867 0352 5C83      		std Y+4,r21
 868 0354 6D83      		std Y+5,r22
 869 0356 7E83      		std Y+6,r23
 870 0358 8F83      		std Y+7,r24
 871 035a 9887      		std Y+8,r25
 480:../../../src/kernel/source/nrk_task.c ****     nrk_stack_check ();
 873               	.LM91:
 874 035c 0E94 0000 		call nrk_stack_check
 482:../../../src/kernel/source/nrk_task.c ****     nrk_int_disable ();
 876               	.LM92:
 877 0360 0E94 0000 		call nrk_int_disable
 483:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->suspend_flag = 1;
 879               	.LM93:
 880 0364 E091 0000 		lds r30,nrk_cur_task_TCB
 881 0368 F091 0000 		lds r31,nrk_cur_task_TCB+1
 882 036c 81E0      		ldi r24,lo8(1)
 883 036e 8583      		std Z+5,r24
 484:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->num_periods = 1;
 885               	.LM94:
 886 0370 81E0      		ldi r24,lo8(1)
 887 0372 90E0      		ldi r25,hi8(1)
 888 0374 90A3      		std Z+32,r25
 889 0376 878F      		std Z+31,r24
 485:../../../src/kernel/source/nrk_task.c ****     timer = _nrk_os_timer_get ();
 891               	.LM95:
 892 0378 0E94 0000 		call _nrk_os_timer_get
 893 037c F82E      		mov r15,r24
 489:../../../src/kernel/source/nrk_task.c ****     nw = _nrk_time_to_ticks (&t);
 895               	.LM96:
 896 037e CE01      		movw r24,r28
 897 0380 0196      		adiw r24,1
 898 0382 0E94 0000 		call _nrk_time_to_ticks
 491:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->next_wakeup = nw + timer;
 900               	.LM97:
 901 0386 E091 0000 		lds r30,nrk_cur_task_TCB
 902 038a F091 0000 		lds r31,nrk_cur_task_TCB+1
 903 038e 0F2D      		mov r16,r15
 904 0390 10E0      		ldi r17,lo8(0)
 905 0392 9801      		movw r18,r16
 906 0394 280F      		add r18,r24
 907 0396 391F      		adc r19,r25
 908 0398 368B      		std Z+22,r19
 909 039a 258B      		std Z+21,r18
 493:../../../src/kernel/source/nrk_task.c ****     if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
 911               	.LM98:
 912 039c 8F2D      		mov r24,r15
 913 039e 883F      		cpi r24,lo8(-8)
 914 03a0 00F4      		brsh .L43
 495:../../../src/kernel/source/nrk_task.c ****         if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 916               	.LM99:
 917 03a2 0E94 0000 		call _nrk_get_next_wakeup
 918 03a6 0F5F      		subi r16,lo8(-(1))
 919 03a8 1F4F      		sbci r17,hi8(-(1))
 920 03aa 282F      		mov r18,r24
 921 03ac 30E0      		ldi r19,lo8(0)
 922 03ae 0217      		cp r16,r18
 923 03b0 1307      		cpc r17,r19
 924 03b2 04F4      		brge .L43
 497:../../../src/kernel/source/nrk_task.c ****             timer += TIME_PAD;
 926               	.LM100:
 927 03b4 8F2D      		mov r24,r15
 928 03b6 8E5F      		subi r24,lo8(-(2))
 498:../../../src/kernel/source/nrk_task.c ****             _nrk_prev_timer_val = timer;
 930               	.LM101:
 931 03b8 8093 0000 		sts _nrk_prev_timer_val,r24
 499:../../../src/kernel/source/nrk_task.c ****             _nrk_set_next_wakeup (timer);
 933               	.LM102:
 934 03bc 0E94 0000 		call _nrk_set_next_wakeup
 935               	.L43:
 502:../../../src/kernel/source/nrk_task.c ****     nrk_int_enable ();
 937               	.LM103:
 938 03c0 0E94 0000 		call nrk_int_enable
 504:../../../src/kernel/source/nrk_task.c ****     _nrk_wait_for_scheduler ();
 940               	.LM104:
 941 03c4 0E94 0000 		call _nrk_wait_for_scheduler
 506:../../../src/kernel/source/nrk_task.c **** }
 943               	.LM105:
 944 03c8 81E0      		ldi r24,lo8(1)
 945               	/* epilogue start */
 946 03ca 2896      		adiw r28,8
 947 03cc 0FB6      		in __tmp_reg__,__SREG__
 948 03ce F894      		cli
 949 03d0 DEBF      		out __SP_H__,r29
 950 03d2 0FBE      		out __SREG__,__tmp_reg__
 951 03d4 CDBF      		out __SP_L__,r28
 952 03d6 CF91      		pop r28
 953 03d8 DF91      		pop r29
 954 03da 1F91      		pop r17
 955 03dc 0F91      		pop r16
 956 03de FF90      		pop r15
 957 03e0 0895      		ret
 959               	.Lscope8:
 961               		.stabd	78,0,0
 963               	.global	nrk_wait_until_nw
 965               	nrk_wait_until_nw:
 966               		.stabd	46,0,0
 453:../../../src/kernel/source/nrk_task.c **** {
 968               	.LM106:
 969               	.LFBB9:
 970 03e2 1F93      		push r17
 971               	/* prologue: function */
 972               	/* frame size = 0 */
 973               	/* stack size = 1 */
 974               	.L__stack_usage = 1
 455:../../../src/kernel/source/nrk_task.c ****     nrk_int_disable ();
 976               	.LM107:
 977 03e4 0E94 0000 		call nrk_int_disable
 456:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->suspend_flag = 1;
 979               	.LM108:
 980 03e8 E091 0000 		lds r30,nrk_cur_task_TCB
 981 03ec F091 0000 		lds r31,nrk_cur_task_TCB+1
 982 03f0 81E0      		ldi r24,lo8(1)
 983 03f2 8583      		std Z+5,r24
 457:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->nw_flag = 1;
 985               	.LM109:
 986 03f4 8683      		std Z+6,r24
 458:../../../src/kernel/source/nrk_task.c ****     timer = _nrk_os_timer_get ();
 988               	.LM110:
 989 03f6 0E94 0000 		call _nrk_os_timer_get
 990 03fa 182F      		mov r17,r24
 460:../../../src/kernel/source/nrk_task.c ****     if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
 992               	.LM111:
 993 03fc 883F      		cpi r24,lo8(-8)
 994 03fe 00F4      		brsh .L45
 461:../../../src/kernel/source/nrk_task.c ****         if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 996               	.LM112:
 997 0400 0E94 0000 		call _nrk_get_next_wakeup
 998 0404 212F      		mov r18,r17
 999 0406 30E0      		ldi r19,lo8(0)
 1000 0408 2F5F      		subi r18,lo8(-(1))
 1001 040a 3F4F      		sbci r19,hi8(-(1))
 1002 040c 482F      		mov r20,r24
 1003 040e 50E0      		ldi r21,lo8(0)
 1004 0410 2417      		cp r18,r20
 1005 0412 3507      		cpc r19,r21
 1006 0414 04F4      		brge .L45
 463:../../../src/kernel/source/nrk_task.c ****             timer += TIME_PAD;
 1008               	.LM113:
 1009 0416 812F      		mov r24,r17
 1010 0418 8E5F      		subi r24,lo8(-(2))
 464:../../../src/kernel/source/nrk_task.c ****             _nrk_prev_timer_val = timer;
 1012               	.LM114:
 1013 041a 8093 0000 		sts _nrk_prev_timer_val,r24
 465:../../../src/kernel/source/nrk_task.c ****             _nrk_set_next_wakeup (timer);
 1015               	.LM115:
 1016 041e 0E94 0000 		call _nrk_set_next_wakeup
 1017               	.L45:
 468:../../../src/kernel/source/nrk_task.c ****     nrk_int_enable ();
 1019               	.LM116:
 1020 0422 0E94 0000 		call nrk_int_enable
 470:../../../src/kernel/source/nrk_task.c ****     _nrk_wait_for_scheduler ();
 1022               	.LM117:
 1023 0426 0E94 0000 		call _nrk_wait_for_scheduler
 472:../../../src/kernel/source/nrk_task.c **** }
 1025               	.LM118:
 1026 042a 81E0      		ldi r24,lo8(1)
 1027               	/* epilogue start */
 1028 042c 1F91      		pop r17
 1029 042e 0895      		ret
 1031               	.Lscope9:
 1033               		.stabd	78,0,0
 1036               	.global	nrk_wait_until_ticks
 1038               	nrk_wait_until_ticks:
 1039               		.stabd	46,0,0
 396:../../../src/kernel/source/nrk_task.c **** {
 1041               	.LM119:
 1042               	.LFBB10:
 1043 0430 1F93      		push r17
 1044 0432 CF93      		push r28
 1045 0434 DF93      		push r29
 1046               	/* prologue: function */
 1047               	/* frame size = 0 */
 1048               	/* stack size = 3 */
 1049               	.L__stack_usage = 3
 1050 0436 EC01      		movw r28,r24
 398:../../../src/kernel/source/nrk_task.c ****     nrk_int_disable ();
 1052               	.LM120:
 1053 0438 0E94 0000 		call nrk_int_disable
 399:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->suspend_flag = 1;
 1055               	.LM121:
 1056 043c E091 0000 		lds r30,nrk_cur_task_TCB
 1057 0440 F091 0000 		lds r31,nrk_cur_task_TCB+1
 1058 0444 81E0      		ldi r24,lo8(1)
 1059 0446 8583      		std Z+5,r24
 400:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->next_wakeup = ticks;
 1061               	.LM122:
 1062 0448 D68B      		std Z+22,r29
 1063 044a C58B      		std Z+21,r28
 402:../../../src/kernel/source/nrk_task.c ****     timer = _nrk_os_timer_get ();
 1065               	.LM123:
 1066 044c 0E94 0000 		call _nrk_os_timer_get
 1067 0450 182F      		mov r17,r24
 404:../../../src/kernel/source/nrk_task.c ****     if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
 1069               	.LM124:
 1070 0452 883F      		cpi r24,lo8(-8)
 1071 0454 00F4      		brsh .L47
 405:../../../src/kernel/source/nrk_task.c ****         if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 1073               	.LM125:
 1074 0456 0E94 0000 		call _nrk_get_next_wakeup
 1075 045a 212F      		mov r18,r17
 1076 045c 30E0      		ldi r19,lo8(0)
 1077 045e 2F5F      		subi r18,lo8(-(1))
 1078 0460 3F4F      		sbci r19,hi8(-(1))
 1079 0462 482F      		mov r20,r24
 1080 0464 50E0      		ldi r21,lo8(0)
 1081 0466 2417      		cp r18,r20
 1082 0468 3507      		cpc r19,r21
 1083 046a 04F4      		brge .L47
 407:../../../src/kernel/source/nrk_task.c ****             timer += TIME_PAD;
 1085               	.LM126:
 1086 046c 812F      		mov r24,r17
 1087 046e 8E5F      		subi r24,lo8(-(2))
 408:../../../src/kernel/source/nrk_task.c ****             _nrk_prev_timer_val = timer;
 1089               	.LM127:
 1090 0470 8093 0000 		sts _nrk_prev_timer_val,r24
 409:../../../src/kernel/source/nrk_task.c ****             _nrk_set_next_wakeup (timer);
 1092               	.LM128:
 1093 0474 0E94 0000 		call _nrk_set_next_wakeup
 1094               	.L47:
 412:../../../src/kernel/source/nrk_task.c ****     nrk_int_enable ();
 1096               	.LM129:
 1097 0478 0E94 0000 		call nrk_int_enable
 414:../../../src/kernel/source/nrk_task.c ****     _nrk_wait_for_scheduler ();
 1099               	.LM130:
 1100 047c 0E94 0000 		call _nrk_wait_for_scheduler
 416:../../../src/kernel/source/nrk_task.c **** }
 1102               	.LM131:
 1103 0480 81E0      		ldi r24,lo8(1)
 1104               	/* epilogue start */
 1105 0482 DF91      		pop r29
 1106 0484 CF91      		pop r28
 1107 0486 1F91      		pop r17
 1108 0488 0895      		ret
 1110               	.Lscope10:
 1112               		.stabd	78,0,0
 1115               	.global	nrk_wait_ticks
 1117               	nrk_wait_ticks:
 1118               		.stabd	46,0,0
 363:../../../src/kernel/source/nrk_task.c **** {
 1120               	.LM132:
 1121               	.LFBB11:
 1122 048a EF92      		push r14
 1123 048c FF92      		push r15
 1124 048e 0F93      		push r16
 1125 0490 1F93      		push r17
 1126 0492 DF93      		push r29
 1127 0494 CF93      		push r28
 1128 0496 0F92      		push __tmp_reg__
 1129 0498 CDB7      		in r28,__SP_L__
 1130 049a DEB7      		in r29,__SP_H__
 1131               	/* prologue: function */
 1132               	/* frame size = 1 */
 1133               	/* stack size = 7 */
 1134               	.L__stack_usage = 7
 1135 049c 8C01      		movw r16,r24
 365:../../../src/kernel/source/nrk_task.c ****     nrk_int_disable ();
 1137               	.LM133:
 1138 049e 0E94 0000 		call nrk_int_disable
 366:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->suspend_flag = 1;
 1140               	.LM134:
 1141 04a2 E091 0000 		lds r30,nrk_cur_task_TCB
 1142 04a6 F091 0000 		lds r31,nrk_cur_task_TCB+1
 1143 04aa 81E0      		ldi r24,lo8(1)
 1144 04ac 8583      		std Z+5,r24
 367:../../../src/kernel/source/nrk_task.c ****     timer = _nrk_os_timer_get ();
 1146               	.LM135:
 1147 04ae 0E94 0000 		call _nrk_os_timer_get
 368:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->next_wakeup = ticks + timer;
 1149               	.LM136:
 1150 04b2 E091 0000 		lds r30,nrk_cur_task_TCB
 1151 04b6 F091 0000 		lds r31,nrk_cur_task_TCB+1
 1152 04ba E82E      		mov r14,r24
 1153 04bc FF24      		clr r15
 1154 04be 0E0D      		add r16,r14
 1155 04c0 1F1D      		adc r17,r15
 1156 04c2 168B      		std Z+22,r17
 1157 04c4 058B      		std Z+21,r16
 370:../../../src/kernel/source/nrk_task.c ****     if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
 1159               	.LM137:
 1160 04c6 883F      		cpi r24,lo8(-8)
 1161 04c8 00F4      		brsh .L49
 371:../../../src/kernel/source/nrk_task.c ****         if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 1163               	.LM138:
 1164 04ca 8983      		std Y+1,r24
 1165 04cc 0E94 0000 		call _nrk_get_next_wakeup
 1166 04d0 0894      		sec
 1167 04d2 E11C      		adc r14,__zero_reg__
 1168 04d4 F11C      		adc r15,__zero_reg__
 1169 04d6 282F      		mov r18,r24
 1170 04d8 30E0      		ldi r19,lo8(0)
 1171 04da 9981      		ldd r25,Y+1
 1172 04dc E216      		cp r14,r18
 1173 04de F306      		cpc r15,r19
 1174 04e0 04F4      		brge .L49
 373:../../../src/kernel/source/nrk_task.c ****             timer += TIME_PAD;
 1176               	.LM139:
 1177 04e2 892F      		mov r24,r25
 1178 04e4 8E5F      		subi r24,lo8(-(2))
 374:../../../src/kernel/source/nrk_task.c ****             _nrk_prev_timer_val = timer;
 1180               	.LM140:
 1181 04e6 8093 0000 		sts _nrk_prev_timer_val,r24
 375:../../../src/kernel/source/nrk_task.c ****             _nrk_set_next_wakeup (timer);
 1183               	.LM141:
 1184 04ea 0E94 0000 		call _nrk_set_next_wakeup
 1185               	.L49:
 378:../../../src/kernel/source/nrk_task.c ****     nrk_int_enable ();
 1187               	.LM142:
 1188 04ee 0E94 0000 		call nrk_int_enable
 380:../../../src/kernel/source/nrk_task.c ****     _nrk_wait_for_scheduler ();
 1190               	.LM143:
 1191 04f2 0E94 0000 		call _nrk_wait_for_scheduler
 382:../../../src/kernel/source/nrk_task.c **** }
 1193               	.LM144:
 1194 04f6 81E0      		ldi r24,lo8(1)
 1195               	/* epilogue start */
 1196 04f8 0F90      		pop __tmp_reg__
 1197 04fa CF91      		pop r28
 1198 04fc DF91      		pop r29
 1199 04fe 1F91      		pop r17
 1200 0500 0F91      		pop r16
 1201 0502 FF90      		pop r15
 1202 0504 EF90      		pop r14
 1203 0506 0895      		ret
 1205               	.Lscope11:
 1207               		.stabd	78,0,0
 1210               	.global	nrk_wait_until_next_n_periods
 1212               	nrk_wait_until_next_n_periods:
 1213               		.stabd	46,0,0
 325:../../../src/kernel/source/nrk_task.c **** {
 1215               	.LM145:
 1216               	.LFBB12:
 1217 0508 1F93      		push r17
 1218 050a CF93      		push r28
 1219 050c DF93      		push r29
 1220               	/* prologue: function */
 1221               	/* frame size = 0 */
 1222               	/* stack size = 3 */
 1223               	.L__stack_usage = 3
 1224 050e EC01      		movw r28,r24
 328:../../../src/kernel/source/nrk_task.c ****     nrk_stack_check ();
 1226               	.LM146:
 1227 0510 0E94 0000 		call nrk_stack_check
 330:../../../src/kernel/source/nrk_task.c ****     if (p == 0)
 1229               	.LM147:
 1230 0514 2097      		sbiw r28,0
 1231 0516 01F4      		brne .L51
 331:../../../src/kernel/source/nrk_task.c ****         p = 1;
 1233               	.LM148:
 1234 0518 C1E0      		ldi r28,lo8(1)
 1235 051a D0E0      		ldi r29,hi8(1)
 1236               	.L51:
 333:../../../src/kernel/source/nrk_task.c ****     nrk_int_disable ();
 1238               	.LM149:
 1239 051c 0E94 0000 		call nrk_int_disable
 334:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->suspend_flag = 1;
 1241               	.LM150:
 1242 0520 E091 0000 		lds r30,nrk_cur_task_TCB
 1243 0524 F091 0000 		lds r31,nrk_cur_task_TCB+1
 1244 0528 81E0      		ldi r24,lo8(1)
 1245 052a 8583      		std Z+5,r24
 335:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->num_periods = p;
 1247               	.LM151:
 1248 052c D0A3      		std Z+32,r29
 1249 052e C78F      		std Z+31,r28
 336:../../../src/kernel/source/nrk_task.c ****     timer = _nrk_os_timer_get ();
 1251               	.LM152:
 1252 0530 0E94 0000 		call _nrk_os_timer_get
 1253 0534 182F      		mov r17,r24
 341:../../../src/kernel/source/nrk_task.c ****     if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
 1255               	.LM153:
 1256 0536 883F      		cpi r24,lo8(-8)
 1257 0538 00F4      		brsh .L52
 342:../../../src/kernel/source/nrk_task.c ****         if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 1259               	.LM154:
 1260 053a 0E94 0000 		call _nrk_get_next_wakeup
 1261 053e 212F      		mov r18,r17
 1262 0540 30E0      		ldi r19,lo8(0)
 1263 0542 2F5F      		subi r18,lo8(-(1))
 1264 0544 3F4F      		sbci r19,hi8(-(1))
 1265 0546 482F      		mov r20,r24
 1266 0548 50E0      		ldi r21,lo8(0)
 1267 054a 2417      		cp r18,r20
 1268 054c 3507      		cpc r19,r21
 1269 054e 04F4      		brge .L52
 344:../../../src/kernel/source/nrk_task.c ****             timer += TIME_PAD;
 1271               	.LM155:
 1272 0550 812F      		mov r24,r17
 1273 0552 8E5F      		subi r24,lo8(-(2))
 345:../../../src/kernel/source/nrk_task.c ****             _nrk_prev_timer_val = timer;
 1275               	.LM156:
 1276 0554 8093 0000 		sts _nrk_prev_timer_val,r24
 346:../../../src/kernel/source/nrk_task.c ****             _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
 1278               	.LM157:
 1279 0558 0E94 0000 		call _nrk_set_next_wakeup
 1280               	.L52:
 349:../../../src/kernel/source/nrk_task.c ****     nrk_int_enable ();
 1282               	.LM158:
 1283 055c 0E94 0000 		call nrk_int_enable
 350:../../../src/kernel/source/nrk_task.c ****     _nrk_wait_for_scheduler ();
 1285               	.LM159:
 1286 0560 0E94 0000 		call _nrk_wait_for_scheduler
 352:../../../src/kernel/source/nrk_task.c **** }
 1288               	.LM160:
 1289 0564 81E0      		ldi r24,lo8(1)
 1290               	/* epilogue start */
 1291 0566 DF91      		pop r29
 1292 0568 CF91      		pop r28
 1293 056a 1F91      		pop r17
 1294 056c 0895      		ret
 1296               	.Lscope12:
 1298               		.stabd	78,0,0
 1300               	.global	nrk_wait_until_next_period
 1302               	nrk_wait_until_next_period:
 1303               		.stabd	46,0,0
 299:../../../src/kernel/source/nrk_task.c **** {
 1305               	.LM161:
 1306               	.LFBB13:
 1307 056e 1F93      		push r17
 1308               	/* prologue: function */
 1309               	/* frame size = 0 */
 1310               	/* stack size = 1 */
 1311               	.L__stack_usage = 1
 302:../../../src/kernel/source/nrk_task.c ****     nrk_stack_check ();
 1313               	.LM162:
 1314 0570 0E94 0000 		call nrk_stack_check
 304:../../../src/kernel/source/nrk_task.c ****     nrk_int_disable ();
 1316               	.LM163:
 1317 0574 0E94 0000 		call nrk_int_disable
 305:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->num_periods = 1;
 1319               	.LM164:
 1320 0578 E091 0000 		lds r30,nrk_cur_task_TCB
 1321 057c F091 0000 		lds r31,nrk_cur_task_TCB+1
 1322 0580 81E0      		ldi r24,lo8(1)
 1323 0582 90E0      		ldi r25,hi8(1)
 1324 0584 90A3      		std Z+32,r25
 1325 0586 878F      		std Z+31,r24
 306:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->suspend_flag = 1;
 1327               	.LM165:
 1328 0588 81E0      		ldi r24,lo8(1)
 1329 058a 8583      		std Z+5,r24
 307:../../../src/kernel/source/nrk_task.c ****     timer = _nrk_os_timer_get ();
 1331               	.LM166:
 1332 058c 0E94 0000 		call _nrk_os_timer_get
 1333 0590 182F      		mov r17,r24
 311:../../../src/kernel/source/nrk_task.c ****     if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
 1335               	.LM167:
 1336 0592 883F      		cpi r24,lo8(-8)
 1337 0594 00F4      		brsh .L55
 312:../../../src/kernel/source/nrk_task.c ****         if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 1339               	.LM168:
 1340 0596 0E94 0000 		call _nrk_get_next_wakeup
 1341 059a 212F      		mov r18,r17
 1342 059c 30E0      		ldi r19,lo8(0)
 1343 059e 2F5F      		subi r18,lo8(-(1))
 1344 05a0 3F4F      		sbci r19,hi8(-(1))
 1345 05a2 482F      		mov r20,r24
 1346 05a4 50E0      		ldi r21,lo8(0)
 1347 05a6 2417      		cp r18,r20
 1348 05a8 3507      		cpc r19,r21
 1349 05aa 04F4      		brge .L55
 314:../../../src/kernel/source/nrk_task.c ****             timer += TIME_PAD;
 1351               	.LM169:
 1352 05ac 812F      		mov r24,r17
 1353 05ae 8E5F      		subi r24,lo8(-(2))
 315:../../../src/kernel/source/nrk_task.c ****             _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this 
 1355               	.LM170:
 1356 05b0 8093 0000 		sts _nrk_prev_timer_val,r24
 316:../../../src/kernel/source/nrk_task.c ****             _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
 1358               	.LM171:
 1359 05b4 0E94 0000 		call _nrk_set_next_wakeup
 1360               	.L55:
 319:../../../src/kernel/source/nrk_task.c ****     nrk_int_enable ();
 1362               	.LM172:
 1363 05b8 0E94 0000 		call nrk_int_enable
 320:../../../src/kernel/source/nrk_task.c ****     _nrk_wait_for_scheduler ();
 1365               	.LM173:
 1366 05bc 0E94 0000 		call _nrk_wait_for_scheduler
 322:../../../src/kernel/source/nrk_task.c **** }
 1368               	.LM174:
 1369 05c0 81E0      		ldi r24,lo8(1)
 1370               	/* epilogue start */
 1371 05c2 1F91      		pop r17
 1372 05c4 0895      		ret
 1374               	.Lscope13:
 1376               		.stabd	78,0,0
 1378               	.global	nrk_terminate_task
 1380               	nrk_terminate_task:
 1381               		.stabd	46,0,0
 289:../../../src/kernel/source/nrk_task.c **** {
 1383               	.LM175:
 1384               	.LFBB14:
 1385               	/* prologue: function */
 1386               	/* frame size = 0 */
 1387               	/* stack size = 0 */
 1388               	.L__stack_usage = 0
 290:../../../src/kernel/source/nrk_task.c ****     nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
 1390               	.LM176:
 1391 05c6 E091 0000 		lds r30,nrk_cur_task_TCB
 1392 05ca F091 0000 		lds r31,nrk_cur_task_TCB+1
 1393 05ce 8085      		ldd r24,Z+8
 1394 05d0 0E94 0000 		call nrk_rem_from_readyQ
 291:../../../src/kernel/source/nrk_task.c ****     nrk_cur_task_TCB->task_state = FINISHED;
 1396               	.LM177:
 1397 05d4 E091 0000 		lds r30,nrk_cur_task_TCB
 1398 05d8 F091 0000 		lds r31,nrk_cur_task_TCB+1
 1399 05dc 84E0      		ldi r24,lo8(4)
 1400 05de 8187      		std Z+9,r24
 294:../../../src/kernel/source/nrk_task.c ****     nrk_wait_until_next_period ();
 1402               	.LM178:
 1403 05e0 0E94 0000 		call nrk_wait_until_next_period
 296:../../../src/kernel/source/nrk_task.c **** }
 1405               	.LM179:
 1406 05e4 81E0      		ldi r24,lo8(1)
 1407               	/* epilogue start */
 1408 05e6 0895      		ret
 1410               	.Lscope14:
 1412               		.stabd	78,0,0
 1415               	.global	nrk_wait_until
 1417               	nrk_wait_until:
 1418               		.stabd	46,0,0
 521:../../../src/kernel/source/nrk_task.c **** 
 522:../../../src/kernel/source/nrk_task.c **** 
 523:../../../src/kernel/source/nrk_task.c **** int8_t nrk_wait_until (nrk_time_t t)
 524:../../../src/kernel/source/nrk_task.c **** {
 1420               	.LM180:
 1421               	.LFBB15:
 1422 05e8 8F92      		push r8
 1423 05ea 9F92      		push r9
 1424 05ec AF92      		push r10
 1425 05ee BF92      		push r11
 1426 05f0 CF92      		push r12
 1427 05f2 DF92      		push r13
 1428 05f4 EF92      		push r14
 1429 05f6 FF92      		push r15
 1430 05f8 0F93      		push r16
 1431 05fa 1F93      		push r17
 1432 05fc DF93      		push r29
 1433 05fe CF93      		push r28
 1434 0600 CDB7      		in r28,__SP_L__
 1435 0602 DEB7      		in r29,__SP_H__
 1436 0604 6097      		sbiw r28,16
 1437 0606 0FB6      		in __tmp_reg__,__SREG__
 1438 0608 F894      		cli
 1439 060a DEBF      		out __SP_H__,r29
 1440 060c 0FBE      		out __SREG__,__tmp_reg__
 1441 060e CDBF      		out __SP_L__,r28
 1442               	/* prologue: function */
 1443               	/* frame size = 16 */
 1444               	/* stack size = 28 */
 1445               	.L__stack_usage = 28
 1446 0610 2987      		std Y+9,r18
 1447 0612 3A87      		std Y+10,r19
 1448 0614 4B87      		std Y+11,r20
 1449 0616 5C87      		std Y+12,r21
 1450 0618 6D87      		std Y+13,r22
 1451 061a 7E87      		std Y+14,r23
 1452 061c 8F87      		std Y+15,r24
 1453 061e 988B      		std Y+16,r25
 525:../../../src/kernel/source/nrk_task.c ****     nrk_time_t ct;
 526:../../../src/kernel/source/nrk_task.c ****     int8_t v;
 527:../../../src/kernel/source/nrk_task.c **** //    uint8_t c;
 528:../../../src/kernel/source/nrk_task.c **** 
 529:../../../src/kernel/source/nrk_task.c ****     //c = _nrk_os_timer_get ();
 530:../../../src/kernel/source/nrk_task.c ****     //do{
 531:../../../src/kernel/source/nrk_task.c ****     //}while(_nrk_os_timer_get()==c);
 532:../../../src/kernel/source/nrk_task.c **** 
 533:../../../src/kernel/source/nrk_task.c ****     //ttt=c+1;
 534:../../../src/kernel/source/nrk_task.c ****     nrk_time_get (&ct);
 1455               	.LM181:
 1456 0620 CE01      		movw r24,r28
 1457 0622 0196      		adiw r24,1
 1458 0624 0E94 0000 		call nrk_time_get
 535:../../../src/kernel/source/nrk_task.c **** 
 536:../../../src/kernel/source/nrk_task.c ****     v = nrk_time_sub (&t, t, ct);
 1460               	.LM182:
 1461 0628 CE01      		movw r24,r28
 1462 062a 0996      		adiw r24,9
 1463 062c 0985      		ldd r16,Y+9
 1464 062e 1A85      		ldd r17,Y+10
 1465 0630 2B85      		ldd r18,Y+11
 1466 0632 3C85      		ldd r19,Y+12
 1467 0634 4D85      		ldd r20,Y+13
 1468 0636 5E85      		ldd r21,Y+14
 1469 0638 6F85      		ldd r22,Y+15
 1470 063a 7889      		ldd r23,Y+16
 1471 063c 8980      		ldd r8,Y+1
 1472 063e 9A80      		ldd r9,Y+2
 1473 0640 AB80      		ldd r10,Y+3
 1474 0642 BC80      		ldd r11,Y+4
 1475 0644 CD80      		ldd r12,Y+5
 1476 0646 DE80      		ldd r13,Y+6
 1477 0648 EF80      		ldd r14,Y+7
 1478 064a F884      		ldd r15,Y+8
 1479 064c 0E94 0000 		call nrk_time_sub
 537:../../../src/kernel/source/nrk_task.c ****     //nrk_time_compact_nanos(&t);
 538:../../../src/kernel/source/nrk_task.c ****     if (v == NRK_ERROR)
 1481               	.LM183:
 1482 0650 8F3F      		cpi r24,lo8(-1)
 1483 0652 01F0      		breq .L59
 539:../../../src/kernel/source/nrk_task.c ****     {
 540:../../../src/kernel/source/nrk_task.c ****         return NRK_ERROR;
 541:../../../src/kernel/source/nrk_task.c ****     }
 542:../../../src/kernel/source/nrk_task.c **** //if(t.secs<ct.secs) return 0;
 543:../../../src/kernel/source/nrk_task.c **** //if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;
 544:../../../src/kernel/source/nrk_task.c **** 
 545:../../../src/kernel/source/nrk_task.c **** //t.secs-=ct.secs;
 546:../../../src/kernel/source/nrk_task.c **** //t.nano_secs-=ct.nano_secs;
 547:../../../src/kernel/source/nrk_task.c **** //
 548:../../../src/kernel/source/nrk_task.c ****     nrk_wait (t);
 1485               	.LM184:
 1486 0654 2985      		ldd r18,Y+9
 1487 0656 3A85      		ldd r19,Y+10
 1488 0658 4B85      		ldd r20,Y+11
 1489 065a 5C85      		ldd r21,Y+12
 1490 065c 6D85      		ldd r22,Y+13
 1491 065e 7E85      		ldd r23,Y+14
 1492 0660 8F85      		ldd r24,Y+15
 1493 0662 9889      		ldd r25,Y+16
 1494 0664 0E94 0000 		call nrk_wait
 549:../../../src/kernel/source/nrk_task.c **** 
 550:../../../src/kernel/source/nrk_task.c ****     return NRK_OK;
 1496               	.LM185:
 1497 0668 81E0      		ldi r24,lo8(1)
 1498 066a 00C0      		rjmp .L58
 1499               	.L59:
 540:../../../src/kernel/source/nrk_task.c ****         return NRK_ERROR;
 1501               	.LM186:
 1502 066c 8FEF      		ldi r24,lo8(-1)
 1503               	.L58:
 1504               	/* epilogue start */
 551:../../../src/kernel/source/nrk_task.c **** }
 1506               	.LM187:
 1507 066e 6096      		adiw r28,16
 1508 0670 0FB6      		in __tmp_reg__,__SREG__
 1509 0672 F894      		cli
 1510 0674 DEBF      		out __SP_H__,r29
 1511 0676 0FBE      		out __SREG__,__tmp_reg__
 1512 0678 CDBF      		out __SP_L__,r28
 1513 067a CF91      		pop r28
 1514 067c DF91      		pop r29
 1515 067e 1F91      		pop r17
 1516 0680 0F91      		pop r16
 1517 0682 FF90      		pop r15
 1518 0684 EF90      		pop r14
 1519 0686 DF90      		pop r13
 1520 0688 CF90      		pop r12
 1521 068a BF90      		pop r11
 1522 068c AF90      		pop r10
 1523 068e 9F90      		pop r9
 1524 0690 8F90      		pop r8
 1525 0692 0895      		ret
 1530               	.Lscope15:
 1532               		.stabd	78,0,0
 1534               	.global	nrk_get_pid
 1536               	nrk_get_pid:
 1537               		.stabd	46,0,0
 552:../../../src/kernel/source/nrk_task.c **** 
 553:../../../src/kernel/source/nrk_task.c **** 
 554:../../../src/kernel/source/nrk_task.c **** uint8_t nrk_get_pid ()
 555:../../../src/kernel/source/nrk_task.c **** {
 1539               	.LM188:
 1540               	.LFBB16:
 1541               	/* prologue: function */
 1542               	/* frame size = 0 */
 1543               	/* stack size = 0 */
 1544               	.L__stack_usage = 0
 556:../../../src/kernel/source/nrk_task.c ****     return nrk_cur_task_TCB->task_ID;
 1546               	.LM189:
 1547 0694 E091 0000 		lds r30,nrk_cur_task_TCB
 1548 0698 F091 0000 		lds r31,nrk_cur_task_TCB+1
 557:../../../src/kernel/source/nrk_task.c **** }
 1550               	.LM190:
 1551 069c 8085      		ldd r24,Z+8
 1552               	/* epilogue start */
 1553 069e 0895      		ret
 1555               	.Lscope16:
 1557               		.stabd	78,0,0
 1558               		.comm _nrk_signal_list,4,1
 1559               		.comm nrk_idle_task_stk,128,1
 1560               		.comm nrk_kernel_stk_ptr,2,1
 1561               		.comm _nrk_prev_timer_val,1,1
 1562               		.comm _nrk_time_trigger,1,1
 1563               		.comm app_timer0_callback,2,1
 1564               		.comm app_timer0_prescale,1,1
 1565               		.comm _nrk_cpu_state,1,1
 1566               		.comm next_next_wakeup,2,1
 1567               		.comm error_task,1,1
 1568               		.comm error_num,1,1
 1581               	.Letext0:
 1582               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 nrk_task.c
     /tmp/ccqgQmTF.s:2      *ABS*:0000003f __SREG__
     /tmp/ccqgQmTF.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccqgQmTF.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccqgQmTF.s:5      *ABS*:00000034 __CCP__
     /tmp/ccqgQmTF.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccqgQmTF.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccqgQmTF.s:140    .text:00000000 nrk_get_high_ready_task_ID
     /tmp/ccqgQmTF.s:165    .text:0000000c nrk_print_readyQ
     /tmp/ccqgQmTF.s:207    .text:00000022 nrk_add_to_readyQ
     /tmp/ccqgQmTF.s:458    .text:00000166 nrk_rem_from_readyQ
     /tmp/ccqgQmTF.s:588    .text:00000206 nrk_activate_task
     /tmp/ccqgQmTF.s:720    .text:000002b0 nrk_set_next_wakeup
     /tmp/ccqgQmTF.s:810    .text:0000031e _nrk_wait_for_scheduler
     /tmp/ccqgQmTF.s:842    .text:00000332 nrk_wait
                            *COM*:00000001 _nrk_prev_timer_val
     /tmp/ccqgQmTF.s:965    .text:000003e2 nrk_wait_until_nw
     /tmp/ccqgQmTF.s:1038   .text:00000430 nrk_wait_until_ticks
     /tmp/ccqgQmTF.s:1117   .text:0000048a nrk_wait_ticks
     /tmp/ccqgQmTF.s:1212   .text:00000508 nrk_wait_until_next_n_periods
     /tmp/ccqgQmTF.s:1302   .text:0000056e nrk_wait_until_next_period
     /tmp/ccqgQmTF.s:1380   .text:000005c6 nrk_terminate_task
     /tmp/ccqgQmTF.s:1417   .text:000005e8 nrk_wait_until
     /tmp/ccqgQmTF.s:1536   .text:00000694 nrk_get_pid
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale
                            *COM*:00000001 _nrk_cpu_state
                            *COM*:00000002 next_next_wakeup
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num

UNDEFINED SYMBOLS
_head_node
_free_node
nrk_task_TCB
nrk_task_stk_init
nrk_TCB_init
nrk_int_disable
_nrk_os_timer_get
_nrk_time_to_ticks
nrk_cur_task_TCB
nrk_int_enable
nrk_idle
nrk_stack_check
_nrk_get_next_wakeup
_nrk_set_next_wakeup
nrk_time_get
nrk_time_sub
__do_clear_bss
