   1               		.file	"nrk_stack_check.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  12               		.text
  13               	.Ltext0:
 136               	.global	nrk_stack_check_pid
 138               	nrk_stack_check_pid:
 139               		.stabd	46,0,0
   0:../../../src/kernel/source/nrk_stack_check.c **** /******************************************************************************
   1:../../../src/kernel/source/nrk_stack_check.c **** *  Nano-RK, a real-time operating system for sensor networks.
   2:../../../src/kernel/source/nrk_stack_check.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   3:../../../src/kernel/source/nrk_stack_check.c **** *  All rights reserved.
   4:../../../src/kernel/source/nrk_stack_check.c **** *
   5:../../../src/kernel/source/nrk_stack_check.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   6:../../../src/kernel/source/nrk_stack_check.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   7:../../../src/kernel/source/nrk_stack_check.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   8:../../../src/kernel/source/nrk_stack_check.c **** *
   9:../../../src/kernel/source/nrk_stack_check.c **** *  This program is free software: you can redistribute it and/or modify
  10:../../../src/kernel/source/nrk_stack_check.c **** *  it under the terms of the GNU General Public License as published by
  11:../../../src/kernel/source/nrk_stack_check.c **** *  the Free Software Foundation, version 2.0 of the License.
  12:../../../src/kernel/source/nrk_stack_check.c **** *
  13:../../../src/kernel/source/nrk_stack_check.c **** *  This program is distributed in the hope that it will be useful,
  14:../../../src/kernel/source/nrk_stack_check.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:../../../src/kernel/source/nrk_stack_check.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:../../../src/kernel/source/nrk_stack_check.c **** *  GNU General Public License for more details.
  17:../../../src/kernel/source/nrk_stack_check.c **** *
  18:../../../src/kernel/source/nrk_stack_check.c **** *  You should have received a copy of the GNU General Public License
  19:../../../src/kernel/source/nrk_stack_check.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  20:../../../src/kernel/source/nrk_stack_check.c **** *
  21:../../../src/kernel/source/nrk_stack_check.c **** *  Contributing Authors (specific to this file):
  22:../../../src/kernel/source/nrk_stack_check.c **** *  Anthony Rowe
  23:../../../src/kernel/source/nrk_stack_check.c **** *  Zane Starr
  24:../../../src/kernel/source/nrk_stack_check.c **** *******************************************************************************/
  25:../../../src/kernel/source/nrk_stack_check.c **** 
  26:../../../src/kernel/source/nrk_stack_check.c **** #include <nrk.h>
  27:../../../src/kernel/source/nrk_stack_check.c **** #include <nrk_error.h>
  28:../../../src/kernel/source/nrk_stack_check.c **** #include <nrk_stack_check.h>
  29:../../../src/kernel/source/nrk_stack_check.c **** #include <stdio.h>
  30:../../../src/kernel/source/nrk_stack_check.c **** 
  31:../../../src/kernel/source/nrk_stack_check.c **** void dump_stack_info()
  32:../../../src/kernel/source/nrk_stack_check.c **** {
  33:../../../src/kernel/source/nrk_stack_check.c ****     unsigned int *stk;
  34:../../../src/kernel/source/nrk_stack_check.c ****     unsigned char *stkc;
  35:../../../src/kernel/source/nrk_stack_check.c ****     uint8_t i;
  36:../../../src/kernel/source/nrk_stack_check.c **** 
  37:../../../src/kernel/source/nrk_stack_check.c ****     nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
  38:../../../src/kernel/source/nrk_stack_check.c **** 
  39:../../../src/kernel/source/nrk_stack_check.c ****     printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
  40:../../../src/kernel/source/nrk_stack_check.c ****     stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
  41:../../../src/kernel/source/nrk_stack_check.c ****     stkc = (unsigned char*)stk;
  42:../../../src/kernel/source/nrk_stack_check.c ****     printf( "bottom = %x ",(uint16_t)stkc );
  43:../../../src/kernel/source/nrk_stack_check.c ****     printf( "canary = %x ",*stkc );
  44:../../../src/kernel/source/nrk_stack_check.c ****     stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
  45:../../../src/kernel/source/nrk_stack_check.c ****     stkc = (unsigned char*)stk;
  46:../../../src/kernel/source/nrk_stack_check.c ****     printf( "stk = %x ",(uint16_t)stkc );
  47:../../../src/kernel/source/nrk_stack_check.c ****     printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
  48:../../../src/kernel/source/nrk_stack_check.c **** 
  49:../../../src/kernel/source/nrk_stack_check.c ****     for(i=0; i<NRK_MAX_TASKS; i++ )
  50:../../../src/kernel/source/nrk_stack_check.c ****     {
  51:../../../src/kernel/source/nrk_stack_check.c ****         stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
  52:../../../src/kernel/source/nrk_stack_check.c ****         stkc = (unsigned char*)stk;
  53:../../../src/kernel/source/nrk_stack_check.c ****         printf( "%d: bottom = %x ",i,(uint16_t)stkc );
  54:../../../src/kernel/source/nrk_stack_check.c ****         printf( "canary = %x ",*stkc );
  55:../../../src/kernel/source/nrk_stack_check.c ****         stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
  56:../../../src/kernel/source/nrk_stack_check.c ****         stkc = (unsigned char*)stk;
  57:../../../src/kernel/source/nrk_stack_check.c ****         printf( "stk = %x ",(uint16_t)stkc );
  58:../../../src/kernel/source/nrk_stack_check.c ****         printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
  59:../../../src/kernel/source/nrk_stack_check.c **** 
  60:../../../src/kernel/source/nrk_stack_check.c ****     }
  61:../../../src/kernel/source/nrk_stack_check.c **** 
  62:../../../src/kernel/source/nrk_stack_check.c **** }
  63:../../../src/kernel/source/nrk_stack_check.c **** 
  64:../../../src/kernel/source/nrk_stack_check.c **** 
  65:../../../src/kernel/source/nrk_stack_check.c **** /*
  66:../../../src/kernel/source/nrk_stack_check.c ****  * Simple Canary value stack overflow check.
  67:../../../src/kernel/source/nrk_stack_check.c ****  * If the end of the stack was overwritten, then flag an error.
  68:../../../src/kernel/source/nrk_stack_check.c ****  *
  69:../../../src/kernel/source/nrk_stack_check.c ****  * */
  70:../../../src/kernel/source/nrk_stack_check.c **** //inline void nrk_stack_check()
  71:../../../src/kernel/source/nrk_stack_check.c **** void nrk_stack_check()
  72:../../../src/kernel/source/nrk_stack_check.c **** {
  73:../../../src/kernel/source/nrk_stack_check.c **** #ifdef NRK_STACK_CHECK
  74:../../../src/kernel/source/nrk_stack_check.c **** 
  75:../../../src/kernel/source/nrk_stack_check.c ****     unsigned int *stk ;  // 2 bytes
  76:../../../src/kernel/source/nrk_stack_check.c ****     unsigned char *stkc; // 1 byte
  77:../../../src/kernel/source/nrk_stack_check.c **** 
  78:../../../src/kernel/source/nrk_stack_check.c ****     stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
  79:../../../src/kernel/source/nrk_stack_check.c ****     stkc = (unsigned char*)stk;
  80:../../../src/kernel/source/nrk_stack_check.c ****     if(*stkc != STK_CANARY_VAL)
  81:../../../src/kernel/source/nrk_stack_check.c ****     {
  82:../../../src/kernel/source/nrk_stack_check.c **** #ifdef NRK_REPORT_ERRORS
  83:../../../src/kernel/source/nrk_stack_check.c ****         dump_stack_info();
  84:../../../src/kernel/source/nrk_stack_check.c **** #endif
  85:../../../src/kernel/source/nrk_stack_check.c ****         nrk_error_add( NRK_STACK_OVERFLOW );
  86:../../../src/kernel/source/nrk_stack_check.c ****         *stkc=STK_CANARY_VAL;
  87:../../../src/kernel/source/nrk_stack_check.c ****     }
  88:../../../src/kernel/source/nrk_stack_check.c **** 
  89:../../../src/kernel/source/nrk_stack_check.c ****     stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
  90:../../../src/kernel/source/nrk_stack_check.c ****     stkc = (unsigned char*)stk;
  91:../../../src/kernel/source/nrk_stack_check.c ****     if(stkc > (unsigned char *)RAMEND )
  92:../../../src/kernel/source/nrk_stack_check.c ****     {
  93:../../../src/kernel/source/nrk_stack_check.c **** #ifdef NRK_REPORT_ERRORS
  94:../../../src/kernel/source/nrk_stack_check.c ****         dump_stack_info();
  95:../../../src/kernel/source/nrk_stack_check.c **** #endif
  96:../../../src/kernel/source/nrk_stack_check.c ****         nrk_error_add( NRK_INVALID_STACK_POINTER);
  97:../../../src/kernel/source/nrk_stack_check.c ****     }
  98:../../../src/kernel/source/nrk_stack_check.c **** 
  99:../../../src/kernel/source/nrk_stack_check.c **** 
 100:../../../src/kernel/source/nrk_stack_check.c **** 
 101:../../../src/kernel/source/nrk_stack_check.c **** 
 102:../../../src/kernel/source/nrk_stack_check.c **** #endif
 103:../../../src/kernel/source/nrk_stack_check.c **** }
 104:../../../src/kernel/source/nrk_stack_check.c **** 
 105:../../../src/kernel/source/nrk_stack_check.c **** int8_t nrk_stack_check_pid(int8_t pid)
 106:../../../src/kernel/source/nrk_stack_check.c **** {
 141               	.LM0:
 142               	.LFBB1:
 143               	/* prologue: function */
 144               	/* frame size = 0 */
 107:../../../src/kernel/source/nrk_stack_check.c **** #ifdef NRK_STACK_CHECK
 108:../../../src/kernel/source/nrk_stack_check.c **** 
 109:../../../src/kernel/source/nrk_stack_check.c ****     unsigned int *stk ;  // 2 bytes
 110:../../../src/kernel/source/nrk_stack_check.c ****     unsigned char *stkc; // 1 byte
 111:../../../src/kernel/source/nrk_stack_check.c **** 
 112:../../../src/kernel/source/nrk_stack_check.c ****     stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
 146               	.LM1:
 147 0000 9927      		clr r25
 148 0002 87FD      		sbrc r24,7
 149 0004 9095      		com r25
 150 0006 FC01      		movw r30,r24
 151 0008 25E0      		ldi r18,5
 152 000a EE0F      	1:	lsl r30
 153 000c FF1F      		rol r31
 154 000e 2A95      		dec r18
 155 0010 01F4      		brne 1b
 156 0012 E80F      		add r30,r24
 157 0014 F91F      		adc r31,r25
 158 0016 E050      		subi r30,lo8(-(nrk_task_TCB))
 159 0018 F040      		sbci r31,hi8(-(nrk_task_TCB))
 160 001a A281      		ldd r26,Z+2
 161 001c B381      		ldd r27,Z+3
 113:../../../src/kernel/source/nrk_stack_check.c ****     stkc = (unsigned char*)stk;
 114:../../../src/kernel/source/nrk_stack_check.c ****     if(*stkc != STK_CANARY_VAL)
 163               	.LM2:
 164 001e 8C91      		ld r24,X
 165 0020 8535      		cpi r24,lo8(85)
 166 0022 01F0      		breq .L2
 115:../../../src/kernel/source/nrk_stack_check.c ****     {
 116:../../../src/kernel/source/nrk_stack_check.c ****         *stkc=STK_CANARY_VAL;
 168               	.LM3:
 169 0024 85E5      		ldi r24,lo8(85)
 170 0026 8C93      		st X,r24
 171 0028 8FEF      		ldi r24,lo8(-1)
 172 002a 0895      		ret
 173               	.L2:
 117:../../../src/kernel/source/nrk_stack_check.c ****         return NRK_ERROR;
 118:../../../src/kernel/source/nrk_stack_check.c ****     }
 119:../../../src/kernel/source/nrk_stack_check.c ****     stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
 120:../../../src/kernel/source/nrk_stack_check.c ****     stkc = (unsigned char*)stk;
 121:../../../src/kernel/source/nrk_stack_check.c ****     if(stkc > (unsigned char *)RAMEND )
 175               	.LM4:
 176 002c 8081      		ld r24,Z
 177 002e 9181      		ldd r25,Z+1
 178 0030 8050      		subi r24,lo8(4352)
 179 0032 9141      		sbci r25,hi8(4352)
 180 0034 00F4      		brsh .L4
 181 0036 81E0      		ldi r24,lo8(1)
 182 0038 0895      		ret
 183               	.L4:
 122:../../../src/kernel/source/nrk_stack_check.c ****     {
 123:../../../src/kernel/source/nrk_stack_check.c ****         nrk_error_add( NRK_INVALID_STACK_POINTER);
 185               	.LM5:
 186 003a 82E1      		ldi r24,lo8(18)
 187 003c 0E94 0000 		call nrk_error_add
 188 0040 8FEF      		ldi r24,lo8(-1)
 124:../../../src/kernel/source/nrk_stack_check.c ****         return NRK_ERROR;
 125:../../../src/kernel/source/nrk_stack_check.c ****     }
 126:../../../src/kernel/source/nrk_stack_check.c **** #endif
 127:../../../src/kernel/source/nrk_stack_check.c ****     return NRK_OK;
 128:../../../src/kernel/source/nrk_stack_check.c **** }
 190               	.LM6:
 191 0042 0895      		ret
 193               	.Lscope1:
 195               		.stabd	78,0,0
 196               		.data
 197               	.LC0:
 198 0000 6375 723A 		.string	"cur: %d "
 198      2025 6420 
 198      00
 199               	.LC1:
 200 0009 626F 7474 		.string	"bottom = %x "
 200      6F6D 203D 
 200      2025 7820 
 200      00
 201               	.LC2:
 202 0016 6361 6E61 		.string	"canary = %x "
 202      7279 203D 
 202      2025 7820 
 202      00
 203               	.LC3:
 204 0023 7374 6B20 		.string	"stk = %x "
 204      3D20 2578 
 204      2000 
 205               	.LC4:
 206 002d 7463 6220 		.string	"tcb addr = %x\r\n"
 206      6164 6472 
 206      203D 2025 
 206      780D 0A00 
 207               	.LC5:
 208 003d 2564 3A20 		.string	"%d: bottom = %x "
 208      626F 7474 
 208      6F6D 203D 
 208      2025 7820 
 208      00
 209               		.text
 211               	.global	dump_stack_info
 213               	dump_stack_info:
 214               		.stabd	46,0,0
  33:../../../src/kernel/source/nrk_stack_check.c **** {
 216               	.LM7:
 217               	.LFBB2:
 218 0044 6F92      		push r6
 219 0046 7F92      		push r7
 220 0048 8F92      		push r8
 221 004a 9F92      		push r9
 222 004c AF92      		push r10
 223 004e BF92      		push r11
 224 0050 CF92      		push r12
 225 0052 DF92      		push r13
 226 0054 EF92      		push r14
 227 0056 FF92      		push r15
 228 0058 0F93      		push r16
 229 005a 1F93      		push r17
 230 005c CF93      		push r28
 231 005e DF93      		push r29
 232               	/* prologue: function */
 233               	/* frame size = 0 */
  38:../../../src/kernel/source/nrk_stack_check.c ****     nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
 235               	.LM8:
 236 0060 80E0      		ldi r24,lo8(__c.1964)
 237 0062 90E0      		ldi r25,hi8(__c.1964)
 238 0064 0E94 0000 		call nrk_kprintf
  40:../../../src/kernel/source/nrk_stack_check.c ****     printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
 240               	.LM9:
 241 0068 00D0      		rcall .
 242 006a 00D0      		rcall .
 243 006c 80E0      		ldi r24,lo8(.LC0)
 244 006e 90E0      		ldi r25,hi8(.LC0)
 245 0070 ADB7      		in r26,__SP_L__
 246 0072 BEB7      		in r27,__SP_H__
 247 0074 1296      		adiw r26,1+1
 248 0076 9C93      		st X,r25
 249 0078 8E93      		st -X,r24
 250 007a 1197      		sbiw r26,1
 251 007c E091 0000 		lds r30,nrk_cur_task_TCB
 252 0080 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 253 0084 8085      		ldd r24,Z+8
 254 0086 9927      		clr r25
 255 0088 87FD      		sbrc r24,7
 256 008a 9095      		com r25
 257 008c 1496      		adiw r26,3+1
 258 008e 9C93      		st X,r25
 259 0090 8E93      		st -X,r24
 260 0092 1397      		sbiw r26,3
 261 0094 0E94 0000 		call printf
  41:../../../src/kernel/source/nrk_stack_check.c ****     stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
 263               	.LM10:
 264 0098 E091 0000 		lds r30,nrk_cur_task_TCB
 265 009c F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 266 00a0 0281      		ldd r16,Z+2
 267 00a2 1381      		ldd r17,Z+3
  43:../../../src/kernel/source/nrk_stack_check.c ****     printf( "bottom = %x ",(uint16_t)stkc );
 269               	.LM11:
 270 00a4 80E0      		ldi r24,lo8(.LC1)
 271 00a6 90E0      		ldi r25,hi8(.LC1)
 272 00a8 EDB7      		in r30,__SP_L__
 273 00aa FEB7      		in r31,__SP_H__
 274 00ac 9283      		std Z+2,r25
 275 00ae 8183      		std Z+1,r24
 276 00b0 1483      		std Z+4,r17
 277 00b2 0383      		std Z+3,r16
 278 00b4 0E94 0000 		call printf
  44:../../../src/kernel/source/nrk_stack_check.c ****     printf( "canary = %x ",*stkc );
 280               	.LM12:
 281 00b8 EDB7      		in r30,__SP_L__
 282 00ba FEB7      		in r31,__SP_H__
 283 00bc 3196      		adiw r30,1
 284 00be 50E0      		ldi r21,lo8(.LC2)
 285 00c0 C52E      		mov r12,r21
 286 00c2 50E0      		ldi r21,hi8(.LC2)
 287 00c4 D52E      		mov r13,r21
 288 00c6 ADB7      		in r26,__SP_L__
 289 00c8 BEB7      		in r27,__SP_H__
 290 00ca 1296      		adiw r26,1+1
 291 00cc DC92      		st X,r13
 292 00ce CE92      		st -X,r12
 293 00d0 1197      		sbiw r26,1
 294 00d2 D801      		movw r26,r16
 295 00d4 8C91      		ld r24,X
 296 00d6 8283      		std Z+2,r24
 297 00d8 1382      		std Z+3,__zero_reg__
 298 00da 0E94 0000 		call printf
  47:../../../src/kernel/source/nrk_stack_check.c ****     printf( "stk = %x ",(uint16_t)stkc );
 300               	.LM13:
 301 00de 40E0      		ldi r20,lo8(.LC3)
 302 00e0 E42E      		mov r14,r20
 303 00e2 40E0      		ldi r20,hi8(.LC3)
 304 00e4 F42E      		mov r15,r20
 305 00e6 EDB7      		in r30,__SP_L__
 306 00e8 FEB7      		in r31,__SP_H__
 307 00ea F282      		std Z+2,r15
 308 00ec E182      		std Z+1,r14
 309 00ee E091 0000 		lds r30,nrk_cur_task_TCB
 310 00f2 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 311 00f6 8081      		ld r24,Z
 312 00f8 9181      		ldd r25,Z+1
 313 00fa ADB7      		in r26,__SP_L__
 314 00fc BEB7      		in r27,__SP_H__
 315 00fe 1496      		adiw r26,3+1
 316 0100 9C93      		st X,r25
 317 0102 8E93      		st -X,r24
 318 0104 1397      		sbiw r26,3
 319 0106 0E94 0000 		call printf
  48:../../../src/kernel/source/nrk_stack_check.c ****     printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
 321               	.LM14:
 322 010a 00E0      		ldi r16,lo8(.LC4)
 323 010c 10E0      		ldi r17,hi8(.LC4)
 324 010e EDB7      		in r30,__SP_L__
 325 0110 FEB7      		in r31,__SP_H__
 326 0112 1283      		std Z+2,r17
 327 0114 0183      		std Z+1,r16
 328 0116 8091 0000 		lds r24,nrk_cur_task_TCB
 329 011a 9091 0000 		lds r25,(nrk_cur_task_TCB)+1
 330 011e 9483      		std Z+4,r25
 331 0120 8383      		std Z+3,r24
 332 0122 0E94 0000 		call printf
 333 0126 C0E0      		ldi r28,lo8(nrk_task_TCB)
 334 0128 D0E0      		ldi r29,hi8(nrk_task_TCB)
 335 012a AA24      		clr r10
 336 012c BB24      		clr r11
 337 012e 0F90      		pop __tmp_reg__
 338 0130 0F90      		pop __tmp_reg__
 339 0132 0F90      		pop __tmp_reg__
 340 0134 0F90      		pop __tmp_reg__
  54:../../../src/kernel/source/nrk_stack_check.c ****         printf( "%d: bottom = %x ",i,(uint16_t)stkc );
 342               	.LM15:
 343 0136 30E0      		ldi r19,lo8(.LC5)
 344 0138 632E      		mov r6,r19
 345 013a 30E0      		ldi r19,hi8(.LC5)
 346 013c 732E      		mov r7,r19
  55:../../../src/kernel/source/nrk_stack_check.c ****         printf( "canary = %x ",*stkc );
 348               	.LM16:
 349 013e 4601      		movw r8,r12
  58:../../../src/kernel/source/nrk_stack_check.c ****         printf( "stk = %x ",(uint16_t)stkc );
 351               	.LM17:
 352 0140 6701      		movw r12,r14
  59:../../../src/kernel/source/nrk_stack_check.c ****         printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
 354               	.LM18:
 355 0142 7801      		movw r14,r16
 356               	.L7:
  52:../../../src/kernel/source/nrk_stack_check.c ****         stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
 358               	.LM19:
 359 0144 0A81      		ldd r16,Y+2
 360 0146 1B81      		ldd r17,Y+3
  54:../../../src/kernel/source/nrk_stack_check.c ****         printf( "%d: bottom = %x ",i,(uint16_t)stkc );
 362               	.LM20:
 363 0148 00D0      		rcall .
 364 014a 00D0      		rcall .
 365 014c 00D0      		rcall .
 366 014e EDB7      		in r30,__SP_L__
 367 0150 FEB7      		in r31,__SP_H__
 368 0152 3196      		adiw r30,1
 369 0154 ADB7      		in r26,__SP_L__
 370 0156 BEB7      		in r27,__SP_H__
 371 0158 1296      		adiw r26,1+1
 372 015a 7C92      		st X,r7
 373 015c 6E92      		st -X,r6
 374 015e 1197      		sbiw r26,1
 375 0160 B382      		std Z+3,r11
 376 0162 A282      		std Z+2,r10
 377 0164 1583      		std Z+5,r17
 378 0166 0483      		std Z+4,r16
 379 0168 0E94 0000 		call printf
  55:../../../src/kernel/source/nrk_stack_check.c ****         printf( "canary = %x ",*stkc );
 381               	.LM21:
 382 016c 0F90      		pop __tmp_reg__
 383 016e 0F90      		pop __tmp_reg__
 384 0170 EDB7      		in r30,__SP_L__
 385 0172 FEB7      		in r31,__SP_H__
 386 0174 3196      		adiw r30,1
 387 0176 ADB7      		in r26,__SP_L__
 388 0178 BEB7      		in r27,__SP_H__
 389 017a 1196      		adiw r26,1
 390 017c 8C92      		st X,r8
 391 017e 1197      		sbiw r26,1
 392 0180 1296      		adiw r26,2
 393 0182 9C92      		st X,r9
 394 0184 D801      		movw r26,r16
 395 0186 8C91      		ld r24,X
 396 0188 8283      		std Z+2,r24
 397 018a 1382      		std Z+3,__zero_reg__
 398 018c 0E94 0000 		call printf
  58:../../../src/kernel/source/nrk_stack_check.c ****         printf( "stk = %x ",(uint16_t)stkc );
 400               	.LM22:
 401 0190 EDB7      		in r30,__SP_L__
 402 0192 FEB7      		in r31,__SP_H__
 403 0194 C182      		std Z+1,r12
 404 0196 D282      		std Z+2,r13
 405 0198 8881      		ld r24,Y
 406 019a 9981      		ldd r25,Y+1
 407 019c 9483      		std Z+4,r25
 408 019e 8383      		std Z+3,r24
 409 01a0 0E94 0000 		call printf
  59:../../../src/kernel/source/nrk_stack_check.c ****         printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
 411               	.LM23:
 412 01a4 ADB7      		in r26,__SP_L__
 413 01a6 BEB7      		in r27,__SP_H__
 414 01a8 1196      		adiw r26,1
 415 01aa EC92      		st X,r14
 416 01ac 1197      		sbiw r26,1
 417 01ae 1296      		adiw r26,2
 418 01b0 FC92      		st X,r15
 419 01b2 1297      		sbiw r26,2
 420 01b4 1496      		adiw r26,3+1
 421 01b6 DC93      		st X,r29
 422 01b8 CE93      		st -X,r28
 423 01ba 1397      		sbiw r26,3
 424 01bc 0E94 0000 		call printf
 425 01c0 0894      		sec
 426 01c2 A11C      		adc r10,__zero_reg__
 427 01c4 B11C      		adc r11,__zero_reg__
 428 01c6 A196      		adiw r28,33
  50:../../../src/kernel/source/nrk_stack_check.c ****     for(i=0; i<NRK_MAX_TASKS; i++ )
 430               	.LM24:
 431 01c8 0F90      		pop __tmp_reg__
 432 01ca 0F90      		pop __tmp_reg__
 433 01cc 0F90      		pop __tmp_reg__
 434 01ce 0F90      		pop __tmp_reg__
 435 01d0 B5E0      		ldi r27,lo8(5)
 436 01d2 AB16      		cp r10,r27
 437 01d4 B104      		cpc r11,__zero_reg__
 438 01d6 01F0      		breq .+2
 439 01d8 00C0      		rjmp .L7
 440               	/* epilogue start */
  63:../../../src/kernel/source/nrk_stack_check.c **** }
 442               	.LM25:
 443 01da DF91      		pop r29
 444 01dc CF91      		pop r28
 445 01de 1F91      		pop r17
 446 01e0 0F91      		pop r16
 447 01e2 FF90      		pop r15
 448 01e4 EF90      		pop r14
 449 01e6 DF90      		pop r13
 450 01e8 CF90      		pop r12
 451 01ea BF90      		pop r11
 452 01ec AF90      		pop r10
 453 01ee 9F90      		pop r9
 454 01f0 8F90      		pop r8
 455 01f2 7F90      		pop r7
 456 01f4 6F90      		pop r6
 457 01f6 0895      		ret
 459               	.Lscope2:
 461               		.stabd	78,0,0
 463               	.global	nrk_stack_check
 465               	nrk_stack_check:
 466               		.stabd	46,0,0
  73:../../../src/kernel/source/nrk_stack_check.c **** {
 468               	.LM26:
 469               	.LFBB3:
 470 01f8 CF93      		push r28
 471 01fa DF93      		push r29
 472               	/* prologue: function */
 473               	/* frame size = 0 */
  79:../../../src/kernel/source/nrk_stack_check.c ****     stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
 475               	.LM27:
 476 01fc E091 0000 		lds r30,nrk_cur_task_TCB
 477 0200 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 478 0204 C281      		ldd r28,Z+2
 479 0206 D381      		ldd r29,Z+3
  81:../../../src/kernel/source/nrk_stack_check.c ****     if(*stkc != STK_CANARY_VAL)
 481               	.LM28:
 482 0208 8881      		ld r24,Y
 483 020a 8535      		cpi r24,lo8(85)
 484 020c 01F0      		breq .L11
  84:../../../src/kernel/source/nrk_stack_check.c ****         dump_stack_info();
 486               	.LM29:
 487 020e 0E94 0000 		call dump_stack_info
  86:../../../src/kernel/source/nrk_stack_check.c ****         nrk_error_add( NRK_STACK_OVERFLOW );
 489               	.LM30:
 490 0212 81E0      		ldi r24,lo8(1)
 491 0214 0E94 0000 		call nrk_error_add
  87:../../../src/kernel/source/nrk_stack_check.c ****         *stkc=STK_CANARY_VAL;
 493               	.LM31:
 494 0218 85E5      		ldi r24,lo8(85)
 495 021a 8883      		st Y,r24
 496               	.L11:
  92:../../../src/kernel/source/nrk_stack_check.c ****     if(stkc > (unsigned char *)RAMEND )
 498               	.LM32:
 499 021c E091 0000 		lds r30,nrk_cur_task_TCB
 500 0220 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 501 0224 8081      		ld r24,Z
 502 0226 9181      		ldd r25,Z+1
 503 0228 8050      		subi r24,lo8(4352)
 504 022a 9141      		sbci r25,hi8(4352)
 505 022c 00F0      		brlo .L13
  95:../../../src/kernel/source/nrk_stack_check.c ****         dump_stack_info();
 507               	.LM33:
 508 022e 0E94 0000 		call dump_stack_info
  97:../../../src/kernel/source/nrk_stack_check.c ****         nrk_error_add( NRK_INVALID_STACK_POINTER);
 510               	.LM34:
 511 0232 82E1      		ldi r24,lo8(18)
 512 0234 0E94 0000 		call nrk_error_add
 513               	.L13:
 514               	/* epilogue start */
 104:../../../src/kernel/source/nrk_stack_check.c **** }
 516               	.LM35:
 517 0238 DF91      		pop r29
 518 023a CF91      		pop r28
 519 023c 0895      		ret
 521               	.Lscope3:
 523               		.stabd	78,0,0
 524               		.section	.progmem.data,"a",@progbits
 527               	__c.1964:
 528 0000 0D0A 5354 		.string	"\r\nSTACK DUMP\r\n"
 528      4143 4B20 
 528      4455 4D50 
 528      0D0A 00
 529               		.comm _nrk_signal_list,4,1
 530               		.comm nrk_idle_task_stk,128,1
 531               		.comm nrk_kernel_stk_ptr,2,1
 532               		.comm error_task,1,1
 533               		.comm error_num,1,1
 540               		.text
 542               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 nrk_stack_check.c
     /tmp/ccnTG99C.s:2      *ABS*:0000003f __SREG__
     /tmp/ccnTG99C.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccnTG99C.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccnTG99C.s:5      *ABS*:00000034 __CCP__
     /tmp/ccnTG99C.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccnTG99C.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccnTG99C.s:138    .text:00000000 nrk_stack_check_pid
     /tmp/ccnTG99C.s:213    .text:00000044 dump_stack_info
     /tmp/ccnTG99C.s:527    .progmem.data:00000000 __c.1964
     /tmp/ccnTG99C.s:465    .text:000001f8 nrk_stack_check
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
nrk_task_TCB
nrk_error_add
nrk_kprintf
nrk_cur_task_TCB
printf
