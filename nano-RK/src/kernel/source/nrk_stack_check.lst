   1               		.file	"nrk_stack_check.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 134               		.data
 135               	.LC0:
 136 0000 6375 723A 		.string	"cur: %d "
 136      2025 6420 
 136      00
 137               	.LC1:
 138 0009 626F 7474 		.string	"bottom = %x "
 138      6F6D 203D 
 138      2025 7820 
 138      00
 139               	.LC2:
 140 0016 6361 6E61 		.string	"canary = %x "
 140      7279 203D 
 140      2025 7820 
 140      00
 141               	.LC3:
 142 0023 7374 6B20 		.string	"stk = %x "
 142      3D20 2578 
 142      2000 
 143               	.LC4:
 144 002d 7463 6220 		.string	"tcb addr = %x\r\n"
 144      6164 6472 
 144      203D 2025 
 144      780D 0A00 
 145               	.LC5:
 146 003d 2564 3A20 		.string	"%d: bottom = %x "
 146      626F 7474 
 146      6F6D 203D 
 146      2025 7820 
 146      00
 147               		.text
 149               	.global	dump_stack_info
 151               	dump_stack_info:
 152               		.stabd	46,0,0
   1:../../../src/kernel/source/nrk_stack_check.c **** /******************************************************************************
   2:../../../src/kernel/source/nrk_stack_check.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../../src/kernel/source/nrk_stack_check.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../../src/kernel/source/nrk_stack_check.c **** *  All rights reserved.
   5:../../../src/kernel/source/nrk_stack_check.c **** *
   6:../../../src/kernel/source/nrk_stack_check.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../../src/kernel/source/nrk_stack_check.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../../src/kernel/source/nrk_stack_check.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../../src/kernel/source/nrk_stack_check.c **** *
  10:../../../src/kernel/source/nrk_stack_check.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../../src/kernel/source/nrk_stack_check.c **** *  it under the terms of the GNU General Public License as published by
  12:../../../src/kernel/source/nrk_stack_check.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../../src/kernel/source/nrk_stack_check.c **** *
  14:../../../src/kernel/source/nrk_stack_check.c **** *  This program is distributed in the hope that it will be useful,
  15:../../../src/kernel/source/nrk_stack_check.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../../src/kernel/source/nrk_stack_check.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../../src/kernel/source/nrk_stack_check.c **** *  GNU General Public License for more details.
  18:../../../src/kernel/source/nrk_stack_check.c **** *
  19:../../../src/kernel/source/nrk_stack_check.c **** *  You should have received a copy of the GNU General Public License
  20:../../../src/kernel/source/nrk_stack_check.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../../src/kernel/source/nrk_stack_check.c **** *
  22:../../../src/kernel/source/nrk_stack_check.c **** *  Contributing Authors (specific to this file):
  23:../../../src/kernel/source/nrk_stack_check.c **** *  Anthony Rowe
  24:../../../src/kernel/source/nrk_stack_check.c **** *  Zane Starr
  25:../../../src/kernel/source/nrk_stack_check.c **** *******************************************************************************/
  26:../../../src/kernel/source/nrk_stack_check.c **** 
  27:../../../src/kernel/source/nrk_stack_check.c **** #include <nrk.h>
  28:../../../src/kernel/source/nrk_stack_check.c **** #include <nrk_error.h>
  29:../../../src/kernel/source/nrk_stack_check.c **** #include <nrk_stack_check.h>
  30:../../../src/kernel/source/nrk_stack_check.c **** #include <stdio.h>
  31:../../../src/kernel/source/nrk_stack_check.c **** 
  32:../../../src/kernel/source/nrk_stack_check.c **** void dump_stack_info()
  33:../../../src/kernel/source/nrk_stack_check.c **** {
 154               	.LM0:
 155               	.LFBB1:
 156 0000 4F92      		push r4
 157 0002 5F92      		push r5
 158 0004 6F92      		push r6
 159 0006 7F92      		push r7
 160 0008 8F92      		push r8
 161 000a 9F92      		push r9
 162 000c AF92      		push r10
 163 000e BF92      		push r11
 164 0010 CF92      		push r12
 165 0012 DF92      		push r13
 166 0014 EF92      		push r14
 167 0016 FF92      		push r15
 168 0018 0F93      		push r16
 169 001a 1F93      		push r17
 170 001c CF93      		push r28
 171 001e DF93      		push r29
 172               	/* prologue: function */
 173               	/* frame size = 0 */
 174               	/* stack size = 16 */
 175               	.L__stack_usage = 16
  34:../../../src/kernel/source/nrk_stack_check.c ****     unsigned int *stk;
  35:../../../src/kernel/source/nrk_stack_check.c ****     unsigned char *stkc;
  36:../../../src/kernel/source/nrk_stack_check.c ****     uint8_t i;
  37:../../../src/kernel/source/nrk_stack_check.c **** 
  38:../../../src/kernel/source/nrk_stack_check.c ****     nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
 177               	.LM1:
 178 0020 80E0      		ldi r24,lo8(__c.2068)
 179 0022 90E0      		ldi r25,hi8(__c.2068)
 180 0024 0E94 0000 		call nrk_kprintf
  39:../../../src/kernel/source/nrk_stack_check.c **** 
  40:../../../src/kernel/source/nrk_stack_check.c ****     printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
 182               	.LM2:
 183 0028 00D0      		rcall .
 184 002a 00D0      		rcall .
 185 002c 80E0      		ldi r24,lo8(.LC0)
 186 002e 90E0      		ldi r25,hi8(.LC0)
 187 0030 ADB7      		in r26,__SP_L__
 188 0032 BEB7      		in r27,__SP_H__
 189 0034 1296      		adiw r26,1+1
 190 0036 9C93      		st X,r25
 191 0038 8E93      		st -X,r24
 192 003a 1197      		sbiw r26,1
 193 003c E091 0000 		lds r30,nrk_cur_task_TCB
 194 0040 F091 0000 		lds r31,nrk_cur_task_TCB+1
 195 0044 8085      		ldd r24,Z+8
 196 0046 9927      		clr r25
 197 0048 87FD      		sbrc r24,7
 198 004a 9095      		com r25
 199 004c 1496      		adiw r26,3+1
 200 004e 9C93      		st X,r25
 201 0050 8E93      		st -X,r24
 202 0052 1397      		sbiw r26,3
 203 0054 0E94 0000 		call printf
  41:../../../src/kernel/source/nrk_stack_check.c ****     stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
 205               	.LM3:
 206 0058 E091 0000 		lds r30,nrk_cur_task_TCB
 207 005c F091 0000 		lds r31,nrk_cur_task_TCB+1
 208 0060 C281      		ldd r28,Z+2
 209 0062 D381      		ldd r29,Z+3
  42:../../../src/kernel/source/nrk_stack_check.c ****     stkc = (unsigned char*)stk;
  43:../../../src/kernel/source/nrk_stack_check.c ****     printf( "bottom = %x ",(uint16_t)stkc );
 211               	.LM4:
 212 0064 80E0      		ldi r24,lo8(.LC1)
 213 0066 90E0      		ldi r25,hi8(.LC1)
 214 0068 EDB7      		in r30,__SP_L__
 215 006a FEB7      		in r31,__SP_H__
 216 006c 9283      		std Z+2,r25
 217 006e 8183      		std Z+1,r24
 218 0070 D483      		std Z+4,r29
 219 0072 C383      		std Z+3,r28
 220 0074 0E94 0000 		call printf
  44:../../../src/kernel/source/nrk_stack_check.c ****     printf( "canary = %x ",*stkc );
 222               	.LM5:
 223 0078 EDB7      		in r30,__SP_L__
 224 007a FEB7      		in r31,__SP_H__
 225 007c 3196      		adiw r30,1
 226 007e 40E0      		ldi r20,lo8(.LC2)
 227 0080 E42E      		mov r14,r20
 228 0082 40E0      		ldi r20,hi8(.LC2)
 229 0084 F42E      		mov r15,r20
 230 0086 ADB7      		in r26,__SP_L__
 231 0088 BEB7      		in r27,__SP_H__
 232 008a 1296      		adiw r26,1+1
 233 008c FC92      		st X,r15
 234 008e EE92      		st -X,r14
 235 0090 1197      		sbiw r26,1
 236 0092 8881      		ld r24,Y
 237 0094 8283      		std Z+2,r24
 238 0096 1382      		std Z+3,__zero_reg__
 239 0098 0E94 0000 		call printf
  45:../../../src/kernel/source/nrk_stack_check.c ****     stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
  46:../../../src/kernel/source/nrk_stack_check.c ****     stkc = (unsigned char*)stk;
  47:../../../src/kernel/source/nrk_stack_check.c ****     printf( "stk = %x ",(uint16_t)stkc );
 241               	.LM6:
 242 009c 30E0      		ldi r19,lo8(.LC3)
 243 009e C32E      		mov r12,r19
 244 00a0 30E0      		ldi r19,hi8(.LC3)
 245 00a2 D32E      		mov r13,r19
 246 00a4 EDB7      		in r30,__SP_L__
 247 00a6 FEB7      		in r31,__SP_H__
 248 00a8 D282      		std Z+2,r13
 249 00aa C182      		std Z+1,r12
  45:../../../src/kernel/source/nrk_stack_check.c ****     stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
 251               	.LM7:
 252 00ac E091 0000 		lds r30,nrk_cur_task_TCB
 253 00b0 F091 0000 		lds r31,nrk_cur_task_TCB+1
 255               	.LM8:
 256 00b4 8081      		ld r24,Z
 257 00b6 9181      		ldd r25,Z+1
 258 00b8 ADB7      		in r26,__SP_L__
 259 00ba BEB7      		in r27,__SP_H__
 260 00bc 1496      		adiw r26,3+1
 261 00be 9C93      		st X,r25
 262 00c0 8E93      		st -X,r24
 263 00c2 1397      		sbiw r26,3
 264 00c4 0E94 0000 		call printf
  48:../../../src/kernel/source/nrk_stack_check.c ****     printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
 266               	.LM9:
 267 00c8 20E0      		ldi r18,lo8(.LC4)
 268 00ca A22E      		mov r10,r18
 269 00cc 20E0      		ldi r18,hi8(.LC4)
 270 00ce B22E      		mov r11,r18
 271 00d0 EDB7      		in r30,__SP_L__
 272 00d2 FEB7      		in r31,__SP_H__
 273 00d4 B282      		std Z+2,r11
 274 00d6 A182      		std Z+1,r10
 275 00d8 8091 0000 		lds r24,nrk_cur_task_TCB
 276 00dc 9091 0000 		lds r25,nrk_cur_task_TCB+1
 277 00e0 9483      		std Z+4,r25
 278 00e2 8383      		std Z+3,r24
 279 00e4 0E94 0000 		call printf
 280 00e8 00E0      		ldi r16,lo8(nrk_task_TCB)
 281 00ea 10E0      		ldi r17,hi8(nrk_task_TCB)
 282 00ec 0F90      		pop __tmp_reg__
 283 00ee 0F90      		pop __tmp_reg__
 284 00f0 0F90      		pop __tmp_reg__
 285 00f2 0F90      		pop __tmp_reg__
 286 00f4 C0E0      		ldi r28,lo8(0)
 287 00f6 D0E0      		ldi r29,hi8(0)
  49:../../../src/kernel/source/nrk_stack_check.c **** 
  50:../../../src/kernel/source/nrk_stack_check.c ****     for(i=0; i<NRK_MAX_TASKS; i++ )
  51:../../../src/kernel/source/nrk_stack_check.c ****     {
  52:../../../src/kernel/source/nrk_stack_check.c ****         stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
  53:../../../src/kernel/source/nrk_stack_check.c ****         stkc = (unsigned char*)stk;
  54:../../../src/kernel/source/nrk_stack_check.c ****         printf( "%d: bottom = %x ",i,(uint16_t)stkc );
 289               	.LM10:
 290 00f8 90E0      		ldi r25,lo8(.LC5)
 291 00fa 492E      		mov r4,r25
 292 00fc 90E0      		ldi r25,hi8(.LC5)
 293 00fe 592E      		mov r5,r25
  55:../../../src/kernel/source/nrk_stack_check.c ****         printf( "canary = %x ",*stkc );
 295               	.LM11:
 296 0100 9E2C      		mov r9,r14
 297 0102 6F2C      		mov r6,r15
  56:../../../src/kernel/source/nrk_stack_check.c ****         stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
  57:../../../src/kernel/source/nrk_stack_check.c ****         stkc = (unsigned char*)stk;
  58:../../../src/kernel/source/nrk_stack_check.c ****         printf( "stk = %x ",(uint16_t)stkc );
 299               	.LM12:
 300 0104 7C2C      		mov r7,r12
 301 0106 8D2C      		mov r8,r13
  59:../../../src/kernel/source/nrk_stack_check.c ****         printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
 303               	.LM13:
 304 0108 C501      		movw r24,r10
 305 010a BA2C      		mov r11,r10
 306 010c A92E      		mov r10,r25
 307 010e 87E2      		ldi r24,lo8(39)
 308 0110 C82E      		mov r12,r24
 309 0112 D12C      		mov r13,__zero_reg__
 310               	.L2:
  52:../../../src/kernel/source/nrk_stack_check.c ****         stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
 312               	.LM14:
 313 0114 D801      		movw r26,r16
 314 0116 1296      		adiw r26,2
 315 0118 ED90      		ld r14,X+
 316 011a FC90      		ld r15,X
 317 011c 1397      		sbiw r26,2+1
  54:../../../src/kernel/source/nrk_stack_check.c ****         printf( "%d: bottom = %x ",i,(uint16_t)stkc );
 319               	.LM15:
 320 011e 00D0      		rcall .
 321 0120 00D0      		rcall .
 322 0122 00D0      		rcall .
 323 0124 EDB7      		in r30,__SP_L__
 324 0126 FEB7      		in r31,__SP_H__
 325 0128 3196      		adiw r30,1
 326 012a ADB7      		in r26,__SP_L__
 327 012c BEB7      		in r27,__SP_H__
 328 012e 1296      		adiw r26,1+1
 329 0130 5C92      		st X,r5
 330 0132 4E92      		st -X,r4
 331 0134 1197      		sbiw r26,1
 332 0136 D383      		std Z+3,r29
 333 0138 C283      		std Z+2,r28
 334 013a F582      		std Z+5,r15
 335 013c E482      		std Z+4,r14
 336 013e 0E94 0000 		call printf
  55:../../../src/kernel/source/nrk_stack_check.c ****         printf( "canary = %x ",*stkc );
 338               	.LM16:
 339 0142 0F90      		pop __tmp_reg__
 340 0144 0F90      		pop __tmp_reg__
 341 0146 EDB7      		in r30,__SP_L__
 342 0148 FEB7      		in r31,__SP_H__
 343 014a 3196      		adiw r30,1
 344 014c ADB7      		in r26,__SP_L__
 345 014e BEB7      		in r27,__SP_H__
 346 0150 1196      		adiw r26,1
 347 0152 9C92      		st X,r9
 348 0154 1197      		sbiw r26,1
 349 0156 1296      		adiw r26,2
 350 0158 6C92      		st X,r6
 351 015a D701      		movw r26,r14
 352 015c 8C91      		ld r24,X
 353 015e 8283      		std Z+2,r24
 354 0160 1382      		std Z+3,__zero_reg__
 355 0162 0E94 0000 		call printf
  58:../../../src/kernel/source/nrk_stack_check.c ****         printf( "stk = %x ",(uint16_t)stkc );
 357               	.LM17:
 358 0166 EDB7      		in r30,__SP_L__
 359 0168 FEB7      		in r31,__SP_H__
 360 016a 7182      		std Z+1,r7
 361 016c 8282      		std Z+2,r8
 362 016e D801      		movw r26,r16
 363 0170 8D91      		ld r24,X+
 364 0172 9C91      		ld r25,X
 365 0174 9483      		std Z+4,r25
 366 0176 8383      		std Z+3,r24
 367 0178 0E94 0000 		call printf
 369               	.LM18:
 370 017c EDB7      		in r30,__SP_L__
 371 017e FEB7      		in r31,__SP_H__
 372 0180 B182      		std Z+1,r11
 373 0182 A282      		std Z+2,r10
 374 0184 CC9D      		mul r28,r12
 375 0186 C001      		movw r24,r0
 376 0188 CD9D      		mul r28,r13
 377 018a 900D      		add r25,r0
 378 018c DC9D      		mul r29,r12
 379 018e 900D      		add r25,r0
 380 0190 1124      		clr r1
 381 0192 8050      		subi r24,lo8(-(nrk_task_TCB))
 382 0194 9040      		sbci r25,hi8(-(nrk_task_TCB))
 383 0196 9483      		std Z+4,r25
 384 0198 8383      		std Z+3,r24
 385 019a 0E94 0000 		call printf
 386 019e 2196      		adiw r28,1
 387 01a0 095D      		subi r16,lo8(-(39))
 388 01a2 1F4F      		sbci r17,hi8(-(39))
  50:../../../src/kernel/source/nrk_stack_check.c ****     for(i=0; i<NRK_MAX_TASKS; i++ )
 390               	.LM19:
 391 01a4 0F90      		pop __tmp_reg__
 392 01a6 0F90      		pop __tmp_reg__
 393 01a8 0F90      		pop __tmp_reg__
 394 01aa 0F90      		pop __tmp_reg__
 395 01ac C530      		cpi r28,5
 396 01ae D105      		cpc r29,__zero_reg__
 397 01b0 01F0      		breq .+2
 398 01b2 00C0      		rjmp .L2
 399               	/* epilogue start */
  60:../../../src/kernel/source/nrk_stack_check.c **** 
  61:../../../src/kernel/source/nrk_stack_check.c ****     }
  62:../../../src/kernel/source/nrk_stack_check.c **** 
  63:../../../src/kernel/source/nrk_stack_check.c **** }
 401               	.LM20:
 402 01b4 DF91      		pop r29
 403 01b6 CF91      		pop r28
 404 01b8 1F91      		pop r17
 405 01ba 0F91      		pop r16
 406 01bc FF90      		pop r15
 407 01be EF90      		pop r14
 408 01c0 DF90      		pop r13
 409 01c2 CF90      		pop r12
 410 01c4 BF90      		pop r11
 411 01c6 AF90      		pop r10
 412 01c8 9F90      		pop r9
 413 01ca 8F90      		pop r8
 414 01cc 7F90      		pop r7
 415 01ce 6F90      		pop r6
 416 01d0 5F90      		pop r5
 417 01d2 4F90      		pop r4
 418 01d4 0895      		ret
 420               	.Lscope1:
 422               		.stabd	78,0,0
 424               	.global	nrk_stack_check
 426               	nrk_stack_check:
 427               		.stabd	46,0,0
  64:../../../src/kernel/source/nrk_stack_check.c **** 
  65:../../../src/kernel/source/nrk_stack_check.c **** 
  66:../../../src/kernel/source/nrk_stack_check.c **** /*
  67:../../../src/kernel/source/nrk_stack_check.c ****  * Simple Canary value stack overflow check.
  68:../../../src/kernel/source/nrk_stack_check.c ****  * If the end of the stack was overwritten, then flag an error.
  69:../../../src/kernel/source/nrk_stack_check.c ****  *
  70:../../../src/kernel/source/nrk_stack_check.c ****  * */
  71:../../../src/kernel/source/nrk_stack_check.c **** //inline void nrk_stack_check()
  72:../../../src/kernel/source/nrk_stack_check.c **** void nrk_stack_check()
  73:../../../src/kernel/source/nrk_stack_check.c **** {
 429               	.LM21:
 430               	.LFBB2:
 431 01d6 CF93      		push r28
 432 01d8 DF93      		push r29
 433               	/* prologue: function */
 434               	/* frame size = 0 */
 435               	/* stack size = 2 */
 436               	.L__stack_usage = 2
  74:../../../src/kernel/source/nrk_stack_check.c **** #ifdef NRK_STACK_CHECK
  75:../../../src/kernel/source/nrk_stack_check.c **** 
  76:../../../src/kernel/source/nrk_stack_check.c ****     unsigned int *stk ;  // 2 bytes
  77:../../../src/kernel/source/nrk_stack_check.c ****     unsigned char *stkc; // 1 byte
  78:../../../src/kernel/source/nrk_stack_check.c **** 
  79:../../../src/kernel/source/nrk_stack_check.c ****     stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
 438               	.LM22:
 439 01da E091 0000 		lds r30,nrk_cur_task_TCB
 440 01de F091 0000 		lds r31,nrk_cur_task_TCB+1
 441 01e2 C281      		ldd r28,Z+2
 442 01e4 D381      		ldd r29,Z+3
  80:../../../src/kernel/source/nrk_stack_check.c ****     stkc = (unsigned char*)stk;
  81:../../../src/kernel/source/nrk_stack_check.c ****     if(*stkc != STK_CANARY_VAL)
 444               	.LM23:
 445 01e6 8881      		ld r24,Y
 446 01e8 8535      		cpi r24,lo8(85)
 447 01ea 01F0      		breq .L5
  82:../../../src/kernel/source/nrk_stack_check.c ****     {
  83:../../../src/kernel/source/nrk_stack_check.c **** #ifdef NRK_REPORT_ERRORS
  84:../../../src/kernel/source/nrk_stack_check.c ****         dump_stack_info();
 449               	.LM24:
 450 01ec 0E94 0000 		call dump_stack_info
  85:../../../src/kernel/source/nrk_stack_check.c **** #endif
  86:../../../src/kernel/source/nrk_stack_check.c ****         nrk_error_add( NRK_STACK_OVERFLOW );
 452               	.LM25:
 453 01f0 81E0      		ldi r24,lo8(1)
 454 01f2 0E94 0000 		call nrk_error_add
  87:../../../src/kernel/source/nrk_stack_check.c ****         *stkc=STK_CANARY_VAL;
 456               	.LM26:
 457 01f6 85E5      		ldi r24,lo8(85)
 458 01f8 8883      		st Y,r24
 459               	.L5:
  88:../../../src/kernel/source/nrk_stack_check.c ****     }
  89:../../../src/kernel/source/nrk_stack_check.c **** 
  90:../../../src/kernel/source/nrk_stack_check.c ****     stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
 461               	.LM27:
 462 01fa E091 0000 		lds r30,nrk_cur_task_TCB
 463 01fe F091 0000 		lds r31,nrk_cur_task_TCB+1
  91:../../../src/kernel/source/nrk_stack_check.c ****     stkc = (unsigned char*)stk;
  92:../../../src/kernel/source/nrk_stack_check.c ****     if(stkc > (unsigned char *)RAMEND )
 465               	.LM28:
 466 0202 8081      		ld r24,Z
 467 0204 9181      		ldd r25,Z+1
 468 0206 21E1      		ldi r18,hi8(4352)
 469 0208 8030      		cpi r24,lo8(4352)
 470 020a 9207      		cpc r25,r18
 471 020c 00F0      		brlo .L4
  93:../../../src/kernel/source/nrk_stack_check.c ****     {
  94:../../../src/kernel/source/nrk_stack_check.c **** #ifdef NRK_REPORT_ERRORS
  95:../../../src/kernel/source/nrk_stack_check.c ****         dump_stack_info();
 473               	.LM29:
 474 020e 0E94 0000 		call dump_stack_info
  96:../../../src/kernel/source/nrk_stack_check.c **** #endif
  97:../../../src/kernel/source/nrk_stack_check.c ****         nrk_error_add( NRK_INVALID_STACK_POINTER);
 476               	.LM30:
 477 0212 82E1      		ldi r24,lo8(18)
 478 0214 0E94 0000 		call nrk_error_add
 479               	.L4:
 480               	/* epilogue start */
  98:../../../src/kernel/source/nrk_stack_check.c ****     }
  99:../../../src/kernel/source/nrk_stack_check.c **** 
 100:../../../src/kernel/source/nrk_stack_check.c **** 
 101:../../../src/kernel/source/nrk_stack_check.c **** 
 102:../../../src/kernel/source/nrk_stack_check.c **** 
 103:../../../src/kernel/source/nrk_stack_check.c **** #endif
 104:../../../src/kernel/source/nrk_stack_check.c **** }
 482               	.LM31:
 483 0218 DF91      		pop r29
 484 021a CF91      		pop r28
 485 021c 0895      		ret
 487               	.Lscope2:
 489               		.stabd	78,0,0
 492               	.global	nrk_stack_check_pid
 494               	nrk_stack_check_pid:
 495               		.stabd	46,0,0
 105:../../../src/kernel/source/nrk_stack_check.c **** 
 106:../../../src/kernel/source/nrk_stack_check.c **** int8_t nrk_stack_check_pid(int8_t pid)
 107:../../../src/kernel/source/nrk_stack_check.c **** {
 497               	.LM32:
 498               	.LFBB3:
 499               	/* prologue: function */
 500               	/* frame size = 0 */
 501               	/* stack size = 0 */
 502               	.L__stack_usage = 0
 108:../../../src/kernel/source/nrk_stack_check.c **** #ifdef NRK_STACK_CHECK
 109:../../../src/kernel/source/nrk_stack_check.c **** 
 110:../../../src/kernel/source/nrk_stack_check.c ****     unsigned int *stk ;  // 2 bytes
 111:../../../src/kernel/source/nrk_stack_check.c ****     unsigned char *stkc; // 1 byte
 112:../../../src/kernel/source/nrk_stack_check.c **** 
 113:../../../src/kernel/source/nrk_stack_check.c ****     stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
 504               	.LM33:
 505 021e 9927      		clr r25
 506 0220 87FD      		sbrc r24,7
 507 0222 9095      		com r25
 508 0224 27E2      		ldi r18,lo8(39)
 509 0226 30E0      		ldi r19,hi8(39)
 510 0228 829F      		mul r24,r18
 511 022a F001      		movw r30,r0
 512 022c 839F      		mul r24,r19
 513 022e F00D      		add r31,r0
 514 0230 929F      		mul r25,r18
 515 0232 F00D      		add r31,r0
 516 0234 1124      		clr r1
 517 0236 E050      		subi r30,lo8(-(nrk_task_TCB))
 518 0238 F040      		sbci r31,hi8(-(nrk_task_TCB))
 519 023a A281      		ldd r26,Z+2
 520 023c B381      		ldd r27,Z+3
 114:../../../src/kernel/source/nrk_stack_check.c ****     stkc = (unsigned char*)stk;
 115:../../../src/kernel/source/nrk_stack_check.c ****     if(*stkc != STK_CANARY_VAL)
 522               	.LM34:
 523 023e 8C91      		ld r24,X
 524 0240 8535      		cpi r24,lo8(85)
 525 0242 01F0      		breq .L8
 116:../../../src/kernel/source/nrk_stack_check.c ****     {
 117:../../../src/kernel/source/nrk_stack_check.c ****         *stkc=STK_CANARY_VAL;
 527               	.LM35:
 528 0244 85E5      		ldi r24,lo8(85)
 529 0246 8C93      		st X,r24
 530 0248 00C0      		rjmp .L11
 531               	.L8:
 118:../../../src/kernel/source/nrk_stack_check.c ****         return NRK_ERROR;
 119:../../../src/kernel/source/nrk_stack_check.c ****     }
 120:../../../src/kernel/source/nrk_stack_check.c ****     stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
 121:../../../src/kernel/source/nrk_stack_check.c ****     stkc = (unsigned char*)stk;
 122:../../../src/kernel/source/nrk_stack_check.c ****     if(stkc > (unsigned char *)RAMEND )
 533               	.LM36:
 534 024a 8081      		ld r24,Z
 535 024c 9181      		ldd r25,Z+1
 536 024e 21E1      		ldi r18,hi8(4352)
 537 0250 8030      		cpi r24,lo8(4352)
 538 0252 9207      		cpc r25,r18
 539 0254 00F0      		brlo .L10
 123:../../../src/kernel/source/nrk_stack_check.c ****     {
 124:../../../src/kernel/source/nrk_stack_check.c ****         nrk_error_add( NRK_INVALID_STACK_POINTER);
 541               	.LM37:
 542 0256 82E1      		ldi r24,lo8(18)
 543 0258 0E94 0000 		call nrk_error_add
 544               	.L11:
 125:../../../src/kernel/source/nrk_stack_check.c ****         return NRK_ERROR;
 546               	.LM38:
 547 025c 8FEF      		ldi r24,lo8(-1)
 548 025e 0895      		ret
 549               	.L10:
 126:../../../src/kernel/source/nrk_stack_check.c ****     }
 127:../../../src/kernel/source/nrk_stack_check.c **** #endif
 128:../../../src/kernel/source/nrk_stack_check.c ****     return NRK_OK;
 551               	.LM39:
 552 0260 81E0      		ldi r24,lo8(1)
 129:../../../src/kernel/source/nrk_stack_check.c **** }
 554               	.LM40:
 555 0262 0895      		ret
 557               	.Lscope3:
 559               		.stabd	78,0,0
 560               		.comm _nrk_signal_list,4,1
 561               		.comm nrk_system_ceiling,2,1
 562               		.comm nrk_idle_task_stk,128,1
 563               		.comm nrk_kernel_stk_ptr,2,1
 564               		.comm error_task,1,1
 565               		.comm error_num,1,1
 566               		.section	.progmem.data,"a",@progbits
 569               	__c.2068:
 570 0000 0D0A 5354 		.string	"\r\nSTACK DUMP\r\n"
 570      4143 4B20 
 570      4455 4D50 
 570      0D0A 00
 577               		.text
 579               	.Letext0:
 580               	.global __do_copy_data
 581               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 nrk_stack_check.c
     /tmp/ccWJvHVS.s:2      *ABS*:0000003f __SREG__
     /tmp/ccWJvHVS.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccWJvHVS.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccWJvHVS.s:5      *ABS*:00000034 __CCP__
     /tmp/ccWJvHVS.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccWJvHVS.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccWJvHVS.s:151    .text:00000000 dump_stack_info
     /tmp/ccWJvHVS.s:569    .progmem.data:00000000 __c.2068
     /tmp/ccWJvHVS.s:426    .text:000001d6 nrk_stack_check
     /tmp/ccWJvHVS.s:494    .text:0000021e nrk_stack_check_pid
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000002 nrk_system_ceiling
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num

UNDEFINED SYMBOLS
nrk_kprintf
nrk_cur_task_TCB
printf
nrk_task_TCB
nrk_error_add
__do_copy_data
__do_clear_bss
