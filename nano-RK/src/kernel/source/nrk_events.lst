   1               		.file	"nrk_events.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  12               		.text
  13               	.Ltext0:
 138               	.global	nrk_signal_create
 140               	nrk_signal_create:
 141               		.stabd	46,0,0
   0:../../../src/kernel/source/nrk_events.c **** /******************************************************************************
   1:../../../src/kernel/source/nrk_events.c **** *  Nano-RK, a real-time operating system for sensor networks.
   2:../../../src/kernel/source/nrk_events.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   3:../../../src/kernel/source/nrk_events.c **** *  All rights reserved.
   4:../../../src/kernel/source/nrk_events.c **** *
   5:../../../src/kernel/source/nrk_events.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   6:../../../src/kernel/source/nrk_events.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   7:../../../src/kernel/source/nrk_events.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   8:../../../src/kernel/source/nrk_events.c **** *
   9:../../../src/kernel/source/nrk_events.c **** *  This program is free software: you can redistribute it and/or modify
  10:../../../src/kernel/source/nrk_events.c **** *  it under the terms of the GNU General Public License as published by
  11:../../../src/kernel/source/nrk_events.c **** *  the Free Software Foundation, version 2.0 of the License.
  12:../../../src/kernel/source/nrk_events.c **** *
  13:../../../src/kernel/source/nrk_events.c **** *  This program is distributed in the hope that it will be useful,
  14:../../../src/kernel/source/nrk_events.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:../../../src/kernel/source/nrk_events.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:../../../src/kernel/source/nrk_events.c **** *  GNU General Public License for more details.
  17:../../../src/kernel/source/nrk_events.c **** *
  18:../../../src/kernel/source/nrk_events.c **** *  You should have received a copy of the GNU General Public License
  19:../../../src/kernel/source/nrk_events.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  20:../../../src/kernel/source/nrk_events.c **** *
  21:../../../src/kernel/source/nrk_events.c **** *  Contributing Authors (specific to this file):
  22:../../../src/kernel/source/nrk_events.c **** *  Anthony Rowe
  23:../../../src/kernel/source/nrk_events.c **** *  Zane Starr
  24:../../../src/kernel/source/nrk_events.c **** *******************************************************************************/
  25:../../../src/kernel/source/nrk_events.c **** 
  26:../../../src/kernel/source/nrk_events.c **** #include <nrk.h>
  27:../../../src/kernel/source/nrk_events.c **** #include <nrk_events.h>
  28:../../../src/kernel/source/nrk_events.c **** #include <nrk_task.h>
  29:../../../src/kernel/source/nrk_events.c **** #include <nrk_error.h>
  30:../../../src/kernel/source/nrk_events.c **** #include <nrk_scheduler.h>
  31:../../../src/kernel/source/nrk_events.c **** #include <include.h>
  32:../../../src/kernel/source/nrk_events.c **** #include <ulib.h>
  33:../../../src/kernel/source/nrk_events.c **** #include <nrk_timer.h>
  34:../../../src/kernel/source/nrk_events.c **** #include <nrk_time.h>
  35:../../../src/kernel/source/nrk_events.c **** #include <nrk_cfg.h>
  36:../../../src/kernel/source/nrk_events.c **** #include <nrk_cpu.h>
  37:../../../src/kernel/source/nrk_events.c **** #include <nrk_defs.h>
  38:../../../src/kernel/source/nrk_events.c **** 
  39:../../../src/kernel/source/nrk_events.c **** int8_t nrk_signal_create()
  40:../../../src/kernel/source/nrk_events.c **** {
 143               	.LM0:
 144               	.LFBB1:
 145               	/* prologue: function */
 146               	/* frame size = 0 */
  41:../../../src/kernel/source/nrk_events.c **** 	uint8_t i=0;
  42:../../../src/kernel/source/nrk_events.c **** 	for(i=0;i<32;i++)   
  43:../../../src/kernel/source/nrk_events.c **** 	{                         
  44:../../../src/kernel/source/nrk_events.c **** 		if( !(_nrk_signal_list & SIG(i)))
 148               	.LM1:
 149 0000 4091 0000 		lds r20,_nrk_signal_list
 150 0004 5091 0000 		lds r21,(_nrk_signal_list)+1
 151 0008 6091 0000 		lds r22,(_nrk_signal_list)+2
 152 000c 7091 0000 		lds r23,(_nrk_signal_list)+3
 153 0010 20E0      		ldi r18,lo8(0)
 154 0012 30E0      		ldi r19,hi8(0)
 155               	.L4:
 156 0014 DB01      		movw r26,r22
 157 0016 CA01      		movw r24,r20
 158 0018 022E      		mov r0,r18
 159 001a 00C0      		rjmp 2f
 160 001c B695      	1:	lsr r27
 161 001e A795      		ror r26
 162 0020 9795      		ror r25
 163 0022 8795      		ror r24
 164 0024 0A94      	2:	dec r0
 165 0026 02F4      		brpl 1b
 166 0028 8170      		andi r24,lo8(1)
 167 002a 9070      		andi r25,hi8(1)
 168 002c 892B      		or r24,r25
 169 002e 01F4      		brne .L2
  45:../../../src/kernel/source/nrk_events.c **** 		{    
  46:../../../src/kernel/source/nrk_events.c **** 			_nrk_signal_list|=SIG(i);
 171               	.LM2:
 172 0030 81E0      		ldi r24,lo8(1)
 173 0032 90E0      		ldi r25,hi8(1)
 174 0034 A0E0      		ldi r26,hlo8(1)
 175 0036 B0E0      		ldi r27,hhi8(1)
 176 0038 022E      		mov r0,r18
 177 003a 00C0      		rjmp 2f
 178 003c 880F      	1:	lsl r24
 179 003e 991F      		rol r25
 180 0040 AA1F      		rol r26
 181 0042 BB1F      		rol r27
 182 0044 0A94      	2:	dec r0
 183 0046 02F4      		brpl 1b
 184 0048 842B      		or r24,r20
 185 004a 952B      		or r25,r21
 186 004c A62B      		or r26,r22
 187 004e B72B      		or r27,r23
 188 0050 8093 0000 		sts _nrk_signal_list,r24
 189 0054 9093 0000 		sts (_nrk_signal_list)+1,r25
 190 0058 A093 0000 		sts (_nrk_signal_list)+2,r26
 191 005c B093 0000 		sts (_nrk_signal_list)+3,r27
  47:../../../src/kernel/source/nrk_events.c **** 			return i;
 193               	.LM3:
 194 0060 822F      		mov r24,r18
 195 0062 0895      		ret
 196               	.L2:
 197 0064 2F5F      		subi r18,lo8(-(1))
 198 0066 3F4F      		sbci r19,hi8(-(1))
  43:../../../src/kernel/source/nrk_events.c **** 	for(i=0;i<32;i++)   
 200               	.LM4:
 201 0068 2032      		cpi r18,32
 202 006a 3105      		cpc r19,__zero_reg__
 203 006c 01F4      		brne .L4
 204 006e 8FEF      		ldi r24,lo8(-1)
  48:../../../src/kernel/source/nrk_events.c **** 		}
  49:../../../src/kernel/source/nrk_events.c **** 	}
  50:../../../src/kernel/source/nrk_events.c **** 	return NRK_ERROR;
  51:../../../src/kernel/source/nrk_events.c **** 
  52:../../../src/kernel/source/nrk_events.c **** 
  53:../../../src/kernel/source/nrk_events.c **** }
 206               	.LM5:
 207 0070 0895      		ret
 212               	.Lscope1:
 214               		.stabd	78,0,0
 216               	.global	nrk_signal_get_registered_mask
 218               	nrk_signal_get_registered_mask:
 219               		.stabd	46,0,0
  54:../../../src/kernel/source/nrk_events.c **** 
  55:../../../src/kernel/source/nrk_events.c **** uint32_t nrk_signal_get_registered_mask()
  56:../../../src/kernel/source/nrk_events.c **** {
 221               	.LM6:
 222               	.LFBB2:
 223               	/* prologue: function */
 224               	/* frame size = 0 */
 226               	.LM7:
 227 0072 E091 0000 		lds r30,nrk_cur_task_TCB
 228 0076 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 229 007a 6585      		ldd r22,Z+13
 230 007c 7685      		ldd r23,Z+14
  57:../../../src/kernel/source/nrk_events.c ****         return nrk_cur_task_TCB->registered_signal_mask;
  58:../../../src/kernel/source/nrk_events.c **** }
 232               	.LM8:
 233 007e 8785      		ldd r24,Z+15
 234 0080 9089      		ldd r25,Z+16
 235               	/* epilogue start */
 236 0082 0895      		ret
 238               	.Lscope2:
 240               		.stabd	78,0,0
 243               	.global	nrk_signal_unregister
 245               	nrk_signal_unregister:
 246               		.stabd	46,0,0
  59:../../../src/kernel/source/nrk_events.c **** 
  60:../../../src/kernel/source/nrk_events.c **** //return the number removed from signal set
  61:../../../src/kernel/source/nrk_events.c **** int8_t nrk_signal_delete(nrk_sig_t sig_id)
  62:../../../src/kernel/source/nrk_events.c **** {
  63:../../../src/kernel/source/nrk_events.c **** 	uint8_t task_ID;
  64:../../../src/kernel/source/nrk_events.c **** 	uint32_t sig_mask;
  65:../../../src/kernel/source/nrk_events.c **** 
  66:../../../src/kernel/source/nrk_events.c **** 	sig_mask=SIG(sig_id);
  67:../../../src/kernel/source/nrk_events.c **** 
  68:../../../src/kernel/source/nrk_events.c **** 	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
  69:../../../src/kernel/source/nrk_events.c **** 
  70:../../../src/kernel/source/nrk_events.c **** 	nrk_int_disable();
  71:../../../src/kernel/source/nrk_events.c **** 	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
  72:../../../src/kernel/source/nrk_events.c **** 		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
  73:../../../src/kernel/source/nrk_events.c **** 		// Check for tasks waiting on the signal
  74:../../../src/kernel/source/nrk_events.c **** 		// If there is a task that is waiting on just this signal
  75:../../../src/kernel/source/nrk_events.c **** 		// then we need to change it to the normal SUSPEND state
  76:../../../src/kernel/source/nrk_events.c **** 		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal i
  77:../../../src/kernel/source/nrk_events.c **** 		{
  78:../../../src/kernel/source/nrk_events.c **** 		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_m
  79:../../../src/kernel/source/nrk_events.c **** 			nrk_task_TCB[task_ID].active_signal_mask=0;
  80:../../../src/kernel/source/nrk_events.c **** 			nrk_task_TCB[task_ID].event_suspend=0;
  81:../../../src/kernel/source/nrk_events.c **** 			nrk_task_TCB[task_ID].task_state=SUSPENDED;
  82:../../../src/kernel/source/nrk_events.c **** 		}
  83:../../../src/kernel/source/nrk_events.c **** 		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
  84:../../../src/kernel/source/nrk_events.c **** 		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
  85:../../../src/kernel/source/nrk_events.c **** 
  86:../../../src/kernel/source/nrk_events.c **** 	}
  87:../../../src/kernel/source/nrk_events.c **** 	
  88:../../../src/kernel/source/nrk_events.c **** 	_nrk_signal_list&=~SIG(sig_id);
  89:../../../src/kernel/source/nrk_events.c **** 	nrk_int_enable();
  90:../../../src/kernel/source/nrk_events.c **** 
  91:../../../src/kernel/source/nrk_events.c **** 	return NRK_OK;
  92:../../../src/kernel/source/nrk_events.c **** }
  93:../../../src/kernel/source/nrk_events.c **** 
  94:../../../src/kernel/source/nrk_events.c **** 
  95:../../../src/kernel/source/nrk_events.c **** int8_t nrk_signal_unregister(int8_t sig_id)
  96:../../../src/kernel/source/nrk_events.c **** {
 248               	.LM9:
 249               	.LFBB3:
 250 0084 EF92      		push r14
 251 0086 FF92      		push r15
 252 0088 0F93      		push r16
 253 008a 1F93      		push r17
 254               	/* prologue: function */
 255               	/* frame size = 0 */
  97:../../../src/kernel/source/nrk_events.c **** uint32_t sig_mask;
  98:../../../src/kernel/source/nrk_events.c **** 
  99:../../../src/kernel/source/nrk_events.c **** sig_mask=SIG(sig_id);
 257               	.LM10:
 258 008c 21E0      		ldi r18,lo8(1)
 259 008e 30E0      		ldi r19,hi8(1)
 260 0090 40E0      		ldi r20,hlo8(1)
 261 0092 50E0      		ldi r21,hhi8(1)
 262 0094 00C0      		rjmp 2f
 263 0096 220F      	1:	lsl r18
 264 0098 331F      		rol r19
 265 009a 441F      		rol r20
 266 009c 551F      		rol r21
 267 009e 8A95      	2:	dec r24
 268 00a0 02F4      		brpl 1b
 100:../../../src/kernel/source/nrk_events.c **** 
 101:../../../src/kernel/source/nrk_events.c **** 	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
 270               	.LM11:
 271 00a2 E091 0000 		lds r30,nrk_cur_task_TCB
 272 00a6 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 273 00aa E584      		ldd r14,Z+13
 274 00ac F684      		ldd r15,Z+14
 275 00ae 0785      		ldd r16,Z+15
 276 00b0 1089      		ldd r17,Z+16
 277 00b2 DA01      		movw r26,r20
 278 00b4 C901      		movw r24,r18
 279 00b6 8E21      		and r24,r14
 280 00b8 9F21      		and r25,r15
 281 00ba A023      		and r26,r16
 282 00bc B123      		and r27,r17
 283 00be 0097      		sbiw r24,0
 284 00c0 A105      		cpc r26,__zero_reg__
 285 00c2 B105      		cpc r27,__zero_reg__
 286 00c4 01F4      		brne .L10
 287 00c6 8FEF      		ldi r24,lo8(-1)
 288 00c8 00C0      		rjmp .L11
 289               	.L10:
 102:../../../src/kernel/source/nrk_events.c **** 	{
 103:../../../src/kernel/source/nrk_events.c **** 		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
 291               	.LM12:
 292 00ca 2095      		com r18
 293 00cc 3095      		com r19
 294 00ce 4095      		com r20
 295 00d0 5095      		com r21
 296 00d2 E222      		and r14,r18
 297 00d4 F322      		and r15,r19
 298 00d6 0423      		and r16,r20
 299 00d8 1523      		and r17,r21
 300 00da E586      		std Z+13,r14
 301 00dc F686      		std Z+14,r15
 302 00de 0787      		std Z+15,r16
 303 00e0 108B      		std Z+16,r17
 104:../../../src/kernel/source/nrk_events.c **** 		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
 305               	.LM13:
 306 00e2 8189      		ldd r24,Z+17
 307 00e4 9289      		ldd r25,Z+18
 308 00e6 A389      		ldd r26,Z+19
 309 00e8 B489      		ldd r27,Z+20
 310 00ea 8223      		and r24,r18
 311 00ec 9323      		and r25,r19
 312 00ee A423      		and r26,r20
 313 00f0 B523      		and r27,r21
 314 00f2 818B      		std Z+17,r24
 315 00f4 928B      		std Z+18,r25
 316 00f6 A38B      		std Z+19,r26
 317 00f8 B48B      		std Z+20,r27
 318 00fa 81E0      		ldi r24,lo8(1)
 319               	.L11:
 320               	/* epilogue start */
 105:../../../src/kernel/source/nrk_events.c **** 	}
 106:../../../src/kernel/source/nrk_events.c **** 	else
 107:../../../src/kernel/source/nrk_events.c **** 		return NRK_ERROR;
 108:../../../src/kernel/source/nrk_events.c **** return NRK_OK;
 109:../../../src/kernel/source/nrk_events.c **** }
 322               	.LM14:
 323 00fc 1F91      		pop r17
 324 00fe 0F91      		pop r16
 325 0100 FF90      		pop r15
 326 0102 EF90      		pop r14
 327 0104 0895      		ret
 332               	.Lscope3:
 334               		.stabd	78,0,0
 337               	.global	nrk_signal_register
 339               	nrk_signal_register:
 340               		.stabd	46,0,0
 110:../../../src/kernel/source/nrk_events.c **** 
 111:../../../src/kernel/source/nrk_events.c **** int8_t nrk_signal_register(int8_t sig_id)
 112:../../../src/kernel/source/nrk_events.c **** {
 342               	.LM15:
 343               	.LFBB4:
 344               	/* prologue: function */
 345               	/* frame size = 0 */
 113:../../../src/kernel/source/nrk_events.c **** 
 114:../../../src/kernel/source/nrk_events.c **** 	// Make sure the signal was created...
 115:../../../src/kernel/source/nrk_events.c **** 	if(SIG(sig_id) & _nrk_signal_list )
 347               	.LM16:
 348 0106 682F      		mov r22,r24
 349 0108 7727      		clr r23
 350 010a 67FD      		sbrc r22,7
 351 010c 7095      		com r23
 352 010e 8091 0000 		lds r24,_nrk_signal_list
 353 0112 9091 0000 		lds r25,(_nrk_signal_list)+1
 354 0116 A091 0000 		lds r26,(_nrk_signal_list)+2
 355 011a B091 0000 		lds r27,(_nrk_signal_list)+3
 356 011e 062E      		mov r0,r22
 357 0120 00C0      		rjmp 2f
 358 0122 B695      	1:	lsr r27
 359 0124 A795      		ror r26
 360 0126 9795      		ror r25
 361 0128 8795      		ror r24
 362 012a 0A94      	2:	dec r0
 363 012c 02F4      		brpl 1b
 364 012e 8170      		andi r24,lo8(1)
 365 0130 9070      		andi r25,hi8(1)
 366 0132 892B      		or r24,r25
 367 0134 01F4      		brne .L14
 368 0136 8FEF      		ldi r24,lo8(-1)
 369 0138 0895      		ret
 370               	.L14:
 116:../../../src/kernel/source/nrk_events.c **** 	{
 117:../../../src/kernel/source/nrk_events.c **** 		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
 372               	.LM17:
 373 013a E091 0000 		lds r30,nrk_cur_task_TCB
 374 013e F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 375 0142 21E0      		ldi r18,lo8(1)
 376 0144 30E0      		ldi r19,hi8(1)
 377 0146 40E0      		ldi r20,hlo8(1)
 378 0148 50E0      		ldi r21,hhi8(1)
 379 014a 00C0      		rjmp 2f
 380 014c 220F      	1:	lsl r18
 381 014e 331F      		rol r19
 382 0150 441F      		rol r20
 383 0152 551F      		rol r21
 384 0154 6A95      	2:	dec r22
 385 0156 02F4      		brpl 1b
 386 0158 8585      		ldd r24,Z+13
 387 015a 9685      		ldd r25,Z+14
 388 015c A785      		ldd r26,Z+15
 389 015e B089      		ldd r27,Z+16
 390 0160 822B      		or r24,r18
 391 0162 932B      		or r25,r19
 392 0164 A42B      		or r26,r20
 393 0166 B52B      		or r27,r21
 394 0168 8587      		std Z+13,r24
 395 016a 9687      		std Z+14,r25
 396 016c A787      		std Z+15,r26
 397 016e B08B      		std Z+16,r27
 398 0170 81E0      		ldi r24,lo8(1)
 118:../../../src/kernel/source/nrk_events.c **** 		return NRK_OK;
 119:../../../src/kernel/source/nrk_events.c **** 	}
 120:../../../src/kernel/source/nrk_events.c ****             
 121:../../../src/kernel/source/nrk_events.c **** 	return NRK_ERROR;
 122:../../../src/kernel/source/nrk_events.c **** }
 400               	.LM18:
 401 0172 0895      		ret
 403               	.Lscope4:
 405               		.stabd	78,0,0
 409               	.global	nrk_sem_create
 411               	nrk_sem_create:
 412               		.stabd	46,0,0
 123:../../../src/kernel/source/nrk_events.c **** 
 124:../../../src/kernel/source/nrk_events.c **** int8_t nrk_event_signal(int8_t sig_id)
 125:../../../src/kernel/source/nrk_events.c **** {
 126:../../../src/kernel/source/nrk_events.c **** 
 127:../../../src/kernel/source/nrk_events.c **** 	uint8_t task_ID;
 128:../../../src/kernel/source/nrk_events.c **** 	uint8_t event_occured=0;
 129:../../../src/kernel/source/nrk_events.c **** 	uint32_t sig_mask;
 130:../../../src/kernel/source/nrk_events.c **** 
 131:../../../src/kernel/source/nrk_events.c **** 	sig_mask=SIG(sig_id);
 132:../../../src/kernel/source/nrk_events.c **** 	// Check if signal was created
 133:../../../src/kernel/source/nrk_events.c **** 	// Signal was not created
 134:../../../src/kernel/source/nrk_events.c **** 	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
 135:../../../src/kernel/source/nrk_events.c **** 	
 136:../../../src/kernel/source/nrk_events.c **** 	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in orde
 137:../../../src/kernel/source/nrk_events.c **** 	nrk_int_disable();
 138:../../../src/kernel/source/nrk_events.c **** 	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
 139:../../../src/kernel/source/nrk_events.c **** 
 140:../../../src/kernel/source/nrk_events.c **** 
 141:../../../src/kernel/source/nrk_events.c **** 	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
 142:../../../src/kernel/source/nrk_events.c **** 	//	{
 143:../../../src/kernel/source/nrk_events.c **** 	//	printf( "task %d is event suspended\r\n",task_ID );
 144:../../../src/kernel/source/nrk_events.c **** 			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
 145:../../../src/kernel/source/nrk_events.c **** 				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
 146:../../../src/kernel/source/nrk_events.c **** 				{
 147:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].task_state=SUSPENDED;
 148:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].next_wakeup=0;
 149:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].event_suspend=0;
 150:../../../src/kernel/source/nrk_events.c **** 					// Add the event trigger here so it is returned
 151:../../../src/kernel/source/nrk_events.c **** 					// from nrk_event_wait()
 152:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
 153:../../../src/kernel/source/nrk_events.c **** 					event_occured=1;
 154:../../../src/kernel/source/nrk_events.c **** 				}
 155:../../../src/kernel/source/nrk_events.c **** 
 156:../../../src/kernel/source/nrk_events.c **** 			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
 157:../../../src/kernel/source/nrk_events.c **** 				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
 158:../../../src/kernel/source/nrk_events.c **** 				{
 159:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].task_state=SUSPENDED;
 160:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].next_wakeup=0;
 161:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].event_suspend=0;
 162:../../../src/kernel/source/nrk_events.c **** 					// Add the event trigger here so it is returned
 163:../../../src/kernel/source/nrk_events.c **** 					// from nrk_event_wait()
 164:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].active_signal_mask=0;
 165:../../../src/kernel/source/nrk_events.c **** 					event_occured=1;
 166:../../../src/kernel/source/nrk_events.c **** 				}   
 167:../../../src/kernel/source/nrk_events.c **** 
 168:../../../src/kernel/source/nrk_events.c **** 	//	}
 169:../../../src/kernel/source/nrk_events.c **** 	}
 170:../../../src/kernel/source/nrk_events.c **** 	nrk_int_enable();
 171:../../../src/kernel/source/nrk_events.c **** 	if(event_occured)
 172:../../../src/kernel/source/nrk_events.c **** 	{
 173:../../../src/kernel/source/nrk_events.c **** 		return NRK_OK;
 174:../../../src/kernel/source/nrk_events.c **** 	} 
 175:../../../src/kernel/source/nrk_events.c **** 	// No task was waiting on the signal
 176:../../../src/kernel/source/nrk_events.c **** 	_nrk_errno_set(2);
 177:../../../src/kernel/source/nrk_events.c **** 	return NRK_ERROR;
 178:../../../src/kernel/source/nrk_events.c **** }
 179:../../../src/kernel/source/nrk_events.c **** 
 180:../../../src/kernel/source/nrk_events.c **** 
 181:../../../src/kernel/source/nrk_events.c **** uint32_t nrk_event_wait(uint32_t event_mask)
 182:../../../src/kernel/source/nrk_events.c **** {
 183:../../../src/kernel/source/nrk_events.c **** 
 184:../../../src/kernel/source/nrk_events.c **** 	// FIXME: Should go through list and check that all masks are registered, not just 1
 185:../../../src/kernel/source/nrk_events.c **** 	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
 186:../../../src/kernel/source/nrk_events.c **** 	  {
 187:../../../src/kernel/source/nrk_events.c **** 	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
 188:../../../src/kernel/source/nrk_events.c **** 	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
 189:../../../src/kernel/source/nrk_events.c **** 	  }
 190:../../../src/kernel/source/nrk_events.c **** 	else
 191:../../../src/kernel/source/nrk_events.c **** 	  {
 192:../../../src/kernel/source/nrk_events.c **** 	   return 0;
 193:../../../src/kernel/source/nrk_events.c **** 	  }
 194:../../../src/kernel/source/nrk_events.c **** 
 195:../../../src/kernel/source/nrk_events.c **** 	if(event_mask & SIG(nrk_wakeup_signal))
 196:../../../src/kernel/source/nrk_events.c **** 		nrk_wait_until_nw();
 197:../../../src/kernel/source/nrk_events.c **** 	else
 198:../../../src/kernel/source/nrk_events.c **** 		nrk_wait_until_ticks(0);
 199:../../../src/kernel/source/nrk_events.c **** 	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
 200:../../../src/kernel/source/nrk_events.c **** 	return ( (nrk_cur_task_TCB->active_signal_mask));
 201:../../../src/kernel/source/nrk_events.c **** }
 202:../../../src/kernel/source/nrk_events.c **** 
 203:../../../src/kernel/source/nrk_events.c **** int8_t nrk_sem_query(nrk_sem_t *rsrc )
 204:../../../src/kernel/source/nrk_events.c **** {
 205:../../../src/kernel/source/nrk_events.c **** 	int8_t id;
 206:../../../src/kernel/source/nrk_events.c **** 	id=nrk_get_resource_index(rsrc);  
 207:../../../src/kernel/source/nrk_events.c **** 	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
 208:../../../src/kernel/source/nrk_events.c **** 	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
 209:../../../src/kernel/source/nrk_events.c **** 	
 210:../../../src/kernel/source/nrk_events.c **** 	return(nrk_sem_list[id].value);
 211:../../../src/kernel/source/nrk_events.c **** }
 212:../../../src/kernel/source/nrk_events.c **** 
 213:../../../src/kernel/source/nrk_events.c **** 
 214:../../../src/kernel/source/nrk_events.c **** 
 215:../../../src/kernel/source/nrk_events.c **** int8_t nrk_sem_pend(nrk_sem_t *rsrc )
 216:../../../src/kernel/source/nrk_events.c **** {
 217:../../../src/kernel/source/nrk_events.c **** 	int8_t id;
 218:../../../src/kernel/source/nrk_events.c **** 	id=nrk_get_resource_index(rsrc);  
 219:../../../src/kernel/source/nrk_events.c **** 	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
 220:../../../src/kernel/source/nrk_events.c **** 	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
 221:../../../src/kernel/source/nrk_events.c **** 	
 222:../../../src/kernel/source/nrk_events.c **** 	nrk_int_disable();
 223:../../../src/kernel/source/nrk_events.c **** 	if(nrk_sem_list[id].value==0)
 224:../../../src/kernel/source/nrk_events.c **** 	{
 225:../../../src/kernel/source/nrk_events.c **** 		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
 226:../../../src/kernel/source/nrk_events.c **** 		nrk_cur_task_TCB->active_signal_mask=id;
 227:../../../src/kernel/source/nrk_events.c **** 		// Wait on suspend event
 228:../../../src/kernel/source/nrk_events.c **** 		nrk_int_enable();
 229:../../../src/kernel/source/nrk_events.c **** 		nrk_wait_until_ticks(0);
 230:../../../src/kernel/source/nrk_events.c **** 	}
 231:../../../src/kernel/source/nrk_events.c **** 
 232:../../../src/kernel/source/nrk_events.c **** 	nrk_sem_list[id].value--;	
 233:../../../src/kernel/source/nrk_events.c **** 	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
 234:../../../src/kernel/source/nrk_events.c **** 	nrk_cur_task_TCB->elevated_prio_flag=1;
 235:../../../src/kernel/source/nrk_events.c **** 	nrk_int_enable();
 236:../../../src/kernel/source/nrk_events.c **** 
 237:../../../src/kernel/source/nrk_events.c **** 	return NRK_OK;
 238:../../../src/kernel/source/nrk_events.c **** }
 239:../../../src/kernel/source/nrk_events.c **** 
 240:../../../src/kernel/source/nrk_events.c **** 
 241:../../../src/kernel/source/nrk_events.c **** 
 242:../../../src/kernel/source/nrk_events.c **** int8_t nrk_sem_post(nrk_sem_t *rsrc)
 243:../../../src/kernel/source/nrk_events.c **** {
 244:../../../src/kernel/source/nrk_events.c **** 	int8_t id=nrk_get_resource_index(rsrc);	
 245:../../../src/kernel/source/nrk_events.c **** 	int8_t task_ID;
 246:../../../src/kernel/source/nrk_events.c **** 	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
 247:../../../src/kernel/source/nrk_events.c **** 	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
 248:../../../src/kernel/source/nrk_events.c **** 
 249:../../../src/kernel/source/nrk_events.c **** 	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
 250:../../../src/kernel/source/nrk_events.c **** 	{
 251:../../../src/kernel/source/nrk_events.c **** 		// Signal RSRC Event		
 252:../../../src/kernel/source/nrk_events.c **** 		nrk_int_disable();
 253:../../../src/kernel/source/nrk_events.c **** 
 254:../../../src/kernel/source/nrk_events.c **** 		nrk_sem_list[id].value++;
 255:../../../src/kernel/source/nrk_events.c **** 		nrk_cur_task_TCB->elevated_prio_flag=0;
 256:../../../src/kernel/source/nrk_events.c **** 
 257:../../../src/kernel/source/nrk_events.c **** 		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
 258:../../../src/kernel/source/nrk_events.c **** 			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
 259:../../../src/kernel/source/nrk_events.c **** 				if((nrk_task_TCB[task_ID].active_signal_mask == id))
 260:../../../src/kernel/source/nrk_events.c **** 				{
 261:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].task_state=SUSPENDED;
 262:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].next_wakeup=0;
 263:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].event_suspend=0;
 264:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].active_signal_mask=0;
 265:../../../src/kernel/source/nrk_events.c **** 				}   
 266:../../../src/kernel/source/nrk_events.c **** 
 267:../../../src/kernel/source/nrk_events.c **** 		}
 268:../../../src/kernel/source/nrk_events.c **** 		nrk_int_enable();
 269:../../../src/kernel/source/nrk_events.c **** 	}
 270:../../../src/kernel/source/nrk_events.c **** 		
 271:../../../src/kernel/source/nrk_events.c **** return NRK_OK;
 272:../../../src/kernel/source/nrk_events.c **** }
 273:../../../src/kernel/source/nrk_events.c **** 
 274:../../../src/kernel/source/nrk_events.c **** int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
 275:../../../src/kernel/source/nrk_events.c **** {
 276:../../../src/kernel/source/nrk_events.c **** int8_t id=nrk_get_resource_index(rsrc);	
 277:../../../src/kernel/source/nrk_events.c **** 	int8_t task_ID;
 278:../../../src/kernel/source/nrk_events.c **** 	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
 279:../../../src/kernel/source/nrk_events.c **** 	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
 280:../../../src/kernel/source/nrk_events.c **** 
 281:../../../src/kernel/source/nrk_events.c **** 	nrk_sem_list[id].count=-1;
 282:../../../src/kernel/source/nrk_events.c **** 	nrk_sem_list[id].value=-1;
 283:../../../src/kernel/source/nrk_events.c **** 	nrk_sem_list[id].resource_ceiling=-1;
 284:../../../src/kernel/source/nrk_events.c **** 	_nrk_resource_cnt--;
 285:../../../src/kernel/source/nrk_events.c **** return NRK_OK;
 286:../../../src/kernel/source/nrk_events.c **** }
 287:../../../src/kernel/source/nrk_events.c **** 
 288:../../../src/kernel/source/nrk_events.c **** nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
 289:../../../src/kernel/source/nrk_events.c **** {
 414               	.LM19:
 415               	.LFBB5:
 416               	/* prologue: function */
 417               	/* frame size = 0 */
 290:../../../src/kernel/source/nrk_events.c **** uint8_t i;
 291:../../../src/kernel/source/nrk_events.c **** 	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
 292:../../../src/kernel/source/nrk_events.c **** 		return NULL;  
 293:../../../src/kernel/source/nrk_events.c **** 	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
 294:../../../src/kernel/source/nrk_events.c **** 		{
 295:../../../src/kernel/source/nrk_events.c **** 		   if(nrk_sem_list[i].count==-1) break;
 296:../../../src/kernel/source/nrk_events.c **** 		}
 297:../../../src/kernel/source/nrk_events.c **** 	                                              
 298:../../../src/kernel/source/nrk_events.c **** 	nrk_sem_list[i].value=count;
 299:../../../src/kernel/source/nrk_events.c **** 	nrk_sem_list[i].count=count;
 300:../../../src/kernel/source/nrk_events.c **** 	nrk_sem_list[i].resource_ceiling=ceiling_prio;
 301:../../../src/kernel/source/nrk_events.c **** 	_nrk_resource_cnt++;
 302:../../../src/kernel/source/nrk_events.c **** 	return	&nrk_sem_list[i];
 303:../../../src/kernel/source/nrk_events.c **** }
 419               	.LM20:
 420 0174 80E0      		ldi r24,lo8(0)
 421 0176 90E0      		ldi r25,hi8(0)
 422               	/* epilogue start */
 423 0178 0895      		ret
 425               	.Lscope5:
 427               		.stabd	78,0,0
 430               	.global	nrk_get_resource_index
 432               	nrk_get_resource_index:
 433               		.stabd	46,0,0
 304:../../../src/kernel/source/nrk_events.c **** 
 305:../../../src/kernel/source/nrk_events.c **** int8_t nrk_get_resource_index(nrk_sem_t *resrc)
 306:../../../src/kernel/source/nrk_events.c **** {
 435               	.LM21:
 436               	.LFBB6:
 437               	/* prologue: function */
 438               	/* frame size = 0 */
 307:../../../src/kernel/source/nrk_events.c **** 	int8_t id;
 308:../../../src/kernel/source/nrk_events.c **** 		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
 309:../../../src/kernel/source/nrk_events.c **** 			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
 440               	.LM22:
 441 017a 8050      		subi r24,lo8(nrk_sem_list)
 442 017c 9040      		sbci r25,hi8(nrk_sem_list)
 443 017e 01F0      		breq .L20
 444 0180 8FEF      		ldi r24,lo8(-1)
 445 0182 0895      		ret
 446               	.L20:
 447 0184 80E0      		ldi r24,lo8(0)
 310:../../../src/kernel/source/nrk_events.c **** 				return id;
 311:../../../src/kernel/source/nrk_events.c **** 	return NRK_ERROR;
 312:../../../src/kernel/source/nrk_events.c **** }
 449               	.LM23:
 450 0186 0895      		ret
 455               	.Lscope6:
 457               		.stabd	78,0,0
 460               	.global	nrk_sem_delete
 462               	nrk_sem_delete:
 463               		.stabd	46,0,0
 276:../../../src/kernel/source/nrk_events.c **** {
 465               	.LM24:
 466               	.LFBB7:
 467               	/* prologue: function */
 468               	/* frame size = 0 */
 469 0188 FC01      		movw r30,r24
 470               	.LBB10:
 471               	.LBB11:
 310:../../../src/kernel/source/nrk_events.c **** 				return id;
 473               	.LM25:
 474 018a 80E0      		ldi r24,hi8(nrk_sem_list)
 475 018c E030      		cpi r30,lo8(nrk_sem_list)
 476 018e F807      		cpc r31,r24
 477 0190 01F4      		brne .L24
 478               	.LBE11:
 479               	.LBE10:
 282:../../../src/kernel/source/nrk_events.c **** 	nrk_sem_list[id].count=-1;
 481               	.LM26:
 482 0192 8FEF      		ldi r24,lo8(-1)
 483 0194 8083      		st Z,r24
 283:../../../src/kernel/source/nrk_events.c **** 	nrk_sem_list[id].value=-1;
 485               	.LM27:
 486 0196 8283      		std Z+2,r24
 284:../../../src/kernel/source/nrk_events.c **** 	nrk_sem_list[id].resource_ceiling=-1;
 488               	.LM28:
 489 0198 8183      		std Z+1,r24
 285:../../../src/kernel/source/nrk_events.c **** 	_nrk_resource_cnt--;
 491               	.LM29:
 492 019a 8091 0000 		lds r24,_nrk_resource_cnt
 493 019e 8150      		subi r24,lo8(-(-1))
 494 01a0 8093 0000 		sts _nrk_resource_cnt,r24
 495 01a4 81E0      		ldi r24,lo8(1)
 287:../../../src/kernel/source/nrk_events.c **** }
 497               	.LM30:
 498 01a6 0895      		ret
 499               	.L24:
 279:../../../src/kernel/source/nrk_events.c **** 	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
 501               	.LM31:
 502 01a8 81E0      		ldi r24,lo8(1)
 503 01aa 0E94 0000 		call _nrk_errno_set
 504 01ae 8FEF      		ldi r24,lo8(-1)
 505 01b0 0895      		ret
 507               	.Lscope7:
 509               		.stabd	78,0,0
 512               	.global	nrk_sem_query
 514               	nrk_sem_query:
 515               		.stabd	46,0,0
 205:../../../src/kernel/source/nrk_events.c **** {
 517               	.LM32:
 518               	.LFBB8:
 519               	/* prologue: function */
 520               	/* frame size = 0 */
 521 01b2 FC01      		movw r30,r24
 522               	.LBB12:
 523               	.LBB13:
 310:../../../src/kernel/source/nrk_events.c **** 			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
 525               	.LM33:
 526 01b4 80E0      		ldi r24,hi8(nrk_sem_list)
 527 01b6 E030      		cpi r30,lo8(nrk_sem_list)
 528 01b8 F807      		cpc r31,r24
 529 01ba 01F4      		brne .L28
 530               	.LBE13:
 531               	.LBE12:
 211:../../../src/kernel/source/nrk_events.c **** 	return(nrk_sem_list[id].value);
 533               	.LM34:
 534 01bc 8281      		ldd r24,Z+2
 212:../../../src/kernel/source/nrk_events.c **** }
 536               	.LM35:
 537 01be 0895      		ret
 538               	.L28:
 208:../../../src/kernel/source/nrk_events.c **** 	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
 540               	.LM36:
 541 01c0 81E0      		ldi r24,lo8(1)
 542 01c2 0E94 0000 		call _nrk_errno_set
 543 01c6 8FEF      		ldi r24,lo8(-1)
 544 01c8 0895      		ret
 546               	.Lscope8:
 548               		.stabd	78,0,0
 551               	.global	nrk_sem_post
 553               	nrk_sem_post:
 554               		.stabd	46,0,0
 244:../../../src/kernel/source/nrk_events.c **** {
 556               	.LM37:
 557               	.LFBB9:
 558               	/* prologue: function */
 559               	/* frame size = 0 */
 560 01ca FC01      		movw r30,r24
 561               	.LBB14:
 562               	.LBB15:
 310:../../../src/kernel/source/nrk_events.c **** 			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
 564               	.LM38:
 565 01cc 80E0      		ldi r24,hi8(nrk_sem_list)
 566 01ce E030      		cpi r30,lo8(nrk_sem_list)
 567 01d0 F807      		cpc r31,r24
 568 01d2 01F4      		brne .L32
 569               	.LBE15:
 570               	.LBE14:
 250:../../../src/kernel/source/nrk_events.c **** 	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
 572               	.LM39:
 573 01d4 9281      		ldd r25,Z+2
 574 01d6 8081      		ld r24,Z
 575 01d8 9817      		cp r25,r24
 576 01da 04F0      		brlt .L33
 577 01dc 81E0      		ldi r24,lo8(1)
 578 01de 0895      		ret
 579               	.L33:
 253:../../../src/kernel/source/nrk_events.c **** 		nrk_int_disable();
 581               	.LM40:
 582 01e0 0E94 0000 		call nrk_int_disable
 255:../../../src/kernel/source/nrk_events.c **** 		nrk_sem_list[id].value++;
 584               	.LM41:
 585 01e4 8091 0000 		lds r24,nrk_sem_list+2
 586 01e8 8F5F      		subi r24,lo8(-(1))
 587 01ea 8093 0000 		sts nrk_sem_list+2,r24
 256:../../../src/kernel/source/nrk_events.c **** 		nrk_cur_task_TCB->elevated_prio_flag=0;
 589               	.LM42:
 590 01ee E091 0000 		lds r30,nrk_cur_task_TCB
 591 01f2 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 592 01f6 1482      		std Z+4,__zero_reg__
 593 01f8 E0E0      		ldi r30,lo8(nrk_task_TCB+7)
 594 01fa F0E0      		ldi r31,hi8(nrk_task_TCB+7)
 262:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].task_state=SUSPENDED;
 596               	.LM43:
 597 01fc 23E0      		ldi r18,lo8(3)
 598               	.L36:
 259:../../../src/kernel/source/nrk_events.c **** 			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
 600               	.LM44:
 601 01fe 8081      		ld r24,Z
 602 0200 8230      		cpi r24,lo8(2)
 603 0202 01F4      		brne .L35
 260:../../../src/kernel/source/nrk_events.c **** 				if((nrk_task_TCB[task_ID].active_signal_mask == id))
 605               	.LM45:
 606 0204 8285      		ldd r24,Z+10
 607 0206 9385      		ldd r25,Z+11
 608 0208 A485      		ldd r26,Z+12
 609 020a B585      		ldd r27,Z+13
 610 020c 0097      		sbiw r24,0
 611 020e A105      		cpc r26,__zero_reg__
 612 0210 B105      		cpc r27,__zero_reg__
 613 0212 01F4      		brne .L35
 262:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].task_state=SUSPENDED;
 615               	.LM46:
 616 0214 2283      		std Z+2,r18
 263:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].next_wakeup=0;
 618               	.LM47:
 619 0216 1786      		std Z+15,__zero_reg__
 620 0218 1686      		std Z+14,__zero_reg__
 264:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].event_suspend=0;
 622               	.LM48:
 623 021a 1082      		st Z,__zero_reg__
 265:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].active_signal_mask=0;
 625               	.LM49:
 626 021c 1286      		std Z+10,__zero_reg__
 627 021e 1386      		std Z+11,__zero_reg__
 628 0220 1486      		std Z+12,__zero_reg__
 629 0222 1586      		std Z+13,__zero_reg__
 630               	.L35:
 631 0224 B196      		adiw r30,33
 258:../../../src/kernel/source/nrk_events.c **** 		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
 633               	.LM50:
 634 0226 80E0      		ldi r24,hi8(nrk_task_TCB+172)
 635 0228 E030      		cpi r30,lo8(nrk_task_TCB+172)
 636 022a F807      		cpc r31,r24
 637 022c 01F4      		brne .L36
 269:../../../src/kernel/source/nrk_events.c **** 		nrk_int_enable();
 639               	.LM51:
 640 022e 0E94 0000 		call nrk_int_enable
 641 0232 81E0      		ldi r24,lo8(1)
 273:../../../src/kernel/source/nrk_events.c **** }
 643               	.LM52:
 644 0234 0895      		ret
 645               	.L32:
 247:../../../src/kernel/source/nrk_events.c **** 	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
 647               	.LM53:
 648 0236 81E0      		ldi r24,lo8(1)
 649 0238 0E94 0000 		call _nrk_errno_set
 650 023c 8FEF      		ldi r24,lo8(-1)
 651 023e 0895      		ret
 653               	.Lscope9:
 655               		.stabd	78,0,0
 658               	.global	nrk_event_signal
 660               	nrk_event_signal:
 661               		.stabd	46,0,0
 126:../../../src/kernel/source/nrk_events.c **** {
 663               	.LM54:
 664               	.LFBB10:
 665 0240 DF92      		push r13
 666 0242 EF92      		push r14
 667 0244 FF92      		push r15
 668 0246 0F93      		push r16
 669 0248 1F93      		push r17
 670               	/* prologue: function */
 671               	/* frame size = 0 */
 132:../../../src/kernel/source/nrk_events.c **** 	sig_mask=SIG(sig_id);
 673               	.LM55:
 674 024a 91E0      		ldi r25,lo8(1)
 675 024c E92E      		mov r14,r25
 676 024e F12C      		mov r15,__zero_reg__
 677 0250 012D      		mov r16,__zero_reg__
 678 0252 112D      		mov r17,__zero_reg__
 679 0254 00C0      		rjmp 2f
 680 0256 EE0C      	1:	lsl r14
 681 0258 FF1C      		rol r15
 682 025a 001F      		rol r16
 683 025c 111F      		rol r17
 684 025e 8A95      	2:	dec r24
 685 0260 02F4      		brpl 1b
 135:../../../src/kernel/source/nrk_events.c **** 	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
 687               	.LM56:
 688 0262 8091 0000 		lds r24,_nrk_signal_list
 689 0266 9091 0000 		lds r25,(_nrk_signal_list)+1
 690 026a A091 0000 		lds r26,(_nrk_signal_list)+2
 691 026e B091 0000 		lds r27,(_nrk_signal_list)+3
 692 0272 8E21      		and r24,r14
 693 0274 9F21      		and r25,r15
 694 0276 A023      		and r26,r16
 695 0278 B123      		and r27,r17
 696 027a 0097      		sbiw r24,0
 697 027c A105      		cpc r26,__zero_reg__
 698 027e B105      		cpc r27,__zero_reg__
 699 0280 01F4      		brne .L40
 700 0282 81E0      		ldi r24,lo8(1)
 701 0284 00C0      		rjmp .L48
 702               	.L40:
 138:../../../src/kernel/source/nrk_events.c **** 	nrk_int_disable();
 704               	.LM57:
 705 0286 0E94 0000 		call nrk_int_disable
 706 028a E0E0      		ldi r30,lo8(nrk_task_TCB+7)
 707 028c F0E0      		ldi r31,hi8(nrk_task_TCB+7)
 708 028e DD24      		clr r13
 148:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].task_state=SUSPENDED;
 710               	.LM58:
 711 0290 23E0      		ldi r18,lo8(3)
 712               	.L44:
 145:../../../src/kernel/source/nrk_events.c **** 			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
 714               	.LM59:
 715 0292 8081      		ld r24,Z
 716 0294 8130      		cpi r24,lo8(1)
 717 0296 01F4      		brne .L42
 146:../../../src/kernel/source/nrk_events.c **** 				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
 719               	.LM60:
 720 0298 8285      		ldd r24,Z+10
 721 029a 9385      		ldd r25,Z+11
 722 029c A485      		ldd r26,Z+12
 723 029e B585      		ldd r27,Z+13
 724 02a0 8E21      		and r24,r14
 725 02a2 9F21      		and r25,r15
 726 02a4 A023      		and r26,r16
 727 02a6 B123      		and r27,r17
 728 02a8 0097      		sbiw r24,0
 729 02aa A105      		cpc r26,__zero_reg__
 730 02ac B105      		cpc r27,__zero_reg__
 731 02ae 01F0      		breq .L42
 148:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].task_state=SUSPENDED;
 733               	.LM61:
 734 02b0 2283      		std Z+2,r18
 149:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].next_wakeup=0;
 736               	.LM62:
 737 02b2 1786      		std Z+15,__zero_reg__
 738 02b4 1686      		std Z+14,__zero_reg__
 150:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].event_suspend=0;
 740               	.LM63:
 741 02b6 1082      		st Z,__zero_reg__
 153:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
 743               	.LM64:
 744 02b8 E286      		std Z+10,r14
 745 02ba F386      		std Z+11,r15
 746 02bc 0487      		std Z+12,r16
 747 02be 1587      		std Z+13,r17
 748 02c0 DD24      		clr r13
 749 02c2 D394      		inc r13
 750               	.L42:
 157:../../../src/kernel/source/nrk_events.c **** 			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
 752               	.LM65:
 753 02c4 8081      		ld r24,Z
 754 02c6 8230      		cpi r24,lo8(2)
 755 02c8 01F4      		brne .L43
 158:../../../src/kernel/source/nrk_events.c **** 				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
 757               	.LM66:
 758 02ca 8285      		ldd r24,Z+10
 759 02cc 9385      		ldd r25,Z+11
 760 02ce A485      		ldd r26,Z+12
 761 02d0 B585      		ldd r27,Z+13
 762 02d2 8E15      		cp r24,r14
 763 02d4 9F05      		cpc r25,r15
 764 02d6 A007      		cpc r26,r16
 765 02d8 B107      		cpc r27,r17
 766 02da 01F4      		brne .L43
 160:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].task_state=SUSPENDED;
 768               	.LM67:
 769 02dc 2283      		std Z+2,r18
 161:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].next_wakeup=0;
 771               	.LM68:
 772 02de 1786      		std Z+15,__zero_reg__
 773 02e0 1686      		std Z+14,__zero_reg__
 162:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].event_suspend=0;
 775               	.LM69:
 776 02e2 1082      		st Z,__zero_reg__
 165:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].active_signal_mask=0;
 778               	.LM70:
 779 02e4 1286      		std Z+10,__zero_reg__
 780 02e6 1386      		std Z+11,__zero_reg__
 781 02e8 1486      		std Z+12,__zero_reg__
 782 02ea 1586      		std Z+13,__zero_reg__
 783 02ec DD24      		clr r13
 784 02ee D394      		inc r13
 785               	.L43:
 786 02f0 B196      		adiw r30,33
 139:../../../src/kernel/source/nrk_events.c **** 	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
 788               	.LM71:
 789 02f2 80E0      		ldi r24,hi8(nrk_task_TCB+172)
 790 02f4 E030      		cpi r30,lo8(nrk_task_TCB+172)
 791 02f6 F807      		cpc r31,r24
 792 02f8 01F4      		brne .L44
 171:../../../src/kernel/source/nrk_events.c **** 	nrk_int_enable();
 794               	.LM72:
 795 02fa 0E94 0000 		call nrk_int_enable
 172:../../../src/kernel/source/nrk_events.c **** 	if(event_occured)
 797               	.LM73:
 798 02fe DD20      		tst r13
 799 0300 01F0      		breq .L45
 800 0302 81E0      		ldi r24,lo8(1)
 801 0304 00C0      		rjmp .L41
 802               	.L45:
 177:../../../src/kernel/source/nrk_events.c **** 	_nrk_errno_set(2);
 804               	.LM74:
 805 0306 82E0      		ldi r24,lo8(2)
 806               	.L48:
 807 0308 0E94 0000 		call _nrk_errno_set
 808 030c 8FEF      		ldi r24,lo8(-1)
 809               	.L41:
 810               	/* epilogue start */
 179:../../../src/kernel/source/nrk_events.c **** }
 812               	.LM75:
 813 030e 1F91      		pop r17
 814 0310 0F91      		pop r16
 815 0312 FF90      		pop r15
 816 0314 EF90      		pop r14
 817 0316 DF90      		pop r13
 818 0318 0895      		ret
 824               	.Lscope10:
 826               		.stabd	78,0,0
 829               	.global	nrk_signal_delete
 831               	nrk_signal_delete:
 832               		.stabd	46,0,0
  63:../../../src/kernel/source/nrk_events.c **** {
 834               	.LM76:
 835               	.LFBB11:
 836 031a EF92      		push r14
 837 031c FF92      		push r15
 838 031e 0F93      		push r16
 839 0320 1F93      		push r17
 840 0322 CF93      		push r28
 841 0324 DF93      		push r29
 842               	/* prologue: function */
 843               	/* frame size = 0 */
  67:../../../src/kernel/source/nrk_events.c **** 	sig_mask=SIG(sig_id);
 845               	.LM77:
 846 0326 C82F      		mov r28,r24
 847 0328 DD27      		clr r29
 848 032a C7FD      		sbrc r28,7
 849 032c D095      		com r29
 850 032e 21E0      		ldi r18,lo8(1)
 851 0330 E22E      		mov r14,r18
 852 0332 F12C      		mov r15,__zero_reg__
 853 0334 012D      		mov r16,__zero_reg__
 854 0336 112D      		mov r17,__zero_reg__
 855 0338 0C2E      		mov r0,r28
 856 033a 00C0      		rjmp 2f
 857 033c EE0C      	1:	lsl r14
 858 033e FF1C      		rol r15
 859 0340 001F      		rol r16
 860 0342 111F      		rol r17
 861 0344 0A94      	2:	dec r0
 862 0346 02F4      		brpl 1b
  69:../../../src/kernel/source/nrk_events.c **** 	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
 864               	.LM78:
 865 0348 8091 0000 		lds r24,_nrk_signal_list
 866 034c 9091 0000 		lds r25,(_nrk_signal_list)+1
 867 0350 A091 0000 		lds r26,(_nrk_signal_list)+2
 868 0354 B091 0000 		lds r27,(_nrk_signal_list)+3
 869 0358 8E21      		and r24,r14
 870 035a 9F21      		and r25,r15
 871 035c A023      		and r26,r16
 872 035e B123      		and r27,r17
 873 0360 0097      		sbiw r24,0
 874 0362 A105      		cpc r26,__zero_reg__
 875 0364 B105      		cpc r27,__zero_reg__
 876 0366 01F4      		brne .L50
 877 0368 8FEF      		ldi r24,lo8(-1)
 878 036a 00C0      		rjmp .L51
 879               	.L50:
  71:../../../src/kernel/source/nrk_events.c **** 	nrk_int_disable();
 881               	.LM79:
 882 036c 0E94 0000 		call nrk_int_disable
 883 0370 E0E0      		ldi r30,lo8(nrk_task_TCB+7)
 884 0372 F0E0      		ldi r31,hi8(nrk_task_TCB+7)
  84:../../../src/kernel/source/nrk_events.c **** 		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
 886               	.LM80:
 887 0374 A801      		movw r20,r16
 888 0376 9701      		movw r18,r14
 889 0378 2095      		com r18
 890 037a 3095      		com r19
 891 037c 4095      		com r20
 892 037e 5095      		com r21
  82:../../../src/kernel/source/nrk_events.c **** 			nrk_task_TCB[task_ID].task_state=SUSPENDED;
 894               	.LM81:
 895 0380 63E0      		ldi r22,lo8(3)
 896               	.L54:
  73:../../../src/kernel/source/nrk_events.c **** 		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
 898               	.LM82:
 899 0382 8181      		ldd r24,Z+1
 900 0384 8F3F      		cpi r24,lo8(-1)
 901 0386 01F0      		breq .L52
  77:../../../src/kernel/source/nrk_events.c **** 		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal i
 903               	.LM83:
 904 0388 8681      		ldd r24,Z+6
 905 038a 9781      		ldd r25,Z+7
 906 038c A085      		ldd r26,Z+8
 907 038e B185      		ldd r27,Z+9
 908 0390 8E15      		cp r24,r14
 909 0392 9F05      		cpc r25,r15
 910 0394 A007      		cpc r26,r16
 911 0396 B107      		cpc r27,r17
 912 0398 01F4      		brne .L53
  80:../../../src/kernel/source/nrk_events.c **** 			nrk_task_TCB[task_ID].active_signal_mask=0;
 914               	.LM84:
 915 039a 1286      		std Z+10,__zero_reg__
 916 039c 1386      		std Z+11,__zero_reg__
 917 039e 1486      		std Z+12,__zero_reg__
 918 03a0 1586      		std Z+13,__zero_reg__
  81:../../../src/kernel/source/nrk_events.c **** 			nrk_task_TCB[task_ID].event_suspend=0;
 920               	.LM85:
 921 03a2 1082      		st Z,__zero_reg__
  82:../../../src/kernel/source/nrk_events.c **** 			nrk_task_TCB[task_ID].task_state=SUSPENDED;
 923               	.LM86:
 924 03a4 6283      		std Z+2,r22
 925               	.L53:
  84:../../../src/kernel/source/nrk_events.c **** 		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
 927               	.LM87:
 928 03a6 8681      		ldd r24,Z+6
 929 03a8 9781      		ldd r25,Z+7
 930 03aa A085      		ldd r26,Z+8
 931 03ac B185      		ldd r27,Z+9
 932 03ae 8223      		and r24,r18
 933 03b0 9323      		and r25,r19
 934 03b2 A423      		and r26,r20
 935 03b4 B523      		and r27,r21
 936 03b6 8683      		std Z+6,r24
 937 03b8 9783      		std Z+7,r25
 938 03ba A087      		std Z+8,r26
 939 03bc B187      		std Z+9,r27
  85:../../../src/kernel/source/nrk_events.c **** 		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
 941               	.LM88:
 942 03be 8285      		ldd r24,Z+10
 943 03c0 9385      		ldd r25,Z+11
 944 03c2 A485      		ldd r26,Z+12
 945 03c4 B585      		ldd r27,Z+13
 946 03c6 8223      		and r24,r18
 947 03c8 9323      		and r25,r19
 948 03ca A423      		and r26,r20
 949 03cc B523      		and r27,r21
 950 03ce 8287      		std Z+10,r24
 951 03d0 9387      		std Z+11,r25
 952 03d2 A487      		std Z+12,r26
 953 03d4 B587      		std Z+13,r27
 954               	.L52:
 955 03d6 B196      		adiw r30,33
  72:../../../src/kernel/source/nrk_events.c **** 	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
 957               	.LM89:
 958 03d8 80E0      		ldi r24,hi8(nrk_task_TCB+172)
 959 03da E030      		cpi r30,lo8(nrk_task_TCB+172)
 960 03dc F807      		cpc r31,r24
 961 03de 01F4      		brne .L54
  89:../../../src/kernel/source/nrk_events.c **** 	_nrk_signal_list&=~SIG(sig_id);
 963               	.LM90:
 964 03e0 2EEF      		ldi r18,lo8(-2)
 965 03e2 3FEF      		ldi r19,hi8(-2)
 966 03e4 4FEF      		ldi r20,hlo8(-2)
 967 03e6 5FEF      		ldi r21,hhi8(-2)
 968 03e8 00C0      		rjmp 2f
 969 03ea 220F      	1:	lsl r18
 970 03ec 331F      		rol r19
 971 03ee 441F      		rol r20
 972 03f0 551F      		rol r21
 973 03f2 CA95      	2:	dec r28
 974 03f4 02F4      		brpl 1b
 975 03f6 8091 0000 		lds r24,_nrk_signal_list
 976 03fa 9091 0000 		lds r25,(_nrk_signal_list)+1
 977 03fe A091 0000 		lds r26,(_nrk_signal_list)+2
 978 0402 B091 0000 		lds r27,(_nrk_signal_list)+3
 979 0406 8223      		and r24,r18
 980 0408 9323      		and r25,r19
 981 040a A423      		and r26,r20
 982 040c B523      		and r27,r21
 983 040e 8093 0000 		sts _nrk_signal_list,r24
 984 0412 9093 0000 		sts (_nrk_signal_list)+1,r25
 985 0416 A093 0000 		sts (_nrk_signal_list)+2,r26
 986 041a B093 0000 		sts (_nrk_signal_list)+3,r27
  90:../../../src/kernel/source/nrk_events.c **** 	nrk_int_enable();
 988               	.LM91:
 989 041e 0E94 0000 		call nrk_int_enable
 990 0422 81E0      		ldi r24,lo8(1)
 991               	.L51:
 992               	/* epilogue start */
  93:../../../src/kernel/source/nrk_events.c **** }
 994               	.LM92:
 995 0424 DF91      		pop r29
 996 0426 CF91      		pop r28
 997 0428 1F91      		pop r17
 998 042a 0F91      		pop r16
 999 042c FF90      		pop r15
 1000 042e EF90      		pop r14
 1001 0430 0895      		ret
 1006               	.Lscope11:
 1008               		.stabd	78,0,0
 1011               	.global	nrk_sem_pend
 1013               	nrk_sem_pend:
 1014               		.stabd	46,0,0
 217:../../../src/kernel/source/nrk_events.c **** {
 1016               	.LM93:
 1017               	.LFBB12:
 1018 0432 CF93      		push r28
 1019 0434 DF93      		push r29
 1020               	/* prologue: function */
 1021               	/* frame size = 0 */
 1022 0436 EC01      		movw r28,r24
 1023               	.LBB16:
 1024               	.LBB17:
 310:../../../src/kernel/source/nrk_events.c **** 			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
 1026               	.LM94:
 1027 0438 80E0      		ldi r24,hi8(nrk_sem_list)
 1028 043a C030      		cpi r28,lo8(nrk_sem_list)
 1029 043c D807      		cpc r29,r24
 1030 043e 01F4      		brne .L58
 1031               	.LBE17:
 1032               	.LBE16:
 223:../../../src/kernel/source/nrk_events.c **** 	nrk_int_disable();
 1034               	.LM95:
 1035 0440 0E94 0000 		call nrk_int_disable
 224:../../../src/kernel/source/nrk_events.c **** 	if(nrk_sem_list[id].value==0)
 1037               	.LM96:
 1038 0444 8A81      		ldd r24,Y+2
 1039 0446 8823      		tst r24
 1040 0448 01F4      		brne .L59
 226:../../../src/kernel/source/nrk_events.c **** 		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
 1042               	.LM97:
 1043 044a E091 0000 		lds r30,nrk_cur_task_TCB
 1044 044e F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1045 0452 8781      		ldd r24,Z+7
 1046 0454 8260      		ori r24,lo8(2)
 1047 0456 8783      		std Z+7,r24
 227:../../../src/kernel/source/nrk_events.c **** 		nrk_cur_task_TCB->active_signal_mask=id;
 1049               	.LM98:
 1050 0458 118A      		std Z+17,__zero_reg__
 1051 045a 128A      		std Z+18,__zero_reg__
 1052 045c 138A      		std Z+19,__zero_reg__
 1053 045e 148A      		std Z+20,__zero_reg__
 229:../../../src/kernel/source/nrk_events.c **** 		nrk_int_enable();
 1055               	.LM99:
 1056 0460 0E94 0000 		call nrk_int_enable
 230:../../../src/kernel/source/nrk_events.c **** 		nrk_wait_until_ticks(0);
 1058               	.LM100:
 1059 0464 80E0      		ldi r24,lo8(0)
 1060 0466 90E0      		ldi r25,hi8(0)
 1061 0468 0E94 0000 		call nrk_wait_until_ticks
 1062               	.L59:
 233:../../../src/kernel/source/nrk_events.c **** 	nrk_sem_list[id].value--;	
 1064               	.LM101:
 1065 046c 8091 0000 		lds r24,nrk_sem_list+2
 1066 0470 8150      		subi r24,lo8(-(-1))
 1067 0472 8093 0000 		sts nrk_sem_list+2,r24
 234:../../../src/kernel/source/nrk_events.c **** 	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
 1069               	.LM102:
 1070 0476 E091 0000 		lds r30,nrk_cur_task_TCB
 1071 047a F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1072 047e 8091 0000 		lds r24,nrk_sem_list+1
 1073 0482 8387      		std Z+11,r24
 235:../../../src/kernel/source/nrk_events.c **** 	nrk_cur_task_TCB->elevated_prio_flag=1;
 1075               	.LM103:
 1076 0484 81E0      		ldi r24,lo8(1)
 1077 0486 8483      		std Z+4,r24
 236:../../../src/kernel/source/nrk_events.c **** 	nrk_int_enable();
 1079               	.LM104:
 1080 0488 0E94 0000 		call nrk_int_enable
 1081 048c 81E0      		ldi r24,lo8(1)
 1082               	.L60:
 1083               	/* epilogue start */
 239:../../../src/kernel/source/nrk_events.c **** }
 1085               	.LM105:
 1086 048e DF91      		pop r29
 1087 0490 CF91      		pop r28
 1088 0492 0895      		ret
 1089               	.L58:
 220:../../../src/kernel/source/nrk_events.c **** 	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
 1091               	.LM106:
 1092 0494 81E0      		ldi r24,lo8(1)
 1093 0496 0E94 0000 		call _nrk_errno_set
 1094 049a 8FEF      		ldi r24,lo8(-1)
 1095 049c 00C0      		rjmp .L60
 1097               	.Lscope12:
 1099               		.stabd	78,0,0
 1102               	.global	nrk_event_wait
 1104               	nrk_event_wait:
 1105               		.stabd	46,0,0
 183:../../../src/kernel/source/nrk_events.c **** {
 1107               	.LM107:
 1108               	.LFBB13:
 1109               	/* prologue: function */
 1110               	/* frame size = 0 */
 1111 049e 9B01      		movw r18,r22
 1112 04a0 AC01      		movw r20,r24
 186:../../../src/kernel/source/nrk_events.c **** 	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
 1114               	.LM108:
 1115 04a2 E091 0000 		lds r30,nrk_cur_task_TCB
 1116 04a6 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1117 04aa 8585      		ldd r24,Z+13
 1118 04ac 9685      		ldd r25,Z+14
 1119 04ae A785      		ldd r26,Z+15
 1120 04b0 B089      		ldd r27,Z+16
 1121 04b2 8223      		and r24,r18
 1122 04b4 9323      		and r25,r19
 1123 04b6 A423      		and r26,r20
 1124 04b8 B523      		and r27,r21
 1125 04ba 0097      		sbiw r24,0
 1126 04bc A105      		cpc r26,__zero_reg__
 1127 04be B105      		cpc r27,__zero_reg__
 1128 04c0 01F4      		brne .L63
 1129 04c2 20E0      		ldi r18,lo8(0)
 1130 04c4 30E0      		ldi r19,hi8(0)
 1131 04c6 40E0      		ldi r20,hlo8(0)
 1132 04c8 50E0      		ldi r21,hhi8(0)
 1133 04ca 00C0      		rjmp .L64
 1134               	.L63:
 188:../../../src/kernel/source/nrk_events.c **** 	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
 1136               	.LM109:
 1137 04cc 218B      		std Z+17,r18
 1138 04ce 328B      		std Z+18,r19
 1139 04d0 438B      		std Z+19,r20
 1140 04d2 548B      		std Z+20,r21
 189:../../../src/kernel/source/nrk_events.c **** 	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
 1142               	.LM110:
 1143 04d4 81E0      		ldi r24,lo8(1)
 1144 04d6 8783      		std Z+7,r24
 196:../../../src/kernel/source/nrk_events.c **** 	if(event_mask & SIG(nrk_wakeup_signal))
 1146               	.LM111:
 1147 04d8 0090 0000 		lds r0,nrk_wakeup_signal
 1148 04dc 00C0      		rjmp 2f
 1149 04de 5695      	1:	lsr r21
 1150 04e0 4795      		ror r20
 1151 04e2 3795      		ror r19
 1152 04e4 2795      		ror r18
 1153 04e6 0A94      	2:	dec r0
 1154 04e8 02F4      		brpl 1b
 1155 04ea C901      		movw r24,r18
 1156 04ec 8170      		andi r24,lo8(1)
 1157 04ee 9070      		andi r25,hi8(1)
 1158 04f0 892B      		or r24,r25
 1159 04f2 01F0      		breq .L65
 197:../../../src/kernel/source/nrk_events.c **** 		nrk_wait_until_nw();
 1161               	.LM112:
 1162 04f4 0E94 0000 		call nrk_wait_until_nw
 1163 04f8 00C0      		rjmp .L66
 1164               	.L65:
 199:../../../src/kernel/source/nrk_events.c **** 		nrk_wait_until_ticks(0);
 1166               	.LM113:
 1167 04fa 80E0      		ldi r24,lo8(0)
 1168 04fc 90E0      		ldi r25,hi8(0)
 1169 04fe 0E94 0000 		call nrk_wait_until_ticks
 1170               	.L66:
 201:../../../src/kernel/source/nrk_events.c **** 	return ( (nrk_cur_task_TCB->active_signal_mask));
 1172               	.LM114:
 1173 0502 E091 0000 		lds r30,nrk_cur_task_TCB
 1174 0506 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1175 050a 2189      		ldd r18,Z+17
 1176 050c 3289      		ldd r19,Z+18
 1177 050e 4389      		ldd r20,Z+19
 1178 0510 5489      		ldd r21,Z+20
 1179               	.L64:
 202:../../../src/kernel/source/nrk_events.c **** }
 1181               	.LM115:
 1182 0512 B901      		movw r22,r18
 1183 0514 CA01      		movw r24,r20
 1184               	/* epilogue start */
 1185 0516 0895      		ret
 1187               	.Lscope13:
 1189               		.stabd	78,0,0
 1190               		.comm _nrk_signal_list,4,1
 1191               		.comm nrk_idle_task_stk,128,1
 1192               		.comm nrk_kernel_stk_ptr,2,1
 1193               		.comm nrk_task_TCB,165,1
 1194               		.comm nrk_wakeup_signal,1,1
 1195               		.comm _nrk_readyQ,30,1
 1196               		.comm _free_node,2,1
 1197               		.comm _head_node,2,1
 1198               		.comm nrk_cur_task_prio,1,1
 1199               		.comm nrk_cur_task_TCB,2,1
 1200               		.comm nrk_high_ready_prio,1,1
 1201               		.comm nrk_high_ready_TCB,2,1
 1202               		.comm _nrk_resource_cnt,1,1
 1203               		.comm nrk_system_time,8,1
 1204               		.comm error_task,1,1
 1205               		.comm error_num,1,1
 1206               		.comm _nrk_cpu_state,1,1
 1207               		.comm next_next_wakeup,2,1
 1208               		.comm _nrk_prev_timer_val,1,1
 1209               		.comm _nrk_time_trigger,1,1
 1210               		.comm app_timer0_callback,2,1
 1211               		.comm app_timer0_prescale,1,1
 1212               		.comm nrk_sem_list,3,1
 1237               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 nrk_events.c
     /tmp/ccbGqYa9.s:2      *ABS*:0000003f __SREG__
     /tmp/ccbGqYa9.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccbGqYa9.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccbGqYa9.s:5      *ABS*:00000034 __CCP__
     /tmp/ccbGqYa9.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccbGqYa9.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccbGqYa9.s:140    .text:00000000 nrk_signal_create
                            *COM*:00000004 _nrk_signal_list
     /tmp/ccbGqYa9.s:218    .text:00000072 nrk_signal_get_registered_mask
                            *COM*:00000002 nrk_cur_task_TCB
     /tmp/ccbGqYa9.s:245    .text:00000084 nrk_signal_unregister
     /tmp/ccbGqYa9.s:339    .text:00000106 nrk_signal_register
     /tmp/ccbGqYa9.s:411    .text:00000174 nrk_sem_create
     /tmp/ccbGqYa9.s:432    .text:0000017a nrk_get_resource_index
                            *COM*:00000003 nrk_sem_list
     /tmp/ccbGqYa9.s:462    .text:00000188 nrk_sem_delete
                            *COM*:00000001 _nrk_resource_cnt
     /tmp/ccbGqYa9.s:514    .text:000001b2 nrk_sem_query
     /tmp/ccbGqYa9.s:553    .text:000001ca nrk_sem_post
                            *COM*:000000a5 nrk_task_TCB
     /tmp/ccbGqYa9.s:660    .text:00000240 nrk_event_signal
     /tmp/ccbGqYa9.s:831    .text:0000031a nrk_signal_delete
     /tmp/ccbGqYa9.s:1013   .text:00000432 nrk_sem_pend
     /tmp/ccbGqYa9.s:1104   .text:0000049e nrk_event_wait
                            *COM*:00000001 nrk_wakeup_signal
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:0000001e _nrk_readyQ
                            *COM*:00000002 _free_node
                            *COM*:00000002 _head_node
                            *COM*:00000001 nrk_cur_task_prio
                            *COM*:00000001 nrk_high_ready_prio
                            *COM*:00000002 nrk_high_ready_TCB
                            *COM*:00000008 nrk_system_time
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000001 _nrk_cpu_state
                            *COM*:00000002 next_next_wakeup
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
_nrk_errno_set
nrk_int_disable
nrk_int_enable
nrk_wait_until_ticks
nrk_wait_until_nw
